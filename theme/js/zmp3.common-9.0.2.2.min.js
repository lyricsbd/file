/*
 * 
 * @NOTE: Ban trigger khi get info user thanh cong
 * 
 * 
 */
/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 */
(function (a) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], a)
    } else {
        if (typeof exports === "object") {
            a(require("jquery"))
        } else {
            a(jQuery)
        }
    }
}(function (f) {
    var a = /\+/g;

    function d(i) {
        return b.raw ? i : encodeURIComponent(i)
    }

    function g(i) {
        return b.raw ? i : decodeURIComponent(i)
    }

    function h(i) {
        return d(b.json ? JSON.stringify(i) : String(i))
    }

    function c(i) {
        if (i.indexOf('"') === 0) {
            i = i.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\")
        }
        try {
            i = decodeURIComponent(i.replace(a, " "));
            return b.json ? JSON.parse(i) : i
        } catch (j) {
        }
    }

    function e(j, i) {
        var k = b.raw ? j : c(j);
        return f.isFunction(i) ? i(k) : k
    }
    var b = f.cookie = function (q, p, v) {
        if (p !== undefined && !f.isFunction(p)) {
            v = f.extend({}, b.defaults, v);
            if (typeof v.expires === "number") {
                var r = v.expires,
                        u = v.expires = new Date();
                u.setTime(+u + r * 86400000)
            }
            return (document.cookie = [d(q), "=", h(p), v.expires ? "; expires=" + v.expires.toUTCString() : "", v.path ? "; path=" + v.path : "", v.domain ? "; domain=" + v.domain : "", v.secure ? "; secure" : ""].join(""))
        }
        var w = q ? undefined : {};
        var s = document.cookie ? document.cookie.split("; ") : [];
        for (var o = 0, m = s.length; o < m; o++) {
            var n = s[o].split("=");
            var j = g(n.shift());
            var k = n.join("=");
            if (q && q === j) {
                w = e(k, p);
                break
            }
            if (!q && (k = e(k)) !== undefined) {
                w[j] = k
            }
        }
        return w
    };
    b.defaults = {};
    f.removeCookie = function (j, i) {
        if (f.cookie(j) === undefined) {
            return false
        }
        f.cookie(j, "", f.extend({}, i, {
            expires: -1
        }));
        return !f.cookie(j)
    }
}));
/*! jquery.mousewheel.min.js (http://brandon.aaron.sh)
 * Version: 3.1.11
 */
!function (a) {
    "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? module.exports = a : a(jQuery)
}(function (a) {
    function b(b) {
        var g = b || window.event,
                h = i.call(arguments, 1),
                j = 0,
                l = 0,
                m = 0,
                n = 0,
                o = 0,
                p = 0;
        if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {
            if (1 === g.deltaMode) {
                var q = a.data(this, "mousewheel-line-height");
                j *= q, m *= q, l *= q
            } else if (2 === g.deltaMode) {
                var r = a.data(this, "mousewheel-page-height");
                j *= r, m *= r, l *= r
            }
            if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) {
                var s = this.getBoundingClientRect();
                o = b.clientX - s.left, p = b.clientY - s.top
            }
            return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h)
        }
    }

    function c() {
        f = null
    }

    function d(a, b) {
        return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0
    }
    var e, f, g = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
            h = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
            i = Array.prototype.slice;
    if (a.event.fixHooks)
        for (var j = g.length; j; )
            a.event.fixHooks[g[--j]] = a.event.mouseHooks;
    var k = a.event.special.mousewheel = {
        version: "3.1.11",
        setup: function () {
            if (this.addEventListener)
                for (var c = h.length; c; )
                    this.addEventListener(h[--c], b, !1);
            else
                this.onmousewheel = b;
            a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this))
        },
        teardown: function () {
            if (this.removeEventListener)
                for (var c = h.length; c; )
                    this.removeEventListener(h[--c], b, !1);
            else
                this.onmousewheel = null;
            a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height")
        },
        getLineHeight: function (b) {
            var c = a(b)["offsetParent" in a.fn ? "offsetParent" : "parent"]();
            return c.length || (c = a("body")), parseInt(c.css("fontSize"), 10)
        },
        getPageHeight: function (b) {
            return a(b).height()
        },
        settings: {
            adjustOldDeltas: !0,
            normalizeOffset: !0
        }
    };
    a.fn.extend({
        mousewheel: function (a) {
            return a ? this.bind("mousewheel", a) : this.trigger("mousewheel")
        },
        unmousewheel: function (a) {
            return this.unbind("mousewheel", a)
        }
    })
});
/* jquery.mCustomScrollbar.min == malihu jquery custom scrollbar plugin == Version: 3.0.4, License: MIT License (MIT) */
(function (b, a, c) {
    (function (d) {
        if (typeof define === "function" && define.amd) {
            define(["jquery", "jquery-mousewheel"], d)
        } else {
            d(jQuery)
        }
    }(function (j) {
        var g = "mCustomScrollbar",
                d = "mCS",
                m = ".mCustomScrollbar",
                h = {
                    setWidth: false,
                    setHeight: false,
                    setTop: 0,
                    setLeft: 0,
                    axis: "y",
                    scrollbarPosition: "inside",
                    scrollInertia: 950,
                    autoDraggerLength: true,
                    autoHideScrollbar: false,
                    autoExpandScrollbar: false,
                    alwaysShowScrollbar: 0,
                    snapAmount: null,
                    snapOffset: 0,
                    mouseWheel: {
                        enable: true,
                        scrollAmount: "auto",
                        axis: "y",
                        preventDefault: false,
                        deltaFactor: "auto",
                        normalizeDelta: false,
                        invert: false,
                        disableOver: ["select", "option", "keygen", "datalist", "textarea"]
                    },
                    scrollButtons: {
                        enable: false,
                        scrollType: "stepless",
                        scrollAmount: "auto"
                    },
                    keyboard: {
                        enable: true,
                        scrollType: "stepless",
                        scrollAmount: "auto"
                    },
                    contentTouchScroll: 25,
                    advanced: {
                        autoExpandHorizontalScroll: false,
                        autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
                        updateOnContentResize: true,
                        updateOnImageLoad: true,
                        updateOnSelectorChange: false
                    },
                    theme: "light",
                    callbacks: {
                        onScrollStart: false,
                        onScroll: false,
                        onTotalScroll: false,
                        onTotalScrollBack: false,
                        whileScrolling: false,
                        onTotalScrollOffset: 0,
                        onTotalScrollBackOffset: 0,
                        alwaysTriggerOffsets: true,
                        onOverflowY: false,
                        onOverflowX: false,
                        onOverflowYNone: false,
                        onOverflowXNone: false
                    },
                    live: false,
                    liveSelector: null
                },
        l = 0,
                o = {},
                f = function (p) {
                    if (o[p]) {
                        clearTimeout(o[p]);
                        i._delete.call(null, o[p])
                    }
                },
                k = (b.attachEvent && !b.addEventListener) ? 1 : 0,
                n = false,
                e = {
                    init: function (q) {
                        var q = j.extend(true, {}, h, q),
                                p = i._selector.call(this);
                        if (q.live) {
                            var s = q.liveSelector || this.selector || m,
                                    r = j(s);
                            if (q.live === "off") {
                                f(s);
                                return
                            }
                            o[s] = setTimeout(function () {
                                r.mCustomScrollbar(q);
                                if (q.live === "once" && r.length) {
                                    f(s)
                                }
                            }, 500)
                        } else {
                            f(s)
                        }
                        q.setWidth = (q.set_width) ? q.set_width : q.setWidth;
                        q.setHeight = (q.set_height) ? q.set_height : q.setHeight;
                        q.axis = (q.horizontalScroll) ? "x" : i._findAxis.call(null, q.axis);
                        q.scrollInertia = q.scrollInertia > 0 && q.scrollInertia < 17 ? 17 : q.scrollInertia;
                        if (typeof q.mouseWheel !== "object" && q.mouseWheel == true) {
                            q.mouseWheel = {
                                enable: true,
                                scrollAmount: "auto",
                                axis: "y",
                                preventDefault: false,
                                deltaFactor: "auto",
                                normalizeDelta: false,
                                invert: false
                            }
                        }
                        q.mouseWheel.scrollAmount = !q.mouseWheelPixels ? q.mouseWheel.scrollAmount : q.mouseWheelPixels;
                        q.mouseWheel.normalizeDelta = !q.advanced.normalizeMouseWheelDelta ? q.mouseWheel.normalizeDelta : q.advanced.normalizeMouseWheelDelta;
                        q.scrollButtons.scrollType = i._findScrollButtonsType.call(null, q.scrollButtons.scrollType);
                        i._theme.call(null, q);
                        return j(p).each(function () {
                            var u = j(this);
                            if (!u.data(d)) {
                                u.data(d, {
                                    idx: ++l,
                                    opt: q,
                                    scrollRatio: {
                                        y: null,
                                        x: null
                                    },
                                    overflowed: null,
                                    contentReset: {
                                        y: null,
                                        x: null
                                    },
                                    bindEvents: false,
                                    tweenRunning: false,
                                    sequential: {},
                                    langDir: u.css("direction"),
                                    cbOffsets: null,
                                    trigger: null
                                });
                                var w = u.data(d).opt,
                                        v = u.data("mcs-axis"),
                                        t = u.data("mcs-scrollbar-position"),
                                        x = u.data("mcs-theme");
                                if (v) {
                                    w.axis = v
                                }
                                if (t) {
                                    w.scrollbarPosition = t
                                }
                                if (x) {
                                    w.theme = x;
                                    i._theme.call(null, w)
                                }
                                i._pluginMarkup.call(this);
                                e.update.call(null, u)
                            }
                        })
                    },
                    update: function (q) {
                        var p = q || i._selector.call(this);
                        return j(p).each(function () {
                            var t = j(this);
                            if (t.data(d)) {
                                var v = t.data(d),
                                        u = v.opt,
                                        r = j("#mCSB_" + v.idx + "_container"),
                                        s = [j("#mCSB_" + v.idx + "_dragger_vertical"), j("#mCSB_" + v.idx + "_dragger_horizontal")];
                                if (!r.length) {
                                    return
                                }
                                if (v.tweenRunning) {
                                    i._stop.call(null, t)
                                }
                                if (t.hasClass("mCS_disabled")) {
                                    t.removeClass("mCS_disabled")
                                }
                                if (t.hasClass("mCS_destroyed")) {
                                    t.removeClass("mCS_destroyed")
                                }
                                i._maxHeight.call(this);
                                i._expandContentHorizontally.call(this);
                                if (u.axis !== "y" && !u.advanced.autoExpandHorizontalScroll) {
                                    r.css("width", i._contentWidth(r.children()))
                                }
                                v.overflowed = i._overflowed.call(this);
                                i._scrollbarVisibility.call(this);
                                if (u.autoDraggerLength) {
                                    i._setDraggerLength.call(this)
                                }
                                i._scrollRatio.call(this);
                                i._bindEvents.call(this);
                                var w = [Math.abs(r[0].offsetTop), Math.abs(r[0].offsetLeft)];
                                if (u.axis !== "x") {
                                    if (!v.overflowed[0]) {
                                        i._resetContentPosition.call(this);
                                        if (u.axis === "y") {
                                            i._unbindEvents.call(this)
                                        } else {
                                            if (u.axis === "yx" && v.overflowed[1]) {
                                                i._scrollTo.call(this, t, w[1].toString(), {
                                                    dir: "x",
                                                    dur: 0,
                                                    overwrite: "none"
                                                })
                                            }
                                        }
                                    } else {
                                        if (s[0].height() > s[0].parent().height()) {
                                            i._resetContentPosition.call(this)
                                        } else {
                                            i._scrollTo.call(this, t, w[0].toString(), {
                                                dir: "y",
                                                dur: 0,
                                                overwrite: "none"
                                            });
                                            v.contentReset.y = null
                                        }
                                    }
                                }
                                if (u.axis !== "y") {
                                    if (!v.overflowed[1]) {
                                        i._resetContentPosition.call(this);
                                        if (u.axis === "x") {
                                            i._unbindEvents.call(this)
                                        } else {
                                            if (u.axis === "yx" && v.overflowed[0]) {
                                                i._scrollTo.call(this, t, w[0].toString(), {
                                                    dir: "y",
                                                    dur: 0,
                                                    overwrite: "none"
                                                })
                                            }
                                        }
                                    } else {
                                        if (s[1].width() > s[1].parent().width()) {
                                            i._resetContentPosition.call(this)
                                        } else {
                                            i._scrollTo.call(this, t, w[1].toString(), {
                                                dir: "x",
                                                dur: 0,
                                                overwrite: "none"
                                            });
                                            v.contentReset.x = null
                                        }
                                    }
                                }
                                i._autoUpdate.call(this)
                            }
                        })
                    },
                    scrollTo: function (r, q) {
                        if (typeof r == "undefined" || r == null) {
                            return
                        }
                        var p = i._selector.call(this);
                        return j(p).each(function () {
                            var u = j(this);
                            if (u.data(d)) {
                                var x = u.data(d),
                                        w = x.opt,
                                        v = {
                                            trigger: "external",
                                            scrollInertia: w.scrollInertia,
                                            scrollEasing: "mcsEaseInOut",
                                            moveDragger: false,
                                            timeout: 60,
                                            callbacks: true,
                                            onStart: true,
                                            onUpdate: true,
                                            onComplete: true
                                        },
                                s = j.extend(true, {}, v, q),
                                        y = i._arr.call(this, r),
                                        t = s.scrollInertia > 0 && s.scrollInertia < 17 ? 17 : s.scrollInertia;
                                y[0] = i._to.call(this, y[0], "y");
                                y[1] = i._to.call(this, y[1], "x");
                                if (s.moveDragger) {
                                    y[0] *= x.scrollRatio.y;
                                    y[1] *= x.scrollRatio.x
                                }
                                s.dur = t;
                                setTimeout(function () {
                                    if (y[0] !== null && typeof y[0] !== "undefined" && w.axis !== "x" && x.overflowed[0]) {
                                        s.dir = "y";
                                        s.overwrite = "all";
                                        i._scrollTo.call(this, u, y[0].toString(), s)
                                    }
                                    if (y[1] !== null && typeof y[1] !== "undefined" && w.axis !== "y" && x.overflowed[1]) {
                                        s.dir = "x";
                                        s.overwrite = "none";
                                        i._scrollTo.call(this, u, y[1].toString(), s)
                                    }
                                }, s.timeout)
                            }
                        })
                    },
                    stop: function () {
                        var p = i._selector.call(this);
                        return j(p).each(function () {
                            var q = j(this);
                            if (q.data(d)) {
                                i._stop.call(null, q)
                            }
                        })
                    },
                    disable: function (q) {
                        var p = i._selector.call(this);
                        return j(p).each(function () {
                            var r = j(this);
                            if (r.data(d)) {
                                var t = r.data(d),
                                        s = t.opt;
                                i._autoUpdate.call(this, "remove");
                                i._unbindEvents.call(this);
                                if (q) {
                                    i._resetContentPosition.call(this)
                                }
                                i._scrollbarVisibility.call(this, true);
                                r.addClass("mCS_disabled")
                            }
                        })
                    },
                    destroy: function () {
                        var p = i._selector.call(this);
                        return j(p).each(function () {
                            var s = j(this);
                            if (s.data(d)) {
                                var u = s.data(d),
                                        t = u.opt,
                                        q = j("#mCSB_" + u.idx),
                                        r = j("#mCSB_" + u.idx + "_container"),
                                        v = j(".mCSB_" + u.idx + "_scrollbar");
                                if (t.live) {
                                    f(p)
                                }
                                i._autoUpdate.call(this, "remove");
                                i._unbindEvents.call(this);
                                i._resetContentPosition.call(this);
                                s.removeData(d);
                                i._delete.call(null, this.mcs);
                                v.remove();
                                q.replaceWith(r.contents());
                                s.removeClass(g + " _" + d + "_" + u.idx + " mCS-autoHide mCS-dir-rtl mCS_no_scrollbar mCS_disabled").addClass("mCS_destroyed")
                            }
                        })
                    }
                },
        i = {
            _selector: function () {
                return (typeof j(this) !== "object" || j(this).length < 1) ? m : this
            },
            _theme: function (s) {
                var r = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"],
                        q = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"],
                        p = ["minimal", "minimal-dark"],
                        u = ["minimal", "minimal-dark"],
                        t = ["minimal", "minimal-dark"];
                s.autoDraggerLength = j.inArray(s.theme, r) > -1 ? false : s.autoDraggerLength;
                s.autoExpandScrollbar = j.inArray(s.theme, q) > -1 ? false : s.autoExpandScrollbar;
                s.scrollButtons.enable = j.inArray(s.theme, p) > -1 ? false : s.scrollButtons.enable;
                s.autoHideScrollbar = j.inArray(s.theme, u) > -1 ? true : s.autoHideScrollbar;
                s.scrollbarPosition = j.inArray(s.theme, t) > -1 ? "outside" : s.scrollbarPosition
            },
            _findAxis: function (p) {
                return (p === "yx" || p === "xy" || p === "auto") ? "yx" : (p === "x" || p === "horizontal") ? "x" : "y"
            },
            _findScrollButtonsType: function (p) {
                return (p === "stepped" || p === "pixels" || p === "step" || p === "click") ? "stepped" : "stepless"
            },
            _pluginMarkup: function () {
                var y = j(this),
                        x = y.data(d),
                        r = x.opt,
                        t = r.autoExpandScrollbar ? " mCSB_scrollTools_onDrag_expand" : "",
                        B = ["<div id='mCSB_" + x.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + x.idx + "_scrollbar mCS-" + r.theme + " mCSB_scrollTools_vertical" + t + "'><div class='mCSB_draggerContainer'><div id='mCSB_" + x.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + x.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + x.idx + "_scrollbar mCS-" + r.theme + " mCSB_scrollTools_horizontal" + t + "'><div class='mCSB_draggerContainer'><div id='mCSB_" + x.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
                        u = r.axis === "yx" ? "mCSB_vertical_horizontal" : r.axis === "x" ? "mCSB_horizontal" : "mCSB_vertical",
                        w = r.axis === "yx" ? B[0] + B[1] : r.axis === "x" ? B[1] : B[0],
                        v = r.axis === "yx" ? "<div id='mCSB_" + x.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "",
                        s = r.autoHideScrollbar ? " mCS-autoHide" : "",
                        p = (r.axis !== "x" && x.langDir === "rtl") ? " mCS-dir-rtl" : "";
                if (r.setWidth) {
                    y.css("width", r.setWidth)
                }
                if (r.setHeight) {
                    y.css("height", r.setHeight)
                }
                r.setLeft = (r.axis !== "y" && x.langDir === "rtl") ? "989999px" : r.setLeft;
                y.addClass(g + " _" + d + "_" + x.idx + s + p).wrapInner("<div id='mCSB_" + x.idx + "' class='mCustomScrollBox mCS-" + r.theme + " " + u + "'><div id='mCSB_" + x.idx + "_container' class='mCSB_container' style='position:relative; top:" + r.setTop + "; left:" + r.setLeft + ";' dir=" + x.langDir + " /></div>");
                var q = j("#mCSB_" + x.idx),
                        z = j("#mCSB_" + x.idx + "_container");
                if (r.axis !== "y" && !r.advanced.autoExpandHorizontalScroll) {
                    z.css("width", i._contentWidth(z.children()))
                }
                if (r.scrollbarPosition === "outside") {
                    if (y.css("position") === "static") {
                        y.css("position", "relative")
                    }
                    y.css("overflow", "visible");
                    q.addClass("mCSB_outside").after(w)
                } else {
                    q.addClass("mCSB_inside").append(w);
                    z.wrap(v)
                }
                i._scrollButtons.call(this);
                var A = [j("#mCSB_" + x.idx + "_dragger_vertical"), j("#mCSB_" + x.idx + "_dragger_horizontal")];
                A[0].css("min-height", A[0].height());
                A[1].css("min-width", A[1].width())
            },
            _contentWidth: function (p) {
                return Math.max.apply(Math, p.map(function () {
                    return j(this).outerWidth(true)
                }).get())
            },
            _expandContentHorizontally: function () {
                var q = j(this),
                        s = q.data(d),
                        r = s.opt,
                        p = j("#mCSB_" + s.idx + "_container");
                if (r.advanced.autoExpandHorizontalScroll && r.axis !== "y") {
                    p.css({
                        position: "absolute",
                        width: "auto"
                    }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({
                        width: (Math.ceil(p[0].getBoundingClientRect().right + 0.4) - Math.floor(p[0].getBoundingClientRect().left)),
                        position: "relative"
                    }).unwrap()
                }
            },
            _scrollButtons: function () {
                var s = j(this),
                        u = s.data(d),
                        t = u.opt,
                        q = j(".mCSB_" + u.idx + "_scrollbar:first"),
                        r = ["<a href='#' class='mCSB_buttonUp' oncontextmenu='return false;' />", "<a href='#' class='mCSB_buttonDown' oncontextmenu='return false;' />", "<a href='#' class='mCSB_buttonLeft' oncontextmenu='return false;' />", "<a href='#' class='mCSB_buttonRight' oncontextmenu='return false;' />"],
                        p = [(t.axis === "x" ? r[2] : r[0]), (t.axis === "x" ? r[3] : r[1]), r[2], r[3]];
                if (t.scrollButtons.enable) {
                    q.prepend(p[0]).append(p[1]).next(".mCSB_scrollTools").prepend(p[2]).append(p[3])
                }
            },
            _maxHeight: function () {
                var t = j(this),
                        w = t.data(d),
                        v = w.opt,
                        r = j("#mCSB_" + w.idx),
                        q = t.css("max-height"),
                        s = q.indexOf("%") !== -1,
                        p = t.css("box-sizing");
                if (q !== "none") {
                    var u = s ? t.parent().height() * parseInt(q) / 100 : parseInt(q);
                    if (p === "border-box") {
                        u -= ((t.innerHeight() - t.height()) + (t.outerHeight() - t.innerHeight()))
                    }
                    r.css("max-height", Math.round(u))
                }
            },
            _setDraggerLength: function () {
                var u = j(this),
                        s = u.data(d),
                        p = j("#mCSB_" + s.idx),
                        v = j("#mCSB_" + s.idx + "_container"),
                        y = [j("#mCSB_" + s.idx + "_dragger_vertical"), j("#mCSB_" + s.idx + "_dragger_horizontal")],
                        t = [p.height() / v.outerHeight(false), p.width() / v.outerWidth(false)],
                        q = [parseInt(y[0].css("min-height")), Math.round(t[0] * y[0].parent().height()), parseInt(y[1].css("min-width")), Math.round(t[1] * y[1].parent().width())],
                        r = k && (q[1] < q[0]) ? q[0] : q[1],
                        x = k && (q[3] < q[2]) ? q[2] : q[3];
                y[0].css({
                    height: r,
                    "max-height": (y[0].parent().height() - 10)
                }).find(".mCSB_dragger_bar").css({
                    "line-height": q[0] + "px"
                });
                y[1].css({
                    width: x,
                    "max-width": (y[1].parent().width() - 10)
                })
            },
            _scrollRatio: function () {
                var t = j(this),
                        v = t.data(d),
                        q = j("#mCSB_" + v.idx),
                        r = j("#mCSB_" + v.idx + "_container"),
                        s = [j("#mCSB_" + v.idx + "_dragger_vertical"), j("#mCSB_" + v.idx + "_dragger_horizontal")],
                        u = [r.outerHeight(false) - q.height(), r.outerWidth(false) - q.width()],
                        p = [u[0] / (s[0].parent().height() - s[0].height()), u[1] / (s[1].parent().width() - s[1].width())];
                v.scrollRatio = {
                    y: p[0],
                    x: p[1]
                }
            },
            _onDragClasses: function (r, t, q) {
                var s = q ? "mCSB_dragger_onDrag_expanded" : "",
                        p = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag"],
                        u = r.closest(".mCSB_scrollTools");
                if (t === "active") {
                    r.toggleClass(p[0] + " " + s);
                    u.toggleClass(p[1]);
                    r[0]._draggable = r[0]._draggable ? 0 : 1
                } else {
                    if (!r[0]._draggable) {
                        if (t === "hide") {
                            r.removeClass(p[0]);
                            u.removeClass(p[1])
                        } else {
                            r.addClass(p[0]);
                            u.addClass(p[1])
                        }
                    }
                }
            },
            _overflowed: function () {
                var t = j(this),
                        u = t.data(d),
                        q = j("#mCSB_" + u.idx),
                        s = j("#mCSB_" + u.idx + "_container"),
                        r = u.overflowed == null ? s.height() : s.outerHeight(false),
                        p = u.overflowed == null ? s.width() : s.outerWidth(false);
                return [r > q.height(), p > q.width()]
            },
            _resetContentPosition: function () {
                var t = j(this),
                        v = t.data(d),
                        u = v.opt,
                        q = j("#mCSB_" + v.idx),
                        r = j("#mCSB_" + v.idx + "_container"),
                        s = [j("#mCSB_" + v.idx + "_dragger_vertical"), j("#mCSB_" + v.idx + "_dragger_horizontal")];
                i._stop(t);
                if ((u.axis !== "x" && !v.overflowed[0]) || (u.axis === "y" && v.overflowed[0])) {
                    s[0].add(r).css("top", 0);
                    i._scrollTo(t, "_resetY")
                }
                if ((u.axis !== "y" && !v.overflowed[1]) || (u.axis === "x" && v.overflowed[1])) {
                    var p = dx = 0;
                    if (v.langDir === "rtl") {
                        p = q.width() - r.outerWidth(false);
                        dx = Math.abs(p / v.scrollRatio.x)
                    }
                    r.css("left", p);
                    s[1].css("left", dx);
                    i._scrollTo(t, "_resetX")
                }
            },
            _bindEvents: function () {
                var r = j(this),
                        t = r.data(d),
                        s = t.opt;
                if (!t.bindEvents) {
                    i._draggable.call(this);
                    if (s.contentTouchScroll) {
                        i._contentDraggable.call(this)
                    }
                    if (s.mouseWheel.enable) {
                        function q() {
                            p = setTimeout(function () {
                                if (!j.event.special.mousewheel) {
                                    q()
                                } else {
                                    clearTimeout(p);
                                    i._mousewheel.call(r[0])
                                }
                            }, 1000)
                        }
                        var p;
                        q()
                    }
                    i._draggerRail.call(this);
                    i._wrapperScroll.call(this);
                    if (s.advanced.autoScrollOnFocus) {
                        i._focus.call(this)
                    }
                    if (s.scrollButtons.enable) {
                        i._buttons.call(this)
                    }
                    if (s.keyboard.enable) {
                        i._keyboard.call(this)
                    }
                    t.bindEvents = true
                }
            },
            _unbindEvents: function () {
                var s = j(this),
                        t = s.data(d),
                        p = d + "_" + t.idx,
                        u = ".mCSB_" + t.idx + "_scrollbar",
                        r = j("#mCSB_" + t.idx + ",#mCSB_" + t.idx + "_container,#mCSB_" + t.idx + "_container_wrapper," + u + " .mCSB_draggerContainer,#mCSB_" + t.idx + "_dragger_vertical,#mCSB_" + t.idx + "_dragger_horizontal," + u + ">a"),
                        q = j("#mCSB_" + t.idx + "_container");
                if (t.bindEvents) {
                    j(a).unbind("." + p);
                    r.each(function () {
                        j(this).unbind("." + p)
                    });
                    clearTimeout(s[0]._focusTimeout);
                    i._delete.call(null, s[0]._focusTimeout);
                    clearTimeout(t.sequential.step);
                    i._delete.call(null, t.sequential.step);
                    clearTimeout(q[0].onCompleteTimeout);
                    i._delete.call(null, q[0].onCompleteTimeout);
                    t.bindEvents = false
                }
            },
            _scrollbarVisibility: function (q) {
                var t = j(this),
                        v = t.data(d),
                        u = v.opt,
                        p = j("#mCSB_" + v.idx + "_container_wrapper"),
                        r = p.length ? p : j("#mCSB_" + v.idx + "_container"),
                        w = [j("#mCSB_" + v.idx + "_scrollbar_vertical"), j("#mCSB_" + v.idx + "_scrollbar_horizontal")],
                        s = [w[0].find(".mCSB_dragger"), w[1].find(".mCSB_dragger")];
                if (u.axis !== "x") {
                    if (v.overflowed[0] && !q) {
                        w[0].add(s[0]).add(w[0].children("a")).css("display", "block");
                        r.removeClass("mCS_no_scrollbar_y mCS_y_hidden")
                    } else {
                        if (u.alwaysShowScrollbar) {
                            if (u.alwaysShowScrollbar !== 2) {
                                s[0].add(w[0].children("a")).css("display", "none")
                            }
                            r.removeClass("mCS_y_hidden")
                        } else {
                            w[0].css("display", "none");
                            r.addClass("mCS_y_hidden")
                        }
                        r.addClass("mCS_no_scrollbar_y")
                    }
                }
                if (u.axis !== "y") {
                    if (v.overflowed[1] && !q) {
                        w[1].add(s[1]).add(w[1].children("a")).css("display", "block");
                        r.removeClass("mCS_no_scrollbar_x mCS_x_hidden")
                    } else {
                        if (u.alwaysShowScrollbar) {
                            if (u.alwaysShowScrollbar !== 2) {
                                s[1].add(w[1].children("a")).css("display", "none")
                            }
                            r.removeClass("mCS_x_hidden")
                        } else {
                            w[1].css("display", "none");
                            r.addClass("mCS_x_hidden")
                        }
                        r.addClass("mCS_no_scrollbar_x")
                    }
                }
                if (!v.overflowed[0] && !v.overflowed[1]) {
                    t.addClass("mCS_no_scrollbar")
                } else {
                    t.removeClass("mCS_no_scrollbar")
                }
            },
            _coordinates: function (q) {
                var p = q.type;
                switch (p) {
                    case "pointerdown":
                    case "MSPointerDown":
                    case "pointermove":
                    case "MSPointerMove":
                    case "pointerup":
                    case "MSPointerUp":
                        return [q.originalEvent.pageY, q.originalEvent.pageX];
                        break;
                    case "touchstart":
                    case "touchmove":
                    case "touchend":
                        var r = q.originalEvent.touches[0] || q.originalEvent.changedTouches[0];
                        return [r.pageY, r.pageX];
                        break;
                    default:
                        return [q.pageY, q.pageX]
                }
            },
            _draggable: function () {
                var u = j(this),
                        s = u.data(d),
                        p = s.opt,
                        r = d + "_" + s.idx,
                        t = ["mCSB_" + s.idx + "_dragger_vertical", "mCSB_" + s.idx + "_dragger_horizontal"],
                        v = j("#mCSB_" + s.idx + "_container"),
                        w = j("#" + t[0] + ",#" + t[1]),
                        A, y, z;
                w.bind("mousedown." + r + " touchstart." + r + " pointerdown." + r + " MSPointerDown." + r, function (E) {
                    E.stopImmediatePropagation();
                    E.preventDefault();
                    if (!i._mouseBtnLeft(E)) {
                        return
                    }
                    n = true;
                    if (k) {
                        a.onselectstart = function () {
                            return false
                        }
                    }
                    x(false);
                    i._stop(u);
                    A = j(this);
                    var F = A.offset(),
                            G = i._coordinates(E)[0] - F.top,
                            B = i._coordinates(E)[1] - F.left,
                            D = A.height() + F.top,
                            C = A.width() + F.left;
                    if (G < D && G > 0 && B < C && B > 0) {
                        y = G;
                        z = B
                    }
                    i._onDragClasses(A, "active", p.autoExpandScrollbar)
                }).bind("touchmove." + r, function (C) {
                    C.stopImmediatePropagation();
                    C.preventDefault();
                    var D = A.offset(),
                            E = i._coordinates(C)[0] - D.top,
                            B = i._coordinates(C)[1] - D.left;
                    q(y, z, E, B)
                });
                j(a).bind("mousemove." + r + " pointermove." + r + " MSPointerMove." + r, function (C) {
                    if (A) {
                        var D = A.offset(),
                                E = i._coordinates(C)[0] - D.top,
                                B = i._coordinates(C)[1] - D.left;
                        if (y === E) {
                            return
                        }
                        q(y, z, E, B)
                    }
                }).add(w).bind("mouseup." + r + " touchend." + r + " pointerup." + r + " MSPointerUp." + r, function (B) {
                    if (A) {
                        i._onDragClasses(A, "active", p.autoExpandScrollbar);
                        A = null
                    }
                    n = false;
                    if (k) {
                        a.onselectstart = null
                    }
                    x(true)
                });

                function x(B) {
                    var C = v.find("iframe");
                    if (!C.length) {
                        return
                    }
                    var D = !B ? "none" : "auto";
                    C.css("pointer-events", D)
                }

                function q(D, E, G, B) {
                    v[0].idleTimer = p.scrollInertia < 233 ? 250 : 0;
                    if (A.attr("id") === t[1]) {
                        var C = "x",
                                F = ((A[0].offsetLeft - E) + B) * s.scrollRatio.x
                    } else {
                        var C = "y",
                                F = ((A[0].offsetTop - D) + G) * s.scrollRatio.y
                    }
                    i._scrollTo(u, F.toString(), {
                        dir: C,
                        drag: true
                    })
                }
            },
            _contentDraggable: function () {
                var y = j(this),
                        K = y.data(d),
                        I = K.opt,
                        F = d + "_" + K.idx,
                        v = j("#mCSB_" + K.idx),
                        z = j("#mCSB_" + K.idx + "_container"),
                        w = [j("#mCSB_" + K.idx + "_dragger_vertical"), j("#mCSB_" + K.idx + "_dragger_horizontal")],
                        E, G, L, M, C = [],
                        D = [],
                        H, A, u, t, J, x, r = 0,
                        q, s = I.axis === "yx" ? "none" : "all";
                z.bind("touchstart." + F + " pointerdown." + F + " MSPointerDown." + F, function (N) {
                    if (!i._pointerTouch(N) || n) {
                        return
                    }
                    var O = z.offset();
                    E = i._coordinates(N)[0] - O.top;
                    G = i._coordinates(N)[1] - O.left
                }).bind("touchmove." + F + " pointermove." + F + " MSPointerMove." + F, function (Q) {
                    if (!i._pointerTouch(Q) || n) {
                        return
                    }
                    Q.stopImmediatePropagation();
                    A = i._getTime();
                    var P = v.offset(),
                            S = i._coordinates(Q)[0] - P.top,
                            U = i._coordinates(Q)[1] - P.left,
                            R = "mcsLinearOut";
                    C.push(S);
                    D.push(U);
                    if (K.overflowed[0]) {
                        var O = w[0].parent().height() - w[0].height(),
                                T = ((E - S) > 0 && (S - E) > -(O * K.scrollRatio.y))
                    }
                    if (K.overflowed[1]) {
                        var N = w[1].parent().width() - w[1].width(),
                                V = ((G - U) > 0 && (U - G) > -(N * K.scrollRatio.x))
                    }
                    if (T || V) {
                        Q.preventDefault()
                    }
                    x = I.axis === "yx" ? [(E - S), (G - U)] : I.axis === "x" ? [null, (G - U)] : [(E - S), null];
                    z[0].idleTimer = 250;
                    if (K.overflowed[0]) {
                        B(x[0], r, R, "y", "all", true)
                    }
                    if (K.overflowed[1]) {
                        B(x[1], r, R, "x", s, true)
                    }
                });
                v.bind("touchstart." + F + " pointerdown." + F + " MSPointerDown." + F, function (N) {
                    if (!i._pointerTouch(N) || n) {
                        return
                    }
                    N.stopImmediatePropagation();
                    i._stop(y);
                    H = i._getTime();
                    var O = v.offset();
                    L = i._coordinates(N)[0] - O.top;
                    M = i._coordinates(N)[1] - O.left;
                    C = [];
                    D = []
                }).bind("touchend." + F + " pointerup." + F + " MSPointerUp." + F, function (P) {
                    if (!i._pointerTouch(P) || n) {
                        return
                    }
                    P.stopImmediatePropagation();
                    u = i._getTime();
                    var N = v.offset(),
                            T = i._coordinates(P)[0] - N.top,
                            V = i._coordinates(P)[1] - N.left;
                    if ((u - A) > 30) {
                        return
                    }
                    J = 1000 / (u - H);
                    var Q = "mcsEaseOut",
                            R = J < 2.5,
                            W = R ? [C[C.length - 2], D[D.length - 2]] : [0, 0];
                    t = R ? [(T - W[0]), (V - W[1])] : [T - L, V - M];
                    var O = [Math.abs(t[0]), Math.abs(t[1])];
                    J = R ? [Math.abs(t[0] / 4), Math.abs(t[1] / 4)] : [J, J];
                    var U = [Math.abs(z[0].offsetTop) - (t[0] * p((O[0] / J[0]), J[0])), Math.abs(z[0].offsetLeft) - (t[1] * p((O[1] / J[1]), J[1]))];
                    x = I.axis === "yx" ? [U[0], U[1]] : I.axis === "x" ? [null, U[1]] : [U[0], null];
                    q = [(O[0] * 4) + I.scrollInertia, (O[1] * 4) + I.scrollInertia];
                    var S = parseInt(I.contentTouchScroll) || 0;
                    x[0] = O[0] > S ? x[0] : 0;
                    x[1] = O[1] > S ? x[1] : 0;
                    if (K.overflowed[0]) {
                        B(x[0], q[0], Q, "y", s, false)
                    }
                    if (K.overflowed[1]) {
                        B(x[1], q[1], Q, "x", s, false)
                    }
                });

                function p(P, N) {
                    var O = [N * 1.5, N * 2, N / 1.5, N / 2];
                    if (P > 90) {
                        return N > 4 ? O[0] : O[3]
                    } else {
                        if (P > 60) {
                            return N > 3 ? O[3] : O[2]
                        } else {
                            if (P > 30) {
                                return N > 8 ? O[1] : N > 6 ? O[0] : N > 4 ? N : O[2]
                            } else {
                                return N > 8 ? N : O[3]
                            }
                        }
                    }
                }

                function B(P, R, S, O, N, Q) {
                    if (!P) {
                        return
                    }
                    i._scrollTo(y, P.toString(), {
                        dur: R,
                        scrollEasing: S,
                        dir: O,
                        overwrite: N,
                        drag: Q
                    })
                }
            },
            _mousewheel: function () {
                var w = j(this),
                        v = w.data(d);
                if (v) {
                    var p = v.opt,
                            s = d + "_" + v.idx,
                            q = j("#mCSB_" + v.idx),
                            x = [j("#mCSB_" + v.idx + "_dragger_vertical"), j("#mCSB_" + v.idx + "_dragger_horizontal")],
                            t = j("#mCSB_" + v.idx + "_container").find("iframe"),
                            r = q;
                    if (t.length) {
                        t.each(function () {
                            var y = this;
                            if (u(y)) {
                                r = r.add(j(y).contents().find("body"))
                            }
                        })
                    }
                    r.bind("mousewheel." + s, function (C, G) {
                        i._stop(w);
                        if (i._disableMousewheel(w, C.target)) {
                            return
                        }
                        var E = p.mouseWheel.deltaFactor !== "auto" ? parseInt(p.mouseWheel.deltaFactor) : (k && C.deltaFactor < 100) ? 100 : C.deltaFactor || 100;
                        if (p.axis === "x" || p.mouseWheel.axis === "x") {
                            var z = "x",
                                    F = [Math.round(E * v.scrollRatio.x), parseInt(p.mouseWheel.scrollAmount)],
                                    B = p.mouseWheel.scrollAmount !== "auto" ? F[1] : F[0] >= q.width() ? q.width() * 0.9 : F[0],
                                    H = Math.abs(j("#mCSB_" + v.idx + "_container")[0].offsetLeft),
                                    D = x[1][0].offsetLeft,
                                    A = x[1].parent().width() - x[1].width(),
                                    y = C.deltaX || C.deltaY || G
                        } else {
                            var z = "y",
                                    F = [Math.round(E * v.scrollRatio.y), parseInt(p.mouseWheel.scrollAmount)],
                                    B = p.mouseWheel.scrollAmount !== "auto" ? F[1] : F[0] >= q.height() ? q.height() * 0.9 : F[0],
                                    H = Math.abs(j("#mCSB_" + v.idx + "_container")[0].offsetTop),
                                    D = x[0][0].offsetTop,
                                    A = x[0].parent().height() - x[0].height(),
                                    y = C.deltaY || G
                        }
                        if ((z === "y" && !v.overflowed[0]) || (z === "x" && !v.overflowed[1])) {
                            return
                        }
                        if (p.mouseWheel.invert) {
                            y = -y
                        }
                        if (p.mouseWheel.normalizeDelta) {
                            y = y < 0 ? -1 : 1
                        }
                        if ((y > 0 && D !== 0) || (y < 0 && D !== A) || p.mouseWheel.preventDefault) {
                            C.stopImmediatePropagation();
                            C.preventDefault()
                        }
                        i._scrollTo(w, (H - (y * B)).toString(), {
                            dir: z
                        })
                    })
                }

                function u(z) {
                    var y = null;
                    try {
                        var B = z.contentDocument || z.contentWindow.document;
                        y = B.body.innerHTML
                    } catch (A) {
                    }
                    return (y !== null)
                }
            },
            _disableMousewheel: function (r, t) {
                var p = t.nodeName.toLowerCase(),
                        q = r.data(d).opt.mouseWheel.disableOver,
                        s = ["select", "textarea"];
                return j.inArray(p, q) > -1 && !(j.inArray(p, s) > -1 && !j(t).is(":focus"))
            },
            _draggerRail: function () {
                var s = j(this),
                        t = s.data(d),
                        q = d + "_" + t.idx,
                        r = j("#mCSB_" + t.idx + "_container"),
                        u = r.parent(),
                        p = j(".mCSB_" + t.idx + "_scrollbar .mCSB_draggerContainer");
                p.bind("touchstart." + q + " pointerdown." + q + " MSPointerDown." + q, function (v) {
                    n = true
                }).bind("touchend." + q + " pointerup." + q + " MSPointerUp." + q, function (v) {
                    n = false
                }).bind("click." + q, function (z) {
                    if (j(z.target).hasClass("mCSB_draggerContainer") || j(z.target).hasClass("mCSB_draggerRail")) {
                        i._stop(s);
                        var w = j(this),
                                y = w.find(".mCSB_dragger");
                        if (w.parent(".mCSB_scrollTools_horizontal").length > 0) {
                            if (!t.overflowed[1]) {
                                return
                            }
                            var v = "x",
                                    x = z.pageX > y.offset().left ? -1 : 1,
                                    A = Math.abs(r[0].offsetLeft) - (x * (u.width() * 0.9))
                        } else {
                            if (!t.overflowed[0]) {
                                return
                            }
                            var v = "y",
                                    x = z.pageY > y.offset().top ? -1 : 1,
                                    A = Math.abs(r[0].offsetTop) - (x * (u.height() * 0.9))
                        }
                        i._scrollTo(s, A.toString(), {
                            dir: v,
                            scrollEasing: "mcsEaseInOut"
                        })
                    }
                })
            },
            _focus: function () {
                var r = j(this),
                        t = r.data(d),
                        s = t.opt,
                        p = d + "_" + t.idx,
                        q = j("#mCSB_" + t.idx + "_container"),
                        u = q.parent();
                q.bind("focusin." + p, function (x) {
                    var w = j(a.activeElement),
                            y = q.find(".mCustomScrollBox").length,
                            v = 0;
                    if (!w.is(s.advanced.autoScrollOnFocus)) {
                        return
                    }
                    i._stop(r);
                    clearTimeout(r[0]._focusTimeout);
                    r[0]._focusTimer = y ? (v + 17) * y : 0;
                    r[0]._focusTimeout = setTimeout(function () {
                        var C = [w.offset().top - q.offset().top, w.offset().left - q.offset().left],
                                B = [q[0].offsetTop, q[0].offsetLeft],
                                z = [(B[0] + C[0] >= 0 && B[0] + C[0] < u.height() - w.outerHeight(false)), (B[1] + C[1] >= 0 && B[0] + C[1] < u.width() - w.outerWidth(false))],
                                A = (s.axis === "yx" && !z[0] && !z[1]) ? "none" : "all";
                        if (s.axis !== "x" && !z[0]) {
                            i._scrollTo(r, C[0].toString(), {
                                dir: "y",
                                scrollEasing: "mcsEaseInOut",
                                overwrite: A,
                                dur: v
                            })
                        }
                        if (s.axis !== "y" && !z[1]) {
                            i._scrollTo(r, C[1].toString(), {
                                dir: "x",
                                scrollEasing: "mcsEaseInOut",
                                overwrite: A,
                                dur: v
                            })
                        }
                    }, r[0]._focusTimer)
                })
            },
            _wrapperScroll: function () {
                var q = j(this),
                        r = q.data(d),
                        p = d + "_" + r.idx,
                        s = j("#mCSB_" + r.idx + "_container").parent();
                s.bind("scroll." + p, function (t) {
                    s.scrollTop(0).scrollLeft(0)
                })
            },
            _buttons: function () {
                var u = j(this),
                        w = u.data(d),
                        v = w.opt,
                        p = w.sequential,
                        r = d + "_" + w.idx,
                        t = j("#mCSB_" + w.idx + "_container"),
                        s = ".mCSB_" + w.idx + "_scrollbar",
                        q = j(s + ">a");
                q.bind("mousedown." + r + " touchstart." + r + " pointerdown." + r + " MSPointerDown." + r + " mouseup." + r + " touchend." + r + " pointerup." + r + " MSPointerUp." + r + " mouseout." + r + " pointerout." + r + " MSPointerOut." + r + " click." + r, function (z) {
                    z.preventDefault();
                    if (!i._mouseBtnLeft(z)) {
                        return
                    }
                    var y = j(this).attr("class");
                    p.type = v.scrollButtons.scrollType;
                    switch (z.type) {
                        case "mousedown":
                        case "touchstart":
                        case "pointerdown":
                        case "MSPointerDown":
                            if (p.type === "stepped") {
                                return
                            }
                            n = true;
                            w.tweenRunning = false;
                            x("on", y);
                            break;
                        case "mouseup":
                        case "touchend":
                        case "pointerup":
                        case "MSPointerUp":
                        case "mouseout":
                        case "pointerout":
                        case "MSPointerOut":
                            if (p.type === "stepped") {
                                return
                            }
                            n = false;
                            if (p.dir) {
                                x("off", y)
                            }
                            break;
                        case "click":
                            if (p.type !== "stepped" || w.tweenRunning) {
                                return
                            }
                            x("on", y);
                            break
                    }

                    function x(A, B) {
                        p.scrollAmount = v.snapAmount || v.scrollButtons.scrollAmount;
                        i._sequentialScroll.call(this, u, A, B)
                    }
                })
            },
            _keyboard: function () {
                var u = j(this),
                        t = u.data(d),
                        q = t.opt,
                        x = t.sequential,
                        s = d + "_" + t.idx,
                        r = j("#mCSB_" + t.idx),
                        w = j("#mCSB_" + t.idx + "_container"),
                        p = w.parent(),
                        v = "input,textarea,select,datalist,keygen,[contenteditable='true']";
                r.attr("tabindex", "0").bind("blur." + s + " keydown." + s + " keyup." + s, function (D) {
                    switch (D.type) {
                        case "blur":
                            if (t.tweenRunning && x.dir) {
                                y("off", null)
                            }
                            break;
                        case "keydown":
                        case "keyup":
                            var A = D.keyCode ? D.keyCode : D.which,
                                    B = "on";
                            if ((q.axis !== "x" && (A === 38 || A === 40)) || (q.axis !== "y" && (A === 37 || A === 39))) {
                                if (((A === 38 || A === 40) && !t.overflowed[0]) || ((A === 37 || A === 39) && !t.overflowed[1])) {
                                    return
                                }
                                if (D.type === "keyup") {
                                    B = "off"
                                }
                                if (!j(a.activeElement).is(v)) {
                                    D.preventDefault();
                                    D.stopImmediatePropagation();
                                    y(B, A)
                                }
                            } else {
                                if (A === 33 || A === 34) {
                                    if (t.overflowed[0] || t.overflowed[1]) {
                                        D.preventDefault();
                                        D.stopImmediatePropagation()
                                    }
                                    if (D.type === "keyup") {
                                        i._stop(u);
                                        var C = A === 34 ? -1 : 1;
                                        if (q.axis === "x" || (q.axis === "yx" && t.overflowed[1] && !t.overflowed[0])) {
                                            var z = "x",
                                                    E = Math.abs(w[0].offsetLeft) - (C * (p.width() * 0.9))
                                        } else {
                                            var z = "y",
                                                    E = Math.abs(w[0].offsetTop) - (C * (p.height() * 0.9))
                                        }
                                        i._scrollTo(u, E.toString(), {
                                            dir: z,
                                            scrollEasing: "mcsEaseInOut"
                                        })
                                    }
                                } else {
                                    if (A === 35 || A === 36) {
                                        if (!j(a.activeElement).is(v)) {
                                            if (t.overflowed[0] || t.overflowed[1]) {
                                                D.preventDefault();
                                                D.stopImmediatePropagation()
                                            }
                                            if (D.type === "keyup") {
                                                if (q.axis === "x" || (q.axis === "yx" && t.overflowed[1] && !t.overflowed[0])) {
                                                    var z = "x",
                                                            E = A === 35 ? Math.abs(p.width() - w.outerWidth(false)) : 0
                                                } else {
                                                    var z = "y",
                                                            E = A === 35 ? Math.abs(p.height() - w.outerHeight(false)) : 0
                                                }
                                                i._scrollTo(u, E.toString(), {
                                                    dir: z,
                                                    scrollEasing: "mcsEaseInOut"
                                                })
                                            }
                                        }
                                    }
                                }
                            }
                            break
                    }

                    function y(F, G) {
                        x.type = q.keyboard.scrollType;
                        x.scrollAmount = q.snapAmount || q.keyboard.scrollAmount;
                        if (x.type === "stepped" && t.tweenRunning) {
                            return
                        }
                        i._sequentialScroll.call(this, u, F, G)
                    }
                })
            },
            _sequentialScroll: function (r, u, s) {
                var w = r.data(d),
                        q = w.opt,
                        y = w.sequential,
                        x = j("#mCSB_" + w.idx + "_container"),
                        p = y.type === "stepped" ? true : false;
                switch (u) {
                    case "on":
                        y.dir = [(s === "mCSB_buttonRight" || s === "mCSB_buttonLeft" || s === 39 || s === 37 ? "x" : "y"), (s === "mCSB_buttonUp" || s === "mCSB_buttonLeft" || s === 38 || s === 37 ? -1 : 1)];
                        i._stop(r);
                        if (i._isNumeric(s) && y.type === "stepped") {
                            return
                        }
                        t(p);
                        break;
                    case "off":
                        v();
                        if (p || (w.tweenRunning && y.dir)) {
                            t(true)
                        }
                        break
                }

                function t(z) {
                    var F = y.type !== "stepped",
                            J = !z ? 1000 / 60 : F ? q.scrollInertia / 1.5 : q.scrollInertia,
                            B = !z ? 2.5 : F ? 7.5 : 40,
                            I = [Math.abs(x[0].offsetTop), Math.abs(x[0].offsetLeft)],
                            E = [w.scrollRatio.y > 10 ? 10 : w.scrollRatio.y, w.scrollRatio.x > 10 ? 10 : w.scrollRatio.x],
                            C = y.dir[0] === "x" ? I[1] + (y.dir[1] * (E[1] * B)) : I[0] + (y.dir[1] * (E[0] * B)),
                            H = y.dir[0] === "x" ? I[1] + (y.dir[1] * parseInt(y.scrollAmount)) : I[0] + (y.dir[1] * parseInt(y.scrollAmount)),
                            G = y.scrollAmount !== "auto" ? H : C,
                            D = !z ? "mcsLinear" : F ? "mcsLinearOut" : "mcsEaseInOut",
                            A = !z ? false : true;
                    if (z && J < 17) {
                        G = y.dir[0] === "x" ? I[1] : I[0]
                    }
                    i._scrollTo(r, G.toString(), {
                        dir: y.dir[0],
                        scrollEasing: D,
                        dur: J,
                        onComplete: A
                    });
                    if (z) {
                        y.dir = false;
                        return
                    }
                    clearTimeout(y.step);
                    y.step = setTimeout(function () {
                        t()
                    }, J)
                }

                function v() {
                    clearTimeout(y.step);
                    i._stop(r)
                }
            },
            _arr: function (r) {
                var q = j(this).data(d).opt,
                        p = [];
                if (typeof r === "function") {
                    r = r()
                }
                if (!(r instanceof Array)) {
                    p[0] = r.y ? r.y : r.x || q.axis === "x" ? null : r;
                    p[1] = r.x ? r.x : r.y || q.axis === "y" ? null : r
                } else {
                    p = r.length > 1 ? [r[0], r[1]] : q.axis === "x" ? [null, r[0]] : [r[0], null]
                }
                if (typeof p[0] === "function") {
                    p[0] = p[0]()
                }
                if (typeof p[1] === "function") {
                    p[1] = p[1]()
                }
                return p
            },
            _to: function (v, w) {
                if (v == null || typeof v == "undefined") {
                    return
                }
                var C = j(this),
                        B = C.data(d),
                        u = B.opt,
                        D = j("#mCSB_" + B.idx + "_container"),
                        r = D.parent(),
                        F = typeof v;
                if (!w) {
                    w = u.axis === "x" ? "x" : "y"
                }
                var q = w === "x" ? D.outerWidth(false) : D.outerHeight(false),
                        x = w === "x" ? D.offset().left : D.offset().top,
                        E = w === "x" ? D[0].offsetLeft : D[0].offsetTop,
                        z = w === "x" ? "left" : "top";
                switch (F) {
                    case "function":
                        return v();
                        break;
                    case "object":
                        if (v.nodeType) {
                            var A = w === "x" ? j(v).offset().left : j(v).offset().top
                        } else {
                            if (v.jquery) {
                                if (!v.length) {
                                    return
                                }
                                var A = w === "x" ? v.offset().left : v.offset().top
                            }
                        }
                        return A - x;
                        break;
                    case "string":
                    case "number":
                        if (i._isNumeric.call(null, v)) {
                            return Math.abs(v)
                        } else {
                            if (v.indexOf("%") !== -1) {
                                return Math.abs(q * parseInt(v) / 100)
                            } else {
                                if (v.indexOf("-=") !== -1) {
                                    return Math.abs(E - parseInt(v.split("-=")[1]))
                                } else {
                                    if (v.indexOf("+=") !== -1) {
                                        var s = (E + parseInt(v.split("+=")[1]));
                                        return s >= 0 ? 0 : Math.abs(s)
                                    } else {
                                        if (v.indexOf("px") !== -1 && i._isNumeric.call(null, v.split("px")[0])) {
                                            return Math.abs(v.split("px")[0])
                                        } else {
                                            if (v === "top" || v === "left") {
                                                return 0
                                            } else {
                                                if (v === "bottom") {
                                                    return Math.abs(r.height() - D.outerHeight(false))
                                                } else {
                                                    if (v === "right") {
                                                        return Math.abs(r.width() - D.outerWidth(false))
                                                    } else {
                                                        if (v === "first" || v === "last") {
                                                            var y = D.find(":" + v),
                                                                    A = w === "x" ? j(y).offset().left : j(y).offset().top;
                                                            return A - x
                                                        } else {
                                                            if (j(v).length) {
                                                                var A = w === "x" ? j(v).offset().left : j(v).offset().top;
                                                                return A - x
                                                            } else {
                                                                D.css(z, v);
                                                                e.update.call(null, C[0]);
                                                                return
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break
                }
            },
            _autoUpdate: function (q) {
                var t = j(this),
                        F = t.data(d),
                        z = F.opt,
                        v = j("#mCSB_" + F.idx + "_container");
                if (q) {
                    clearTimeout(v[0].autoUpdate);
                    i._delete.call(null, v[0].autoUpdate);
                    return
                }
                var s = v.parent(),
                        p = [j("#mCSB_" + F.idx + "_scrollbar_vertical"), j("#mCSB_" + F.idx + "_scrollbar_horizontal")],
                        D = function () {
                            return [p[0].is(":visible") ? p[0].outerHeight(true) : 0, p[1].is(":visible") ? p[1].outerWidth(true) : 0]
                        },
                        E = y(),
                        x, u = [v.outerHeight(false), v.outerWidth(false), s.height(), s.width(), D()[0], D()[1]],
                        H, B = G(),
                        w;
                C();

                function C() {
                    clearTimeout(v[0].autoUpdate);
                    v[0].autoUpdate = setTimeout(function () {
                        if (z.advanced.updateOnSelectorChange) {
                            x = y();
                            if (x !== E) {
                                r();
                                E = x;
                                return
                            }
                        }
                        if (z.advanced.updateOnContentResize) {
                            H = [v.outerHeight(false), v.outerWidth(false), s.height(), s.width(), D()[0], D()[1]];
                            if (H[0] !== u[0] || H[1] !== u[1] || H[2] !== u[2] || H[3] !== u[3] || H[4] !== u[4] || H[5] !== u[5]) {
                                r();
                                u = H
                            }
                        }
                        if (z.advanced.updateOnImageLoad) {
                            w = G();
                            if (w !== B) {
                                v.find("img").each(function () {
                                    A(this.src)
                                });
                                B = w
                            }
                        }
                        if (z.advanced.updateOnSelectorChange || z.advanced.updateOnContentResize || z.advanced.updateOnImageLoad) {
                            C()
                        }
                    }, 60)
                }

                function G() {
                    var I = 0;
                    if (z.advanced.updateOnImageLoad) {
                        I = v.find("img").length
                    }
                    return I
                }

                function A(L) {
                    var I = new Image();

                    function K(M, N) {
                        return function () {
                            return N.apply(M, arguments)
                        }
                    }

                    function J() {
                        this.onload = null;
                        r()
                    }
                    I.onload = K(I, J);
                    I.src = L
                }

                function y() {
                    if (z.advanced.updateOnSelectorChange === true) {
                        z.advanced.updateOnSelectorChange = "*"
                    }
                    var I = 0,
                            J = v.find(z.advanced.updateOnSelectorChange);
                    if (z.advanced.updateOnSelectorChange && J.length > 0) {
                        J.each(function () {
                            I += j(this).height() + j(this).width()
                        })
                    }
                    return I
                }

                function r() {
                    clearTimeout(v[0].autoUpdate);
                    e.update.call(null, t[0])
                }
            },
            _snapAmount: function (r, p, q) {
                return (Math.round(r / p) * p - q)
            },
            _stop: function (p) {
                var r = p.data(d),
                        q = j("#mCSB_" + r.idx + "_container,#mCSB_" + r.idx + "_container_wrapper,#mCSB_" + r.idx + "_dragger_vertical,#mCSB_" + r.idx + "_dragger_horizontal");
                q.each(function () {
                    i._stopTween.call(this)
                })
            },
            _scrollTo: function (q, s, u) {
                var I = q.data(d),
                        E = I.opt,
                        D = {
                            trigger: "internal",
                            dir: "y",
                            scrollEasing: "mcsEaseOut",
                            drag: false,
                            dur: E.scrollInertia,
                            overwrite: "all",
                            callbacks: true,
                            onStart: true,
                            onUpdate: true,
                            onComplete: true
                        },
                u = j.extend(D, u),
                        G = [u.dur, (u.drag ? 0 : u.dur)],
                        v = j("#mCSB_" + I.idx),
                        B = j("#mCSB_" + I.idx + "_container"),
                        K = E.callbacks.onTotalScrollOffset ? i._arr.call(q, E.callbacks.onTotalScrollOffset) : [0, 0],
                        p = E.callbacks.onTotalScrollBackOffset ? i._arr.call(q, E.callbacks.onTotalScrollBackOffset) : [0, 0];
                I.trigger = u.trigger;
                if (s === "_resetY" && !I.contentReset.y) {
                    if (t("onOverflowYNone")) {
                        E.callbacks.onOverflowYNone.call(q[0])
                    }
                    I.contentReset.y = 1
                }
                if (s === "_resetX" && !I.contentReset.x) {
                    if (t("onOverflowXNone")) {
                        E.callbacks.onOverflowXNone.call(q[0])
                    }
                    I.contentReset.x = 1
                }
                if (s === "_resetY" || s === "_resetX") {
                    return
                }
                if ((I.contentReset.y || !q[0].mcs) && I.overflowed[0]) {
                    if (t("onOverflowY")) {
                        E.callbacks.onOverflowY.call(q[0])
                    }
                    I.contentReset.x = null
                }
                if ((I.contentReset.x || !q[0].mcs) && I.overflowed[1]) {
                    if (t("onOverflowX")) {
                        E.callbacks.onOverflowX.call(q[0])
                    }
                    I.contentReset.x = null
                }
                if (E.snapAmount) {
                    s = i._snapAmount(s, E.snapAmount, E.snapOffset)
                }
                switch (u.dir) {
                    case "x":
                        var x = j("#mCSB_" + I.idx + "_dragger_horizontal"),
                                z = "left",
                                C = B[0].offsetLeft,
                                H = [v.width() - B.outerWidth(false), x.parent().width() - x.width()],
                                r = [s, s === 0 ? 0 : (s / I.scrollRatio.x)],
                                L = K[1],
                                J = p[1],
                                A = L > 0 ? L / I.scrollRatio.x : 0,
                                w = J > 0 ? J / I.scrollRatio.x : 0;
                        break;
                    case "y":
                        var x = j("#mCSB_" + I.idx + "_dragger_vertical"),
                                z = "top",
                                C = B[0].offsetTop,
                                H = [v.height() - B.outerHeight(false), x.parent().height() - x.height()],
                                r = [s, s === 0 ? 0 : (s / I.scrollRatio.y)],
                                L = K[0],
                                J = p[0],
                                A = L > 0 ? L / I.scrollRatio.y : 0,
                                w = J > 0 ? J / I.scrollRatio.y : 0;
                        break
                }
                if (r[1] < 0 || (r[0] === 0 && r[1] === 0)) {
                    r = [0, 0]
                } else {
                    if (r[1] >= H[1]) {
                        r = [H[0], H[1]]
                    } else {
                        r[0] = -r[0]
                    }
                }
                if (!q[0].mcs) {
                    F()
                }
                clearTimeout(B[0].onCompleteTimeout);
                if (!I.tweenRunning && ((C === 0 && r[0] >= 0) || (C === H[0] && r[0] <= H[0]))) {
                    return
                }
                i._tweenTo.call(null, x[0], z, Math.round(r[1]), G[1], u.scrollEasing);
                i._tweenTo.call(null, B[0], z, Math.round(r[0]), G[0], u.scrollEasing, u.overwrite, {
                    onStart: function () {
                        if (u.callbacks && u.onStart && !I.tweenRunning) {
                            if (t("onScrollStart")) {
                                F();
                                E.callbacks.onScrollStart.call(q[0])
                            }
                            I.tweenRunning = true;
                            i._onDragClasses(x);
                            I.cbOffsets = y()
                        }
                    },
                    onUpdate: function () {
                        if (u.callbacks && u.onUpdate) {
                            if (t("whileScrolling")) {
                                F();
                                E.callbacks.whileScrolling.call(q[0])
                            }
                        }
                    },
                    onComplete: function () {
                        if (u.callbacks && u.onComplete) {
                            if (E.axis === "yx") {
                                clearTimeout(B[0].onCompleteTimeout)
                            }
                            var M = B[0].idleTimer || 0;
                            B[0].onCompleteTimeout = setTimeout(function () {
                                if (t("onScroll")) {
                                    F();
                                    E.callbacks.onScroll.call(q[0])
                                }
                                if (t("onTotalScroll") && r[1] >= H[1] - A && I.cbOffsets[0]) {
                                    F();
                                    E.callbacks.onTotalScroll.call(q[0])
                                }
                                if (t("onTotalScrollBack") && r[1] <= w && I.cbOffsets[1]) {
                                    F();
                                    E.callbacks.onTotalScrollBack.call(q[0])
                                }
                                I.tweenRunning = false;
                                B[0].idleTimer = 0;
                                i._onDragClasses(x, "hide")
                            }, M)
                        }
                    }
                });

                function t(M) {
                    return I && E.callbacks[M] && typeof E.callbacks[M] === "function"
                }

                function y() {
                    return [E.callbacks.alwaysTriggerOffsets || C >= H[0] + L, E.callbacks.alwaysTriggerOffsets || C <= -J]
                }

                function F() {
                    var O = [B[0].offsetTop, B[0].offsetLeft],
                            P = [x[0].offsetTop, x[0].offsetLeft],
                            M = [B.outerHeight(false), B.outerWidth(false)],
                            N = [v.height(), v.width()];
                    q[0].mcs = {
                        content: B,
                        top: O[0],
                        left: O[1],
                        draggerTop: P[0],
                        draggerLeft: P[1],
                        topPct: Math.round((100 * Math.abs(O[0])) / (Math.abs(M[0]) - N[0])),
                        leftPct: Math.round((100 * Math.abs(O[1])) / (Math.abs(M[1]) - N[1])),
                        direction: u.dir
                    }
                }
            },
            _tweenTo: function (r, u, s, q, B, t, K) {
                var K = K || {},
                        H = K.onStart || function () {},
                        C = K.onUpdate || function () {},
                        I = K.onComplete || function () {},
                        z = i._getTime(),
                        x, v = 0,
                        E = r.offsetTop,
                        F = r.style,
                        A;
                if (u === "left") {
                    E = r.offsetLeft
                }
                var y = s - E;
                r._mcsstop = 0;
                if (t !== "none") {
                    D()
                }
                p();

                function J() {
                    if (r._mcsstop) {
                        return
                    }
                    if (!v) {
                        H.call()
                    }
                    v = i._getTime() - z;
                    G();
                    if (v >= r._mcstime) {
                        r._mcstime = (v > r._mcstime) ? v + x - (v - r._mcstime) : v + x - 1;
                        if (r._mcstime < v + 1) {
                            r._mcstime = v + 1
                        }
                    }
                    if (r._mcstime < q) {
                        r._mcsid = A(J)
                    } else {
                        I.call()
                    }
                }

                function G() {
                    if (q > 0) {
                        r._mcscurrVal = w(r._mcstime, E, y, q, B);
                        F[u] = Math.round(r._mcscurrVal) + "px"
                    } else {
                        F[u] = s + "px"
                    }
                    C.call()
                }

                function p() {
                    x = 1000 / 60;
                    r._mcstime = v + x;
                    A = (!b.requestAnimationFrame) ? function (L) {
                        G();
                        return setTimeout(L, 0.01)
                    } : b.requestAnimationFrame;
                    r._mcsid = A(J)
                }

                function D() {
                    if (r._mcsid == null) {
                        return
                    }
                    if (!b.requestAnimationFrame) {
                        clearTimeout(r._mcsid)
                    } else {
                        b.cancelAnimationFrame(r._mcsid)
                    }
                    r._mcsid = null
                }

                function w(N, M, R, Q, O) {
                    switch (O) {
                        case "linear":
                        case "mcsLinear":
                            return R * N / Q + M;
                            break;
                        case "mcsLinearOut":
                            N /= Q;
                            N--;
                            return R * Math.sqrt(1 - N * N) + M;
                            break;
                        case "easeInOutSmooth":
                            N /= Q / 2;
                            if (N < 1) {
                                return R / 2 * N * N + M
                            }
                            N--;
                            return -R / 2 * (N * (N - 2) - 1) + M;
                            break;
                        case "easeInOutStrong":
                            N /= Q / 2;
                            if (N < 1) {
                                return R / 2 * Math.pow(2, 10 * (N - 1)) + M
                            }
                            N--;
                            return R / 2 * (-Math.pow(2, -10 * N) + 2) + M;
                            break;
                        case "easeInOut":
                        case "mcsEaseInOut":
                            N /= Q / 2;
                            if (N < 1) {
                                return R / 2 * N * N * N + M
                            }
                            N -= 2;
                            return R / 2 * (N * N * N + 2) + M;
                            break;
                        case "easeOutSmooth":
                            N /= Q;
                            N--;
                            return -R * (N * N * N * N - 1) + M;
                            break;
                        case "easeOutStrong":
                            return R * (-Math.pow(2, -10 * N / Q) + 1) + M;
                            break;
                        case "easeOut":
                        case "mcsEaseOut":
                        default:
                            var P = (N /= Q) * N,
                                    L = P * N;
                            return M + R * (0.499999999999997 * L * P + -2.5 * P * P + 5.5 * L + -6.5 * P + 4 * N)
                    }
                }
            },
            _getTime: function () {
                if (b.performance && b.performance.now) {
                    return b.performance.now()
                } else {
                    if (b.performance && b.performance.webkitNow) {
                        return b.performance.webkitNow()
                    } else {
                        if (Date.now) {
                            return Date.now()
                        } else {
                            return new Date().getTime()
                        }
                    }
                }
            },
            _stopTween: function () {
                var p = this;
                if (p._mcsid == null) {
                    return
                }
                if (!b.requestAnimationFrame) {
                    clearTimeout(p._mcsid)
                } else {
                    b.cancelAnimationFrame(p._mcsid)
                }
                p._mcsid = null;
                p._mcsstop = 1
            },
            _delete: function (r) {
                try {
                    delete r
                } catch (q) {
                    r = null
                }
            },
            _mouseBtnLeft: function (p) {
                return !(p.which && p.which !== 1)
            },
            _pointerTouch: function (q) {
                var p = q.originalEvent.pointerType;
                return !(p && p !== "touch" && p !== 2)
            },
            _isNumeric: function (p) {
                return !isNaN(parseFloat(p)) && isFinite(p)
            }
        };
        j.fn[g] = function (p) {
            if (e[p]) {
                return e[p].apply(this, Array.prototype.slice.call(arguments, 1))
            } else {
                if (typeof p === "object" || !p) {
                    return e.init.apply(this, arguments)
                } else {
                    j.error("Method " + p + " does not exist")
                }
            }
        };
        j[g] = function (p) {
            if (e[p]) {
                return e[p].apply(this, Array.prototype.slice.call(arguments, 1))
            } else {
                if (typeof p === "object" || !p) {
                    return e.init.apply(this, arguments)
                } else {
                    j.error("Method " + p + " does not exist")
                }
            }
        };
        j[g].defaults = h;
        b[g] = true;
        j(b).load(function () {
            j(m)[g]()
        })
    }))
}(window, document));
//jquery.disablescroll.min
(function (d) {
    var a, c;

    function b(f, e) {
        this.opts = d.extend({
            handleKeys: true,
            scrollEventKeys: [32, 33, 34, 35, 36, 37, 38, 39, 40]
        }, e);
        this.$container = f;
        this.$document = d(document);
        this.lockToScrollPos = [0, 0];
        this.disable()
    }
    c = b.prototype;
    c.disable = function () {
        var e = this;
        e.lockToScrollPos = [e.$container.scrollLeft(), e.$container.scrollTop()];
        e.$container.on("mousewheel.disablescroll DOMMouseScroll.disablescroll touchmove.disablescroll", e._handleWheel);
        e.$container.on("scroll.disablescroll", function () {
            e._handleScrollbar.call(e)
        });
        if (e.opts.handleKeys) {
            e.$document.on("keydown.disablescroll", function (f) {
                e._handleKeydown.call(e, f)
            })
        }
    };
    c.undo = function () {
        var e = this;
        e.$container.off(".disablescroll");
        if (e.opts.handleKeys) {
            e.$document.off(".disablescroll")
        }
    };
    c._handleWheel = function (e) {
        e.preventDefault()
    };
    c._handleScrollbar = function () {
        this.$container.scrollLeft(this.lockToScrollPos[0]);
        this.$container.scrollTop(this.lockToScrollPos[1])
    };
    c._handleKeydown = function (f) {
        for (var e = 0; e < this.opts.scrollEventKeys.length; e++) {
            if (f.keyCode === this.opts.scrollEventKeys[e]) {
                f.preventDefault();
                return
            }
        }
    };
    d.fn.disablescroll = function (e) {
        if (!a && (typeof e === "object" || !e)) {
            a = new b(this, e)
        } else {
            if (a && a[e]) {
                a[e].call(a)
            }
        }
    };
    window.UserScrollDisabler = b
})(jQuery);
////////
// Define string methods
//
String.prototype.trim = function () {
    var charList = String.prototype.trim.arguments[0];
    if (charList) {
        charList = '^[' + charList + ']+|[' + charList + ']+$';
        var pattern = new RegExp(charList, "gi");
        var str = this.replace(pattern, '');
    } else {
        var str = this.replace(/^[ ]+|[ ]+$/g, '');
    }
    str = str.replace(/^[\r\n]+|[\r\n]+$/g, '');
    str = str.replace(/^[ ]+|[ ]+$/g, '');
    return str;
};
// trim ambas direcciones
String.prototype.tripSpace = function () {
    return this.replace(/(\s\s+)/g, " ");
};
// repeat string
String.prototype.repeat = function () {
    var times = String.prototype.repeat.arguments[0];
    var str = '';
    var i;
    for (i = 0; i < times; i++) {
        str += this;
    }
    return str;
};
// filter string
String.prototype.filter = function () {
    var arrFilter = String.prototype.filter.arguments[0];
    var strReplace = String.prototype.filter.arguments[1];
    var pattern;
    var str = this;
    for (var i = 0; i < arrFilter.length; i++) {
        pattern = new RegExp(arrFilter[i], "gi");
        str = str.replace(pattern, strReplace.repeat(arrFilter[i].length));
    }
    return str;
};
// repace string - like function sprintf in php
String.prototype.replaceString = function () {
    var strReplace = String.prototype.replaceString.arguments;
    var pattern;
    var str = this;
    for (var i = 0; i < strReplace.length; i++) {
        pattern = new RegExp('%s', "i");
        str = str.replace(pattern, strReplace[i]);
    }
    return str;
};
// strip viet
String.prototype.stripViet = function () {
    var replaceChr = String.prototype.stripViet.arguments[0];
    var stripped_str = this;
    var viet = [];
    i = 0;
    viet[i++] = new Array('a', "/á|à|ả|ã|ạ|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/g");
    viet[i++] = new Array('o', "/ó|ò|ỏ|õ|ọ|ơ|ớ|ờ|ở|ỡ|ợ|ô|ố|ồ|ổ|ỗ|ộ/g");
    viet[i++] = new Array('e', "/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/g");
    viet[i++] = new Array('u', "/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/g");
    viet[i++] = new Array('i', "/í|ì|ỉ|ĩ|ị/g");
    viet[i++] = new Array('y', "/ý|ỳ|ỷ|ỹ|ỵ/g");
    viet[i++] = new Array('d', "/đ/g");
    for (var i = 0; i < viet.length; i++) {
        stripped_str = stripped_str.replace(eval(viet[i][1]), viet[i][0]);
        stripped_str = stripped_str.replace(eval(viet[i][1].toUpperCase().replace('G', 'g')), viet[i][0].toUpperCase());
    }
    if (replaceChr) {
        return stripped_str.replace(/[\W]|_/g, replaceChr).replace(/\s/g, replaceChr).replace(/^\-+|\-+$/g, replaceChr);
    } else {
        return stripped_str;
    }
};
var zmp3Img = {
    dynamic: function (el) {
        $($(el).data('selector')).each(function () {
            $(this).attr('src', $(this).data('src'));
        });
        $(el).remove();
    }
};
var zmp3Number = {
    format: function (nStr) {
        nStr += '';
        x = nStr.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
            x1 = x1.replace(rgx, '$1' + ',' + '$2');
        }
        return x1 + x2;
    }
};
var zmp3String = {
    substr: function (s, l) {
        if (s.length > l) {
            s = s.substring(0, l);
            if (s.lastIndexOf(' ') != -1)
                s = s.substring(0, s.lastIndexOf(' '));
            s += '...';
        }
        return s;
    }
};

function onBlurBind(el, fn) {
    $(document).click(function (e) {
        var offset = $(el).offset();
        if (typeof offset !== 'undefined') {
            if (e.pageY < offset.top || e.pageY > offset.top + $(el).height() || e.pageX < offset.left || e.pageX > offset.left + $(el).width()) {
                fn(e);
            }
        }
    });
}

function isInputNumber(code) {
    return code !== 32 && (code < 47 || ((code < 58 || code > 95 && code < 106)));
}

function dynamic() {
    var docViewTop = $(window).scrollTop();
    var docViewBottom = docViewTop + $(window).height();
    var elemTop, elemBottom;
    $('.fn-dynamic').each(function () {
        elemTop = $(this).offset().top;
        elemBottom = elemTop + $(this).height();
        if ((elemBottom + 200 < docViewTop) || (elemTop - 200 <= docViewBottom)) {
            var fn = window[$(this).data('fn')];
            if (typeof fn != 'undefined') {
                fn['dynamic'].apply(fn, [this]);
            }
        }
    });
}
var zmp3DateTime = {
    format: function (t) {
        var e = [
            [11, 'sáng'],
            [14, 'trưa'],
            [19, 'chiều']
        ],
                f = ['Chủ Nhật', 'Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy'],
                g = new Date(),
                j = new Date(t * 1000),
                d = Math.floor(g.getTime() / 1000) - t;
        if (d < 60)
            return (d < 0 ? 0 : d).toString() + ' giây trước';
        if (d < 3600)
            return Math.floor(d / 60) + ' phút trước';
        if (d < 43200)
            return Math.floor(d / 3600) + ' tiếng trước';
        var h = j.getHours(),
                m = this.fill2(j.getMinutes());
        if (d < 518400) {
            var b = 'tối';
            for (var i = 0; i < 3; i++)
                if (h < e[i][0]) {
                    b = e[i][1];
                    break
                }
            d = (g.getDay() + 7 - j.getDay()) % 7;
            var k = '';
            if (d == 0)
                k = 'hôm nay';
            else if (d == 1)
                k = 'hôm qua';
            else
                k = f[j.getDay()];
            return (h > 12 ? (h % 12) : h).toString() + ':' + m + ' ' + b + ' ' + k;
        }
        h = this.fill2(h);
        return h + ':' + m + ' ' + this.fill2(j.getDate()) + '/' + this.fill2(j.getMonth() + 1) + '/' + j.getFullYear();
    },
    fill2: function (value) {
        return value < 10 ? ('0' + value) : value;
    }
};
var zmp3Share = {
    url: '',
    share: function (el) {
        var link = el.attr('href');
        switch (el.data('net')) {
            case 'gp':
                url = 'https://plus.google.com/share?url=' + link;
                break;
            case 'zm':
                url = 'http://link.apps.zing.vn/share?u=' + link;
                break;
            default:
                url = 'https://www.facebook.com/dialog/share?app_id=1603079626622346&display=popup&caption=mp3.zing.vn&redirect_uri=http://' + location.host + '/link/fb-redirect&href=' + link;
                break;
        }
        window.open(url, 'share', 'height=600,width=600');
        return false;
    }
};
var zmp3Tab = {
    init: function () {
        if (MP3.ZALO_ID && !MP3.VIP) {
            var tab = $('#tabService');
            var panel = tab.data('panel');
            zmp3SongTool.buildDlBox(tab, $(panel), function (rs) {
                if (rs) {
                    for (var x in rs.data) {
                        if (rs.data[x].vip) {
                            $('.fn-' + x, $(panel)).removeClass('ghost-button');
                            var p = $('.fn-size-' + x, $(panel)).parent();
                            p.html(p.html().replace('miễn phí', 'VIP'));
                        }
                    }
                    if (rs.msg) {
                        $('.fn-list', $(panel)).addClass('none');
                        $('.fn-download-off', $(panel)).removeClass('none');
                    }
                }
                zmp3Tab.showTab(tab);
            });
        }
        $('.fn-tab').click(function () {
            var tab = $(this);
            var panel = tab.data('panel');
            if (panel == '.fn-tab-panel-addto') {
                zmp3Login.show(
                        function () {
                            zmp3SongTool.buildPlaylistBox(tab, $(panel), function () {
                                zmp3Tab.showTab(tab);
                            });
                        });
            } else if (panel == '.fn-tab-panel-service') {
                zmp3SongTool.buildDlBox(tab, $(panel), function (rs) {
                    if (rs) {
                        for (var x in rs.data) {
                            if (rs.data[x].vip) {
                                $('.fn-' + x, $(panel)).removeClass('ghost-button');
                                var p = $('.fn-size-' + x, $(panel)).parent();
                                p.html(p.html().replace('miễn phí', 'VIP'));
                            }
                        }
                        if (rs.msg) {
                            $('.fn-list', $(panel)).addClass('none');
                            $('.fn-download-off', $(panel)).removeClass('none');
                        }
                    }
                    zmp3Tab.showTab(tab);
                });

            } else
                zmp3Tab.showTab(tab);
            return false;
        });
        $('.fn-closetab').click(function () {
            zmp3Tab.showTab($($(this).data('tab')));
            return false;
        });
    },
    showTab: function (tab) {
        var panel = tab.data('panel');
        var groupTab = $('.fn-tab[data-group="' + tab.data('group') + '"]');
        groupTab.removeClass('active');
        tab.parent().siblings().removeClass('active');
        $(tab.data('group')).addClass('none');
        groupTab.each(function () {
            $($(this).data('panel')).addClass('none');
        });
        if (tab.data('show')) {
            $(panel).addClass('none');
            groupTab.data('show', false);
            tab.parent().removeClass('active');
        } else {
            groupTab.data('show', false);
            tab.data('show', true);
            tab.parent().addClass('active');
            tab.addClass('active');
            $(panel).removeClass('none');
        }
    }

};
var zmp3ChangePath = {
    clickCb: function (el) {
        location.pathname = $(el).data('path');
    }
};
$(document).ready(function () {
    $(window).load(function () {
        if ($(window).height() > $('body').height()) {
            $('body').addClass('fixed-footer');
        } else {
            $('body').removeClass('fixed-footer');
        }
        zmp3UI.sidebar();
        dynamic();
    });
    $(window).resize(function () {
        if ($(window).height() > $('body').height()) {
            $('body').addClass('fixed-footer');
        } else {
            $('body').removeClass('fixed-footer');
        }
        zmp3UI.sidebar();
        dynamic();
        zmp3Suggest.resize();
    });
    $(document).scroll(function (e) {
        dynamic();
        zmp3UI.sidebar();
    });
    zmp3UI.init();
    zmp3Login.init();
    zmp3Suggest.init();
    zmp3SongTool.init();
    zmp3User.init();
    zmp3Tab.init();
    if ($('a.fn-version3').length > 0) {
        $('a.fn-version3').attr('href', '//v3.mp3.zing.vn' + location.pathname + location.search);
    }
    if (!MP3.VIP && typeof ZVip != 'undefined') {
        $('.fn-viprequire').click(function (e) {
            if (!MP3.VIP) {
                ZVip.Fpackage($(this).data('step'));
                return false;
            }
        });
    }
});
zmp3User = {
    init: function () {
        $('.fn-login').click(function () {
            if (!MP3.ACCOUNT_ID) {
                zmp3Login.show();
                return false;
            }
        });
    },
    submitCb: function (rs) {}
};

function loginCallback(e, msg) {
    zmp3Login.process(e, msg);
}
function loginZaloCallback() {
    zmp3Login.zaloProcess();
}
var zmp3SongTool = {
    item: false,
    init: function () {
        $('.fn-dlsong').click(function (e) {
            zmp3SongTool.showDlBox($(this));
            return false;
        });
        $('.fn-share').click(function (e) {
            zmp3SongTool.showShareBox($(this));
            return false;
        });
        $('.fn-add').each(function () {
            var _this = this;
            if ('fav' == $(_this).data('from')) {
                $.get('/json/favorite/check-exists', $(_this).data(), function (rs) {
                    if (rs.exists) {
                        $(_this).addClass('added').html($(_this).html().replace('Thêm vào', 'Đã thêm'));
                    }
                });
            }
            $(_this).click(function () {
                if (zmp3Login.show()) {
                    zmp3SongTool.item = $(this);
                    zmp3SongTool.addPlaylistItem($(this));
                }
                //Log add to favorite playlist
                //z3Log.listenAddToPlaylistBehavier("", 2);
                return false;
            });
        });
        $('.fn-addto').click(function (e) {
            if (zmp3Login.show()) {
                zmp3SongTool.showAddBox($(this));
            }
            return false;
        });
        $('.fn-addfav').click(function () {
            var el = $($(this).data('item'));
            if (zmp3Login.show()) {
                var args = $(el).data(),
                        last = parseInt(el.data('added')),
                        now = new Date().getTime(),
                        item = this.item,
                        pids = [];
                if ((isNaN(last) || last + 800 < now)) {
                    el.data('added', now);
                    $.post("/json/favorite/add-item", args, function (ret) {
                        if (ret.err == 0) {
                            el.addClass('added');
                        }
                        zmp3UI.showMsg(ret.msg, ret.err);
                    });
                }
            }
            return false;
        });
        $('form.fn-playlist').submit(function (e) {
            var frm = this;
            if (frm.name.value.trim().length < 1) {
                zmp3UI.showMsg('Vui lòng nhập tên playlist!', 1);
            } else {
                if (!$(frm).attr('disabled')) {
                    $(frm).attr('disabled', true);
                    this.item_id.value = zmp3SongTool.item.data('id');
                    $.post($(frm).attr('action'), $(frm).serialize(), function (rs) {
                        $(frm).attr('disabled', false);
                        if (rs.code < 1) {
                            zmp3SongTool.buildPlaylistItem(rs.data, $($(frm).data('playlist-box')));
                        }
                        zmp3UI.showMsg(rs.msg, rs.code);
                    });
                }
            }
            return false;
        });
        $('.fn-rmitem').click(function () {
            zmp3SongTool.removeItem($($(this).data('item')));
            return false;
        });
        onBlurBind('#playlistBox', function (e) {
            if (zmp3SongTool.item) {
                $('#playlistBox').addClass('none');
                if (zmp3SongTool.item.data("active")) {
                    $('.fn-' + zmp3SongTool.item.data("type")).removeClass(zmp3SongTool.item.data("active"));
                }
                $('.fn-songbox').addClass('none');
            }
        });
    },
    showPlaylistBox: function (top, left) {
        var pbox = $('#playlistBox');
        var pids = this.item.data('pids') ? this.item.data('pids').split(',') : [];
        $('.fn-add', pbox).removeClass('added');
        $('input', pbox).prop('checked', false);
        for (var i in pids) {
            if (pids[i].length > 1) {
                $('input', $('[data-pid=' + pids[i] + ']', pbox).addClass('added')).prop('checked', true);
            }
        }
        pbox.removeClass("none").css("top", top).css("left", left).css('display', 'block');
    },
    addPlaylistItem: function (el) {
        var args = $(el).data(),
                added = false,
                last = parseInt(el.data('added')),
                now = new Date().getTime(),
                item = this.item,
                pids = [];
        try {
            args.id = item.data('id');
            if (item.data('pids')) {
                pids = item.data('pids').split(',');
            }
        } catch (e) {
        }
        for (var i in pids) {
            if (pids[i] === args.pid) {
                added = true;
                break;
            }
        }
        if (el.hasClass('added')) {
            zmp3SongTool.removeItem($(el.data('item')), function () {
                el.removeClass('added').html(el.html().replace('Đã thêm', 'Thêm vào'));
                if ($('input', el).length > 0) {
                    $('input', el).removeAttr('checked');
                }
            }, true);
        } else {
            if (!added && (isNaN(last) || last + 800 < now)) {
                el.data('added', now);
                $.post("/json/favorite/add-item", args, function (ret) {
                    if (ret.err < 1) {
                        if ($('input', el).length > 0) {
                            $('input', el).attr('checked', 'checked');
                        }
                        el.addClass('added').html(el.html().replace('Thêm vào', 'Đã thêm'));
                        pids.push(args.pid);
                        try {
                            item.data('pids', pids.join(','));
                        } catch (e) {
                        }
                    }
                    zmp3UI.showMsg(ret.msg, ret.err);
                });
            }
        }
    },
    removeItem: function (el, cbFunc, keep) {
        var data = $(el).data(),
                _this = this;
        var msg = 'Bạn chắc chắn muốn xóa ';
        if (data.type == 'song') {
            msg += 'bài hát';
        } else if (data.type == 'artist') {
            msg += 'nghệ sĩ';
        } else {
            msg += data.type;
        }
        zmp3UI.bodyMask(1);
        zmp3UI.confirm("Xác nhận", data.name && !data.pid ? msg + ' <strong>' + data.name + '</strong> ra khỏi danh sách?' : msg + ' này ra khỏi danh sách?', function (isOK) {
            if (isOK) {
                if (!data.id || data.id.length < 4) {
                    data.id = _this.item.data('id');
                }
                for (var i in data) {
                    if (typeof data[i] !== 'string' && typeof data[i] !== 'number') {
                        delete(data[i]);
                    }
                }
                if (!el.data('removed')) {
                    el.data('removed', true);
                    $.post("/json/favorite/remove-item", data, function (ret) {
                        if (ret.err == 0) {
                            var follow = $('.fn-follow', el.parent());
                            if (follow.length > 0) {
                                follow.removeClass('none').removeClass('active');
                                var unfollow = $('.fn-rmitem', el.parent());
                                unfollow.addClass('none');
                            } else {
                                follow = $('.fn-ufollow', el.parent());
                                if (follow.length > 0) {
                                    follow.removeClass('none');
                                } else if (!keep) {
                                    el.remove();
                                }
                            }
                        } else {
                            el.data('removed', false);
                        }

                        zmp3UI.showMsg(ret.msg, ret.err);
                        if ($.isFunction(cbFunc)) {
                            cbFunc(ret);
                        }
                    });
                }
            }
            $('#confirmBox .fn-close').click();
            zmp3UI.bodyMask(0);
        });
    },
    showAddBox: function (el) {
        this.item = $(el.data('item'));
        var boxPos = $(el).offset();
        var type = this.item.data("type");
        boxPos.top += $(el).height() + 8;
        boxPos.left += $(el).width() / 2;
        $('.fn-songbox').addClass('none');
        if (this.item.data("active")) {
            $('.fn-' + type).removeClass(this.item.data("active"));
            this.item.addClass(this.item.data("active"));
        }
        if (type == 'song' || type == 'playlist') {
            if (!$(el).data('rendered')) {
                $('.fn-addto').data('rendered', true);
                this.buildPlaylistBox(this.item, $('#playlistBox'), function () {
                    zmp3SongTool.showPlaylistBox(boxPos.top, boxPos.left);
                });
            } else {
                zmp3SongTool.showPlaylistBox(boxPos.top, boxPos.left);
            }
        }
    },
    showDlBox: function (el) {
        this.item = $(el.data('item'));
        var type = this.item.data('type') || 'song';
        var offset = el.offset(),
                activeCls = this.item.data('active');
        var boxId = 'dlbox' + type + this.item.data('id');
        var box = $('#' + boxId);
        $('.fn-' + type).removeClass(activeCls);
        this.item.addClass(activeCls);
        $('.fn-box' + type).addClass('none');
        if (box.length > 0) {
            box.css({
                left: offset.left + 2 - (box.width() / 2) + 'px',
                top: offset.top + 28 + 'px'
            }).removeClass('none');
        } else {
            box = $(document.getElementById('dlbox' + type).cloneNode(true));
            box.attr('id', boxId);
            $('body').append(box);
            box.css({
                left: offset.left + 2 - (box.width() / 2) + 'px',
                top: offset.top + 28 + 'px'
            })
            this.buildDlBox(this.item, box, function (rs) {
                box.removeClass('none');
                if (rs.msg) {
                    $('.box-tooltip.box-download.fn-boxsong').addClass('none');
                    zmp3UI.showMsg(rs.msg, 1);
                }
                if (!MP3.VIP && typeof ZVip != 'undefined') {
                    $('.fn-viprequire', box).click(function (e) {
                        if (!MP3.VIP) {
                            box.addClass('none');
                            ZVip.Fpackage();
                            return false;
                        }
                    });
                }
                onBlurBind(zmp3SongTool.item, function () {
                    $('.fn-' + zmp3SongTool.item.data('type')).removeClass(zmp3SongTool.item.data('active'));
                    box.addClass('none');
                });
            });
        }
    },
    showShareBox: function (el) {
        $(".fn-boxsong").addClass("none");
        this.item = $($(el).data("item"));
        var offset = el.offset();
        var boxId = 'shareSongBox' + this.item.data('id');
        var box = $('#' + boxId);
        $('.fn-' + this.item.data('type')).removeClass(this.item.data('active'));
        this.item.addClass(this.item.data('active'));
        $('.fn-songbox').addClass('none');
        if (box.length > 0) {
            box.css('top', offset.top + 28).css('left', (offset.left - 80) + (box.width() / 2)).removeClass('none');
        } else {
            box = $(document.getElementById('shareSongBox').cloneNode(true));
            box.attr('id', boxId);
            $('body').append(box);
            $('.fn-sharelink', box).attr('href', el.attr('href')).attr('data-id', this.item.data('id')).removeClass('none').click(function () {
                zmp3Share.share($(this));
                //z3Log.listenShareBehavier($(this));
                return false;
            });
            box.css('top', offset.top + 28).css('left', (offset.left - 80) + (box.width() / 2)).removeClass('none');
            onBlurBind(zmp3SongTool.item, function () {
                $('.fn-' + zmp3SongTool.item.data('type')).removeClass(zmp3SongTool.item.data('active'));
                box.addClass('none');
            });
        }
    },
    buildDlBox: function (item, con, cb) {
        this.item = item;
        var code = item.data('code');
        if (code !== con.data('build-dl')) {
            con.data('build-dl', code);
            var type = item.data('type') || 'song';
            $('.fn-list a', con).each(function () {
                $(this).parent().addClass('none');
            });
            $.get('/json/' + type + '/get-download', item.data(), function (rs) {
                if (rs.data) {
                    var data = rs.data;
                    for (var x in data) {
                        $('.fn-' + x, con).parent().removeClass('none');
                        $('.fn-size-' + x, con).parent().removeClass('none');
                        $('.fn-' + x, con).attr("data-id", item.data().id);
                        $('.fn-' + x, con).attr("data-bit", x);

                        if (x == "128") {
                            $('.fn-' + x, con).attr('href', data[x].link).click(function (e) {
                                //Log download behavier   
                                if (typeof z3Log !== "undefined") {
                                    //   z3Log.listenDownloadBehavier(e);
                                }
                                if (rs.data[x].vip && !MP3.VIP) {
                                    ZVip.Fpackage($(this).data('step'));
                                    return false;
                                }
                            });
                        } else {
                            $('.fn-' + x, con).attr('href', data[x].link).click(function (e) {
                                //Log download behavier   
                                if (typeof z3Log !== "undefined") {
                                    //    z3Log.listenDownloadBehavier(e);
                                }
                            });
                        }

                        if (data[x].size > 0)
                            $('.fn-size-' + x, con).html((data[x].size / 1048576).toFixed(2));
                    }
                    if (rs.qr) {
                        $('.fn-qr', con).attr('src', 'data:image/png;base64,' + rs.qr);
                    }
                }
                if ($.isFunction(cb))
                    cb(rs);
            });
        } else if ($.isFunction(cb))
            cb();
    },
    buildPlaylistItem: function (idata, con) {
        var tpl1 = idata.id === 0 ? $('.fn-fav', con)[0].cloneNode(true) : $('.fn-item', con)[0].cloneNode(true);
        $('.fn-name', tpl1).html(idata.name);
        $('.fn-link', tpl1).attr('href', idata.link);
        if ($('.fn-total', tpl1).length > 0) {
            $('.fn-total', tpl1).html(idata.total);
            if (idata.id == 0 && idata.type == 'playlist') {
                $('.fn-total', tpl1).parent('span').remove();
            }
        }
        $(tpl1).attr('id', idata.id);
        if (idata.added) {
            $('.fn-add', tpl1).addClass('added');
            if ($('input', tpl1).length > 0) {
                $('input', tpl1).prop('checked', true);
            }
        }
        $('.fn-add', tpl1).attr('data-pid', idata.id).attr('data-from', 'playlist').attr('data-item', '#' + idata.id + ' .fn-add').attr('data-name', idata.name).attr('data-type', idata.type).attr('data-title', idata.name).attr('data-pid', idata.id).click(function (e) {
            e.preventDefault();
            zmp3SongTool.addPlaylistItem($(this));
            var args = $(this).data();
            //z3Log.listenAddToPlaylistBehavier(args, 1);
            return false;
        });
        $(tpl1).removeClass('none');
        $('.fn-list', con).append(tpl1);
    },
    buildPlaylistBox: function (item, con, cb) {
        this.item = item;
        if (!con.data('build-playlist')) {
            con.data('build-playlist', 1);
            $.get("/json/user/get-playlist", item.data(), function (rs) {
                if (rs.data) {
                    for (x in rs.data) {
                        zmp3SongTool.buildPlaylistItem(rs.data[x], con);
                    }
                    if ($.isFunction(cb))
                        cb();
                }
            });
        } else if ($.isFunction(cb))
            cb();
    }
};
var zmp3Login = {
    succCallback: '',
    error: 0,
    isZalo: false,
    isCall114: false,
    init: function () {
        var box = $('#loginBox');
        $('.fn-zalo', box).click(function () {
            zmp3Login.isZalo = true;
            zmp3Login.show();
            return false;
        });
        $('.fn-zingid', box).click(function () {
            zmp3Login.isZalo = false;
            zmp3Login.show();
            return false;
        });
    },
    show: function (cb) {
        this.succCallback = cb;
        if (!MP3.ACCOUNT_ID) {
            var box = $('#loginBox');
            if (this.isZalo) {
                $('.fn-zingid', box).removeClass('active');
                $(this).addClass('active');
                $('.fn-content', box).html('<iframe src="' + MP3.MP3_URL + '/auth/zalo/access_token" style="border:none;"></iframe>');
            } else {
                $('.fn-zalo', box).removeClass('active');
                $(this).addClass('active');
                loadScript('http://id.zaloapp.com/open-widget?f=3U9FGM10004');
                $.get('/json/user/get-loginbox',
                        function (data) {
                            if (data.html) {
                                $('.fn-content', box).html(data.html);
                                box.removeClass('none');
                                zmp3UI.bodyMask(1);
                                $('input[name=u]').focus();
                                $('form', box).submit(function () {
                                    var iuser = $('input[name=u]');
                                    var ipwd = $('input[name=p]');
                                    if (iuser.val().trim().length < 2) {
                                        zmp3Login.showMsg('Tên đăng nhập không hợp lệ.');
                                        iuser.focus();
                                        return false;
                                    } else if (ipwd.val().trim().length < 2) {
                                        zmp3Login.showMsg('Vui lòng nhập mật khẩu.');
                                        ipwd.focus();
                                        return false;
                                    }
                                    if ($('#longtime').prop('checked')) {
                                        $('#u1').val($('#u1').val() + '&longtime=1');
                                        $('#fp').val($('#fp').val() + '&longtime=1');
                                    } else {
                                        $('#u1').val($('#u1').val() + '&longtime=0');
                                        $('#fp').val($('#fp').val() + '&longtime=0');
                                    }
                                });
                            } else if (data.userid) {
                                zmp3UI.buildInfo(data);
                            }
                        }, 'json');
            }
            return false;
        } else if ($.isFunction(this.succCallback)) {
            this.succCallback();
        }
        return true;
    },
    showMsg: function (msg) {
        $('#loginBox').removeClass('none');
        $('#loginBox .fn-msg').removeClass('none').html(msg);
    },
    process: function (e, msg) {
        this.error = e;
        if (e != 0 && e != -113) {
            if (e == -114) {
                if (!this.isCall114) {
                    $.getJSON('http://me.zing.vn/cp?url=' + MP3.MP3_URL + '&callback=?', function () {
                        //auto click btn login                         
                        $('#loginBox .frm-button').click();
                        try {
                            document.getElementById("loginBox").getElementsByClassName("frm-button")[0].disabled = true;
                        } catch (e) {
                            console.log('Exception in disable button login');
                        }
                    });
                    this.isCall114 = true;
                }
                setTimeout(function () {
                    location.href = location.href;
                }, 3000);
            } else {
                this.showMsg(msg);
            }
        } else {
            $.ajax({
                url: "/login/set-zmsid",
                method: "GET",
            }).done(function (rs) {
                zmp3UI.profile(true);
            });
        }
    },
    zaloProcess: function () {
        zmp3UI.profileLoginByZalo(true);
    }
};
var zmp3Suggest = {
    lastQ: '',
    tplArtist: null,
    lastcall: 0,
    tplAlbum: null,
    tplSong: null,
    tplVideo: null,
    timeoutHandle: null,
    firstRequestTopKeyword: false,
    retTopKeyword: null,
    init: function () {
        var sugBox = $('#sug');
        var resBox = $('.fn-result', sugBox);
        if (MP3.IS_PC) {
            $('input[name="q"]').focus();
        }
        if (location.pathname.search('/tim-kiem/') != -1) {
            $('form', sugBox).attr('action', location.pathname);
        }
        $(window).disablescroll();
        $(window).disablescroll('undo');
        var pattern = new RegExp('q=(.*?)(&|$)');
        var matches = pattern.exec(location.search);
        if (matches)
            $('input[name=q]', sugBox).val(decodeURIComponent(decodeURI(matches[1]).replace(new RegExp('\\+', 'g'), ' ')));
        if (document.getElementById('tplSugArtist') !== null) {
            tplArtist = document.getElementById('tplSugArtist').cloneNode(true);
        }
        if (document.getElementById('tplSugAlbum') !== null) {
            tplAlbum = document.getElementById('tplSugAlbum').cloneNode(true);
        }
        if (document.getElementById('tplSugSong') !== null) {
            tplSong = document.getElementById('tplSugSong').cloneNode(true);
        }
        if (document.getElementById('tplSugVideo') !== null) {
            tplVideo = document.getElementById('tplSugVideo').cloneNode(true);
        }
        if (document.getElementById('tplTopKeyword') !== null) {
            tplTopKeyword = document.getElementById('tplTopKeyword').cloneNode(true);
        }
        //        $('#sugResult').mCustomScrollbar({scrollbarPosition: 'outside', autoHideScrollbar: true, autoExpandScrollbar: true, mouseWheel: {scrollAmount: 1000, preventDefault: true}});
        resBox.mCustomScrollbar({
            scrollInertia: 0,
            scrollbarPosition: 'outside',
            autoHideScrollbar: true,
            autoExpandScrollbar: true,
            keyboard: {
                enable: true
            },
            mouseWheel: {
                preventDefault: true
            }
        });
        this.clearResult();
        onBlurBind('input[name="q"]', function () {
            resBox.addClass('none');
        });
        $('form', sugBox).submit(function () {
            var el = $('.fn-list .fn-item.active', resBox);
            if (el.length > 0) {
                location.href = $('.fn-link', el).attr('href');
                return false;
            }
            if ($.trim($('input[name="q"]').val()).length < 1)
                return false;
        });
        $('input[name="q"]', sugBox).keydown(function (e) {
            if (e.keyCode === 13) {
                var el = $('.fn-list .fn-item.active', resBox);
                if (el.length > 0) {
                    //location.href = $('.fn-link', el).attr('href');
                    return false;
                }
            } else {
                var els = $('.fn-list .fn-item', resBox);
                if ((e.keyCode === 38 || e.keyCode === 40)) {
                    if (els.length > 0) {
                        var c = -1;
                        for (var i = 0; i < els.length; i++) {
                            if ($(els[i]).hasClass('active')) {
                                c = i;
                                break;
                            }
                        }
                        els.removeClass('active');
                        switch (e.keyCode) {
                            case 38:
                                (c > 0) ? $(els[c - 1]).addClass('active') : $(els[els.length - 1]).addClass('active');
                                break;
                            case 40:
                                (c < els.length - 1) ? $(els[c + 1]).addClass('active') : $(els[0]).addClass('active');
                                break;
                        }
                    }
                    return false;
                } else if (e.keyCode < 65 && e.shiftKey || e.keyCode > 165 && e.keyCode < 200 || this.value.length < 1 && e.keyCode == 32) {
                    /* Cho phep su dung cac ki tu !.() */
                    //                    if (e.keyCode != 48 && e.keyCode != 55 && e.keyCode != 57 && e.keyCode != 190) {
                    //                      return false;
                    //                  }
                }
            }

        }).keyup(function (e) {
            if (!(e.keyCode < 65 && e.shiftKey || e.keyCode > 165 && e.keyCode < 200 || this.value.length < 1 && e.keyCode == 32)) {
                if (zmp3Suggest.timeoutHandle) {
                    clearTimeout(zmp3Suggest.timeoutHandle);
                    zmp3Suggest.timeoutHandle = null;
                }
                var that = this;
                zmp3Suggest.timeoutHandle = setTimeout(function () {
                    zmp3Suggest.suggest($(that));
                }, 500);
                if (e.keyCode == 32) {
                    clearTimeout(zmp3Suggest.timeoutHandle);
                    zmp3Suggest.timeoutHandle = null;
                    zmp3Suggest.suggest($(that));
                }
            }
        }).focus(function () {
            zmp3Suggest.suggest($(this));
        }).click(function () {
            //zmp3Suggest.showTopKeyword();
            zmp3Suggest.suggest($(this));
        });
        resBox.height($(window).height() - 42);
    },
    clearResult: function () {
        $('#sugResult').data('current', -1);
        $('#tplSugArtist').remove();
        $('#tplSugAlbum').remove();
        $('#tplSugSong').remove();
        $('#tplSugVideo').remove();
    },
    resize: function () {
        $('#sugResult').height('auto');
        /*if ($('#sugResult ul').first().height() <= $('#sugResult').height()) {
         $('#sugResult').height($('#sugResult ul').first().height());
         } else {
         $('#sugResult').height($(window).height() - 42);
         }*/
    },
    suggest: function (inp) {
        var val = '';
        var valLength = 0;
        if (typeof inp === 'string') {
            val = inp;
            valLength = inp.length;
        } else {
            val = inp.val();
            valLength = inp.val().length;
        }
        if (valLength > 1) {
            $('#sugTopKeyword').addClass('none');
            var now = $.now();
            if (this.lastQ !== val && this.lastcall + 50 < now) {
                zmp3Suggest.lastcall = now;
                zmp3Suggest.lastQ = val;
                $.getJSON('http://ac.mp3.zing.vn/complete/desktop?type=artist,album,video,song&num=3&callback=?', {
                    query: zmp3Suggest.lastQ
                },
                        function (ret) {
                            if (zmp3Suggest.lastQ === val) {
                                //$('#sugTopKeyword .fn-list').empty();
                                $('#sugTop .fn-list').empty();
                                $('#sugSong .fn-list').empty();
                                $('#sugAlbum .fn-list').empty();
                                $('#sugVideo .fn-list').empty();
                                $('#sugArtist .fn-list').empty();
                                if (ret.data) {
                                    $(tplArtist).data('highlight', val);
                                    $(tplSong).data('highlight', val);
                                    $(tplAlbum).data('highlight', val);
                                    $(tplVideo).data('highlight', val);
                                    if (typeof ret.top !== 'undefined' && ret.top != '') {
                                        $('#sugTop').removeClass('none');
                                        if (typeof ret.top.type !== 'undefined' && ret.top.type != '') {
                                            switch (ret.top.type) {
                                                case 'song':
                                                    $('#sugTop .ics.zicon').addClass('ics-song');
                                                    $('#sugTop .ics.zicon').removeClass('ics-artist');
                                                    $('#sugTop .ics.zicon').removeClass('ics-album');
                                                    $('#sugTop .ics.zicon').removeClass('ics-video');

                                                    var item = ret.top;
                                                    var tpl1 = tplSong.cloneNode(true);
                                                    $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                                    $('.fn-artist', tpl1).addClass('fn-highlight').data('highlight', val).html(item.artist);
                                                    var href = '/bai-hat/' + item.name.stripViet('-') + '-' + item.artist.stripViet('-') + '/' + item.id + '.html';
                                                    $('a.fn-link', tpl1).attr('title', item.name + ' - ' + item.artist).attr('href', href);
                                                    $(tpl1).removeClass('none');
                                                    $('#sugTop .fn-list').append(tpl1);
                                                    break;
                                                case 'album':
                                                    $('#sugTop .ics.zicon').addClass('ics-album');
                                                    $('#sugTop .ics.zicon').removeClass('ics-song');
                                                    $('#sugTop .ics.zicon').removeClass('ics-artist');
                                                    $('#sugTop .ics.zicon').removeClass('ics-video');

                                                    var item = ret.top;
                                                    var tpl1 = tplAlbum.cloneNode(true);
                                                    $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                                    $('.fn-artist', tpl1).addClass('fn-highlight').data('highlight', val).html(item.artist);
                                                    var href = '/album/' + item.name.stripViet('-') + '-' + item.artist.stripViet('-') + '/' + item.id + '.html';
                                                    $('a.fn-link', tpl1).attr('title', item.name + ' - ' + item.artist).attr('href', href);
                                                    $('img.fn-thumb', tpl1).attr('src', 'http://image.mp3.zdn.vn/thumb/94_94/' + item.thumb).attr('alt', item.name);
                                                    $(tpl1).removeClass('none');
                                                    $('#sugTop .fn-list').append(tpl1);
                                                    break;
                                                case 'artist':
                                                    $('#sugTop .ics.zicon').addClass('ics-artist');
                                                    $('#sugTop .ics.zicon').removeClass('ics-song');
                                                    $('#sugTop .ics.zicon').removeClass('ics-album');
                                                    $('#sugTop .ics.zicon').removeClass('ics-video');
                                                    var item = ret.top;
                                                    var tpl1 = tplArtist.cloneNode(true);
                                                    var link = '/nghe-si/' + (item.name_stripviet ? item.name_stripviet : item.name.stripViet('-'));
                                                    var artistId = item.id;
                                                    $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                                    $('a.fn-link', tpl1).attr('title', item.name).attr('href', link).attr('data-id', artistId);
                                                    $('img.fn-thumb', tpl1).attr('src', 'http://image.mp3.zdn.vn/thumb/94_94/' + item.thumb).attr('alt', item.name);
                                                    $(tpl1).removeClass('none');
                                                    $('#sugTop .fn-list').append(tpl1);
                                                    break;
                                                case 'video':
                                                    $('#sugTop .ics.zicon').addClass('ics-video');
                                                    $('#sugTop .ics.zicon').removeClass('ics-artist');
                                                    $('#sugTop .ics.zicon').removeClass('ics-album');
                                                    $('#sugTop .ics.zicon').removeClass('ics-song');
                                                    var item = ret.top;
                                                    var tpl1 = tplVideo.cloneNode(true);
                                                    $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                                    $('.fn-artist', tpl1).addClass('fn-highlight').data('highlight', val).html(item.artist);
                                                    var href = '/video-clip/' + item.name.stripViet('-') + '-' + item.artist.stripViet('-') + '/' + item.id + '.html';
                                                    $('a.fn-link', tpl1).attr('title', item.name + ' - ' + item.artist).attr('href', href);
                                                    $('img.fn-thumb', tpl1).attr('src', 'http://image.mp3.zdn.vn/thumb/128_72/' + item.thumb).attr('alt', item.name);
                                                    $(tpl1).removeClass('none');
                                                    $('#sugTop .fn-list').append(tpl1);
                                                    break;
                                            }
                                        }
                                    } else {
                                        $('#sugTop').addClass('none');
                                    }
                                    if (ret.data[0].artist.length > 0) {
                                        for (x in ret.data[0].artist) {
                                            var item = ret.data[0].artist[x];
                                            var tpl1 = tplArtist.cloneNode(true);
                                            var link = '/nghe-si/' + (item.name_stripviet ? item.name_stripviet : item.name.stripViet('-'));
                                            var artistId = item.id;
                                            $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                            $('a.fn-link', tpl1).attr('title', item.name).attr('href', link).attr('data-id', artistId);
                                            $('img.fn-thumb', tpl1).attr('src', 'http://image.mp3.zdn.vn/thumb/94_94/' + item.thumb).attr('alt', item.name);
                                            $(tpl1).removeClass('none');
                                            $('#sugArtist .fn-list').append(tpl1);
                                        }
                                        $('#sugArtist').removeClass('none');
                                    } else {
                                        $('#sugArtist').addClass('none');
                                    }
                                    if (ret.data[1].album.length > 0) {
                                        for (x in ret.data[1].album) {
                                            var item = ret.data[1].album[x];
                                            var tpl1 = tplAlbum.cloneNode(true);
                                            $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                            $('.fn-artist', tpl1).addClass('fn-highlight').data('highlight', val).html(item.artist);
                                            var href = '/album/' + item.name.stripViet('-') + '-' + item.artist.stripViet('-') + '/' + item.id + '.html';
                                            $('a.fn-link', tpl1).attr('title', item.name + ' - ' + item.artist).attr('href', href);
                                            $('img.fn-thumb', tpl1).attr('src', 'http://image.mp3.zdn.vn/thumb/94_94/' + item.thumb).attr('alt', item.name);
                                            $(tpl1).removeClass('none');
                                            $('#sugAlbum .fn-list').append(tpl1);
                                        }
                                        $('#sugAlbum').removeClass('none');
                                    } else {
                                        $('#sugAlbum').addClass('none');
                                    }
                                    if (ret.data[2].video.length > 0) {
                                        for (x in ret.data[2].video) {
                                            var item = ret.data[2].video[x];
                                            var tpl1 = tplVideo.cloneNode(true);
                                            $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                            $('.fn-artist', tpl1).addClass('fn-highlight').data('highlight', val).html(item.artist);
                                            var href = '/video-clip/' + item.name.stripViet('-') + '-' + item.artist.stripViet('-') + '/' + item.id + '.html';
                                            $('a.fn-link', tpl1).attr('title', item.name + ' - ' + item.artist).attr('href', href);
                                            $('img.fn-thumb', tpl1).attr('src', 'http://image.mp3.zdn.vn/thumb/128_72/' + item.thumb).attr('alt', item.name);
                                            $(tpl1).removeClass('none');
                                            $('#sugVideo .fn-list').append(tpl1);
                                        }
                                        $('#sugVideo').removeClass('none');
                                    } else {
                                        $('#sugVideo').addClass('none');
                                    }
                                    if (ret.data[3].song.length > 0) {
                                        for (x in ret.data[3].song) {
                                            var item = ret.data[3].song[x];
                                            var tpl1 = tplSong.cloneNode(true);
                                            $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', val).html(item.name);
                                            $('.fn-artist', tpl1).addClass('fn-highlight').data('highlight', val).html(item.artist);
                                            var href = '/bai-hat/' + item.name.stripViet('-') + '-' + item.artist.stripViet('-') + '/' + item.id + '.html';
                                            $('a.fn-link', tpl1).attr('title', item.name + ' - ' + item.artist).attr('href', href);
                                            $(tpl1).removeClass('none');
                                            $('#sugSong .fn-list').append(tpl1);
                                        }
                                        $('#sugSong').removeClass('none');
                                    } else {
                                        $('#sugSong').addClass('none');
                                    }
                                    $('#sugResult').removeClass('none');
                                    zmp3UI.highlight();
                                }
                            }
                            zmp3Suggest.resize();
                        });
            } else {
                $('#sugResult').removeClass('none');
                zmp3Suggest.resize();
            }
        } else {
            this.clearResult();
        }
    },
    showTopKeyword: function () {
        if (!this.firstRequestTopKeyword) {
            this.firstRequestTopKeyword = true;
            $.getJSON('http://ac.mp3.zing.vn/complete/topkeyword?callback=?', {}, function (ret) {
                zmp3Suggest.retTopKeyword = ret;
                if ($('#sug .input-txt').val() === '') {
                    $('#sugTop').addClass('none');
                    $('#sugArtist').addClass('none');
                    $('#sugSong').addClass('none');
                    $('#sugVideo').addClass('none');
                    $('#sugAlbum').addClass('none');
                    if (ret.data.length > 0) {
                        for (x in ret.data) {
                            $('#sugTopKeyword').removeClass('none');
                            var item = ret.data[x];

                            var tpl1 = tplTopKeyword.cloneNode(true);
                            $('.fn-name', tpl1).addClass('fn-highlight').data('highlight', '').html(item);
                            $('.fn-name', tpl1).addClass(x);
                            $('.fn-name.' + x, tpl1).click(function () {
                                var val = $(this).context.innerText;
                                zmp3Suggest.suggest(val);
                                $('#sug .input-txt').val(val);
                            });

                            $(tpl1).removeClass('none');
                            $('#sugTopKeyword .fn-list').append(tpl1);
                        }
                        zmp3UI.highlight();
                        $('#sugResult').removeClass('none');
                    }
                }
                zmp3Suggest.resize();
            });
        } else {
            if (this.retTopKeyword != null) {
                if ($('#sug .input-txt').val() === "") {
                    $('#sugTop').addClass('none');
                    $('#sugArtist').addClass('none');
                    $('#sugSong').addClass('none');
                    $('#sugVideo').addClass('none');
                    $('#sugAlbum').addClass('none');
                    $('#sugResult').removeClass('none');
                    $('#sugTopKeyword').removeClass('none');
                }
            }
        }
    }
};
var ZMEInfo = {
    size: 50,
    uid: [],
    elId: [],
    listId: [],
    listUname: [],
    renderZMEAvatar: function () {
        var k = $('.fn_zme_info');
        for (var i = 0; i < k.length; i++) {
            var el = $(k[i]);
            if (el.attr('data_uid')) {
                var uid = parseInt(el.attr('data_uid'));
                if (uid > 0) {
                    var elRef = el.data('ref') ? el.data('ref') : '.fn_zme_info[data_uid=' + el.attr('data_uid') + ']';
                    this.listId.push(el.attr('data_uid') + '?' + elRef);
                }
            } else if (el.attr('data_uname')) {
                if (el.attr('data_uname').length > 2) {
                    var elRef = el.data('ref') ? el.data('ref') : ".fn_zme_info[data_uname='" + el.attr('data_uname') + "']";
                    this.listUname.push(el.attr('data_uname') + '?' + elRef);
                }
            }
            if (el.data('thumbsize')) {
                this.size = parseInt(el.data('thumbsize'));
            }
        }
        if (this.listId.length || this.listUname.length) {
            var url = 'http://widget.me.zing.vn/api/widget?method=getMixEx&size=50&displaylist=&displaylist_ex=&ava_list=' + this.listUname.join('|,') + '&ava_list_id=' + this.listId.join('|,');
            loadScript(url);
            this.listId = [];
            this.listUname = [];
        }
    }
};

function fA(id, thumb, uname, dname) {
    var els = $(id);
    if (els.length) {
        for (var i = 0; i < els.length; i++) {
            var el = $(els[i]);
            var img = $(el.data('thumb'));
            var link = $(el.data('link'));
            var eD = $(el.data('dname'));
            var zme = 'http://me.zing.vn/u/';
            if (img.length) {
                img.each(function () {
                    if (this.tagName == 'IMG')
                        $(this).attr('src', thumb).attr('alt', dname);
                });
            }
            if (link.length) {
                link.each(function () {
                    if (this.tagName == 'A')
                        $(this).attr('href', zme + uname).attr('title', dname);
                });
            }
            if (eD.length) {
                eD.each(function () {
                    $(this).html(dname);
                    if (this.tagName == 'A')
                        $(this).attr('href', zme + uname).attr('title', dname);
                });
            }
        }
        el.remove();
    }

}
var zmp3UI = {
    initBefore: false,
    init: function () {
        if (!this.initBefore) {
            this.profile();
        }
        this.followInit();
        $('.fn-tooltip').click(function () {
            if (!$(this).data('show')) {
                $($(this).data('box')).removeClass('none');
                $(this).data('show', true);
            } else {
                $($(this).data('box')).addClass('none');
                $(this).data('show', false);
            }
            false;
        });
        $('.fn-show').length > 0 && $('.fn-show').click(function () {
            zmp3UI.showhide($($(this).data('box')));
            return false;
        });
        $('.fn-showhere').length > 0 && $('.fn-showhere').click(function () {
            var offset = $(this).offset();
            var top = offset.top,
                    box = $($(this).data('box'));
            if (top + box.height() + 20 > $(window).height() + $(window).scrollTop()) {
                top -= box.height() + 12;
            } else {
                top += $(this).height();
            }
            box.css({
                top: top + 'px',
                left: offset.left + 6 - box.width() / 2 + 'px'
            });
            //box.toggle();
            if ($(box).hasClass("none")) {
                $(box).removeClass("none");
            } else {
                $(box).addClass("none");
            }
            /*
             if (!$(this).data('show')) {
             $(this).data('show', true);
             } else {
             $($(this).data('box')).addClass('none');
             $(this).data('show', false);
             }*/
            return false;
        });
        $('.fn-showhide').length > 0 && $('.fn-showhide').click(function () {
            $($(this).data('show')).removeClass('none');
            $($(this).data('hide')).addClass('none');
            return false;
        });
        if ($('.fn-cb').length) {
            $('.fn-cb').click(function () {
                var fn = window[$(this).data('fn')];
                if (typeof fn != 'undefined') {
                    fn['clickCb'].apply(fn, [this]);
                }
                return false;
            });
        }
        $('.fn-expand').each(function () {
            var box = $($(this).data('box'));
            var min = parseInt(box.data('min'));
            if (min >= box[0].scrollHeight) {
                box.css('height', 'auto');
                $(this).remove();
            }
        });
        $('.fn-expand').click(function () {
            var box = $($(this).data('box'));
            if (!box.data('expand')) {
                $(this).data('top', $(window).scrollTop());
                box.css('height', box.data('max'));
                box.data('expand', 1);
                $(this).html('Rút gọn');
            } else {
                box.css('height', box.data('min'));
                box.data('expand', 0);
                $(this).html('Xem thêm');
                $(window).scrollTop($(this).data('top'));
            }
            return false;
        });
        $('.fn-number').each(function () {
            $(this).html(zmp3Number.format($(this).html()));
        });
        $('.fn-date').each(function () {
            $(this).html(zmp3DateTime.format($(this).html()));
        });
        //        $('.fn-scrollbar').each(function () {
        //            var options = {
        //                scrollInertia: 0,
        //                scrollbarPosition: 'outside',
        //                autoExpandScrollbar: true,
        //                mouseWheel: {normalizeDelta: true,  deltaFactor: 100, preventDefault: true}
        //            };
        //            if ($(this).data('snapmount')) {
        //                options.snapAmount = $(this).data('snapmount');
        //            }
        //            if ($(this).data('deltafactor'))
        //                options.mouseWheel.deltafactor = $(this).data('deltafactor');
        //            $(this).mCustomScrollbar(options);
        //
        //        });
        $('.fn-scrollbar').mCustomScrollbar({
            scrollInertia: 0,
            scrollbarPosition: 'outside',
            autoHideScrollbar: true,
            autoExpandScrollbar: true,
            mouseWheel: {
                preventDefault: true
            }
        });
        $('.fn-sharelink').click(function () {
            zmp3Share.share($(this));
            //z3Log.listenShareBehavier($(this));
            return false;
        });
        $('form.fn-ajax').submit(function () {
            var fn = 'undefined';
            if ($(this).data('cb'))
                var fn = window[$(this).data('cb')];
            $.post($(this).attr('action'), $(this).serialize(), function (rs) {
                if (typeof fn != 'undefined') {
                    fn['submitCb'].apply(fn, [rs, this]);
                }
            });
            return false;
        });
        $('.fn-close').click(function () {
            var fn = window[$(this).data('cb')];
            if (typeof fn != 'undefined') {
                fn['closeCb'].apply(fn, [this]);
            }
            zmp3UI.bodyMask(0);
            $($(this).data('box')).addClass('none');
            return false;
        });
        $('.fn-param').click(function () {
            location.href = zmp3UI.replaceUrlParam($(this));
            return false;
        });
        var songbar = $('.fn-bar');
        var highest = 0;
        for (var i = 0; i < songbar.length; i++) {
            var bar = $(songbar[i]);
            var t = parseInt(bar.data('total'));
            if (!isNaN(t) && highest < t) {
                highest = t;
            }
        }
        for (var i = 0; i < songbar.length; i++) {
            var bar = $(songbar[i]);
            var t = parseInt(bar.data('total'));
            if (!isNaN(t)) {
                t = 100 * t / highest;
                if (t < 95)
                    t += 4;
                bar.css('width', t + '%');
            }
        }
        zmp3Toolbar.init();
        //ZMEInfo.renderZMEAvatar();
        $('.fn-time').each(function () {
            $(this).html(zmp3DateTime.format($(this).html()));
        });
        if (location.host.search("lt.mp3.zing.vn") === -1) {
            (function (d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id))
                    return;
                js = d.createElement(s);
                js.id = id;
                js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=1603079626622346&version=v2.7";
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
        }
        this.highlight();
        if (!this.initBefore) {
            $('.fn-banner-off').click(function () {
                if (MP3.VIP) {
                    zmp3UI.setBannerOff(!MP3.BANNER_OFF, true);
                } else if (typeof ZVip != 'undefined') {
                    ZVip.Fpackage();
                }
                return false;
            });
            this.initBefore = true;
        }
        /*
         $('.fn-total-play').each(function () {
         if ($(this).data('id')) {
         var _this = this;
         $.get(MP3.MP3_URL +  '/xhr/song/get-total-play', $(this).data(), function (rs) {
         if (rs.total_play >= 0) {
         $(_this).html(zmp3Number.format(rs.total_play));
         }
         });
         }
         });*/

        $('.fn-slide-show').each(function () {
            var _this = this;
            var opts = {
                dots: false,
                prevArrow: $('.fn-prev', this),
                nextArrow: $('.fn-next', this),
                infinite: true,
                speed: 1500,
                slidesToShow: 6,
                slidesToScroll: 6
            };
            if ($(this).data() !== null) {
                $.extend(opts, opts, $(this).data());
            }
            if ($(this).data('customNav') !== null) {
                var nav = $($(this).data('customNav'));
                $('.fn-slide', this).slick(opts).on('beforeChange', function (e, slick, cu, ne) {
                    nav.removeClass('active');
                    $(nav[(ne / opts.slidesToShow)]).addClass('active');
                });
                $(nav[0]).addClass('active');
                nav.click(function () {
                    $('.fn-slide', _this).slick('slickGoTo', $(this).data('ord'));
                    return false;
                });
            } else {
                $('.fn-slide', this).slick(opts);
            }
            if ($(_this).data('cb') !== null && typeof window[$(_this).data('cb')] != 'undefined') {
                $('.fn-slide', _this).on('afterChange', function (e, sl, cu) {
                    var fn = window[$(_this).data('cb')];
                    if (typeof fn != 'undefined') {
                        fn['afterChange'].apply(fn, [sl, cu]);
                    }
                });
            }
        });
        $('a[tracking]').click(function () {
            return zmp3Common.trackingOn($(this), '/tracking');
        });
        var hour = new Date().getHours();
        if (hour > 18 && hour < 21) {
            $('.fn-ytsubscribe').removeClass('none');
        }
    },
    bodyMask: function (show) {
        if (show) {
            $('.body-mask').removeClass('none');
        } else {
            $('.body-mask').addClass('none');
        }
    },
    showmodal: function (el) {
        this.showhide($($(el).data('box')), function (show) {
            zmp3UI.bodyMask(show);
        });
        return false;
    },
    showhide: function (box, cbf) {
        if (box.hasClass('none')) {
            box.css('display', 'none');
            box.removeClass('none');
        }
        box.slideToggle(200, function () {
            if ($.isFunction(cbf))
                cbf(false);
        });
    },
    highlight: function () {
        var matches = $('.fn-highlight');
        if (matches.length) {
            for (var i = 0; i < matches.length; i++) {
                var el = $(matches[i]);
                if (el.data('highlight')) {
                    var parts = el.html().split('/');
                    var html = this.matchMaker(parts.length > 1 ? parts[1].trim() : parts[0], el.data('highlight').stripViet().toLowerCase());
                    if (html) {
                        el.html((parts.length > 1 ? parts[0] + '/ ' : '') + html);
                    }
                }
            }
            matches.removeClass('fn-highlight');
        }
    },
    matchMaker: function (str, pattern) {
        var uhtml = str.stripViet().toLowerCase();
        var start = uhtml.indexOf(pattern);
        if (start > -1) {
            return str.substr(0, start) + '<strong class="mark">' + str.substr(start, pattern.length) + '</strong>' + str.substr(start + pattern.length, str.length);
        }
        return false;
    },
    replaceUrlParam: function (el) {
        var pattern, newUrl, url = el.attr('href'),
                param = el.data('param'),
                val = el.data('value');
        if (!url || url.length < 10) {
            url = location.href;
        }
        /* Xử lý ngoại lệ cho error genre*/
        if (param == "genre") {
            if (url.indexOf("?genre=") != '-1') {
                url = url.replace(/genre=[0-9]&/g, "?");
                url = url.replace(/genre=[0-9]/g, "");
            }
            if (url.indexOf("&genre=") != '-1') {
                url = url.replace(/&genre=[0-9]/g, "");
            }
        }
        /* end error genre */
        if (el.data('op') == 'remove') {
            pattern = new RegExp('(\\&|\\?)' + param + '=' + val);
            newUrl = url.replace(pattern, '$1').replace('&&', '&').replace(new RegExp('\\&$'), '&');
        } else if (el.data('op') == 'add') {
            pattern = new RegExp('(\\&|\\?)' + param + '=' + val);
            if (!pattern.test(url)) {
                newUrl = url + (url.indexOf('?') > -1 ? '&' : '?') + param + '=' + val;
            }
        } else {
            var pattern = new RegExp('(\\&|\\?)(' + param + '=).*?(&|$)');
            if (pattern.test(url)) {
                newUrl = val && val.length > 0 ? url.replace(pattern, '$1$2' + val + '$3') : url.replace(pattern, '$3');
            } else if (typeof val !== 'undefined') {
                newUrl = url + (url.indexOf('?') ? '&' : '?') + param + '=' + val;
            }
            if (newUrl === url) {
                newUrl = newUrl + (newUrl.indexOf('?') > 0 ? '&' : '?') + param + '=' + val;
            }
        }

        newUrl = newUrl.replace("??", "?");
        return newUrl;
    },
    setBannerOff: function (isOff, refresh) {
        MP3.BANNER_OFF = isOff;

        var date = new Date();
        var minutes = 43200; //30days
        date.setTime(date.getTime() + (minutes * 60 * 1000));
        var valAds = MP3.BANNER_OFF ? 1 : 0;
        $.cookie('BANNER_OFF', valAds, {
            path: '/',
            domain: 'zing.vn',
            expires: date
        });

        if (MP3.BANNER_OFF) {
            $('._bannerAds').remove();
            $('.fn-banner-off').removeClass('active').each(function () {
                $(this).html($(this).html().replace('Tắt', 'Bật'));
            });
        } else if (refresh) {
            location.reload();
        }
    },
    showMsg: function (msg, t, d) {
        t = t == 0 ? 'success' : 'error';
        if (!d)
            d = 5000;
        var tpl = $('#msgBox .fn-item')[0].cloneNode(true);
        $('#msgBox').append(tpl);
        $(tpl).removeAttr('id').addClass(t).removeClass('none');
        $('.fn-content', tpl).html(msg);
        setTimeout(function () {
            $(tpl).fadeOut("slow", function () {
                $(tpl).remove();
            });
        }, d);
    },
    confirm: function (title, msg, cbFunc) {
        var tpl = $('#confirmBox .fn-item')[0].cloneNode(true);
        $(tpl).remove();
        $('#confirmBox').append(tpl);
        $(tpl).removeAttr('id').removeClass('none');
        $('.fn-title', tpl).html(title);
        $('.fn-content', tpl).html(msg);
        $('.fn-ok', tpl).click(function () {
            $(tpl).remove();
            if ($.isFunction(cbFunc))
                cbFunc(true);
            return false;
        });
        $('.fn-close', tpl).click(function () {
            $(tpl).remove();
            if ($.isFunction(cbFunc))
                cbFunc(false);
            return false;
        });
    },
    sidebar: function () {
        var sidebar = $('.fn-sidebar-fixed');
        if (sidebar.length > 0) {
            var viewTop = $(window).scrollTop(),
                    fheight = 0;
            var wheight = $(window).height();
            var qheight = $('.quick-link').height();
            var conTop = sidebar.siblings('div').offset().top;
            if (viewTop < conTop + qheight) {
                sidebar.css('margin-top', viewTop > 20 ? 20 - viewTop : viewTop + 'px');
            } else {
                sidebar.css('margin-top', 20 - conTop + 'px');
                if ($('footer').offset().top - viewTop < wheight) {
                    fheight = $('footer').height() + 20 + qheight;
                }
            }
            var els = $('.fn-scrollbar', sidebar);
            for (var i = 0; i < els.length; i++) {
                var el = $(els[i]);
                var sub = fheight + el.offset().top - viewTop;
                el.height(wheight - sub - 30 + 'px');
            }
        }
    },
    buildItem: function (tpl1, item, prefix) {
        var itemId = (prefix ? prefix : 'song') + item.id;
        //        var tpl1 = tpl.cloneNode(true);        
        $(tpl1).attr('id', itemId).data('id', item.id).data('code', item.code || 0).removeClass('none');
        $(tpl1).attr('data-id', item.id);
        $(tpl1).attr('data-code', item.code || 0);
        $('.fn-link', tpl1).attr('href', item.link).attr('title', item.name + ' - ' + item.artist);
        $('.fn-name', tpl1).html(item.name);
        if (item.video_link) {
            $('.fn-video_link', tpl1).attr('href', item.video_link).attr('title', 'Xem MV ' + item.name + ' - ' + item.artist);
        } else {
            $('.fn-video_link', tpl1).remove();
        }
        var tplA = $('.fn-artist', tpl1);
        $('.fn-artist_list', tpl1).empty();
        for (var x in item.artists) {
            var tplA1 = tplA[0].cloneNode(true);
            $(tplA1).empty().append('<a href="' + item.artists[x].link + '" title="' + (item.artists.length < 2 ? item.artist : item.artists[x].name) + '">' + item.artists[x].name + '</a>');
            $('.fn-artist_list', tpl1).append(tplA1);
            if (parseInt(x) < item.artists.length - 1) {
                $('.fn-artist_list', tpl1).append('<span>, </span>');
            }
        }
        $('.fn-thumb', tpl1).attr('src', item.thumbnail);
        if ($('.fn-addto', tpl1).length) {
            $('.fn-dlsong', tpl1).data('item', '#' + itemId);
            $('.fn-addto', tpl1).data('item', '#' + itemId);
            $('.fn-share', tpl1).data('item', '#' + itemId).attr('href', item.link);
        }
        return tpl1;
    },
    getContentWidth: function () {
        return $('.wrap-body .wrap-content').width();
    },
    followInit: function () {
        var fl = $('.fn-followed');
        if (fl.length > 0) {
            var ids = [],
                    rids = [],
                    uids = [];
            for (var i = 0; i < fl.length; i++) {
                if ($(fl[i]).data('id'))
                    ids.push($(fl[i]).data('id'));
                else if ($(fl[i]).data('rid'))
                    rids.push($(fl[i]).data('rid'));
                else if ($(fl[i]).data('uid'))
                    uids.push($(fl[i]).data('uid'));
            }
            $.get('/json/artist/get-follow', {
                ids: ids.join(','),
                rids: rids.join(','),
                uids: uids.join(',')
            }, function (rs) {
                if (rs.data) {
                    for (var i = 0; i < fl.length; i++) {
                        var id = $(fl[i]).data('id') || $(fl[i]).data('rid') || $(fl[i]).data('uid');
                        var num = rs.data[id];
                        if (num >= 0) {
                            $(fl[i]).html(zmp3Number.format(num));
                        }
                    }
                }
            });
            if (MP3.ACCOUNT_ID) {
                $.get('/json/artist/get-artist-followed', function (rs) {
                    if (rs.data) {
                        for (var i = 0; i < rs.data.length; i++) {
                            var el = $('.fn-follow[data-id=' + rs.data[i].id + ']');
                            if (el.length > 0) {
                                var rm = $('.fn-rmitem', el.parent());
                                if (rm.length > 0) {
                                    el.addClass('none');
                                    rm.removeClass('none');
                                } else {
                                    el.addClass('active');
                                }
                            }
                        }
                    }
                });
            }
            $('.fn-follow').click(function () {
                var el = $(this);
                zmp3Login.show(function () {
                    var box = $('.fn-followed[data-id=' + el.data('id') + ']');
                    if (el.hasClass('active')) {
                        zmp3SongTool.removeItem(el, function (rs) {
                            el.removeClass('active');
                            var s = parseInt(box.html());
                            if (s > 0)
                                box.html(s - 1);
                        });
                    } else {
                        $.post('/json/post-follow', el.data(), function (rs) {
                            if (rs.data) {
                                el.addClass('active');
                                $('.fn-followed[data-id=' + el.data('id') + ']').html(rs.data.total);
                                var rm = $('.fn-rmitem', el.parent());
                                if (rm.length > 0) {
                                    el.addClass('none');
                                    rm.removeClass('none');
                                } else {
                                    el.addClass('active');
                                }
                            }
                        });
                    }
                });
                return false;
            });
        }
        this.ufollowInit();
    },
    ufollowInit: function () {
        var fl = $('.fn-ufollowed');
        if (fl.length > 0) {
            var ids = [],
                    rids = [],
                    uids = [];
            for (var i = 0; i < fl.length; i++) {
                if ($(fl[i]).data('id'))
                    ids.push($(fl[i]).data('id'));
            }
            $.get(MP3.MP3_URL + '/json/follow/get-ufollow-num', {
                ids: ids.join(',')
            }, function (rs) {
                if (rs.data) {
                    for (var i = 0; i < fl.length; i++) {
                        var id = $(fl[i]).data('id');
                        var num = rs.data[id];
                        if (num >= 0) {
                            $(fl[i]).html(num);
                        }
                    }
                }
            });
            if (MP3.ACCOUNT_ID) {
                $.get(MP3.MP3_URL + '/json/mydata/get-ufollow-list', function (rs) {
                    if (rs.data) {
                        for (var i = 0; i < rs.data.length; i++) {
                            var el = $('.fn-ufollow[data-id=' + rs.data[i].id + ']');
                            if (el.length > 0) {
                                var rm = $('.fn-rmitem', el.parent());
                                if (rm.length > 0) {
                                    el.addClass('none');
                                    rm.removeClass('none');
                                } else {
                                    el.addClass('active');
                                }
                            }
                        }
                    }
                });
            }
            $('.fn-ufollow').click(function () {
                var el = $(this);
                zmp3Login.show(function () {
                    var box = $('.fn-ufollowed[data-id=' + el.data('id') + ']');
                    if (el.hasClass('active')) {
                        zmp3SongTool.removeItem(el, function (rs) {
                            el.removeClass('active');
                            var s = parseInt(box.html());
                            if (s > 0)
                                box.html(s - 1);
                        });
                    } else {
                        $.post('/json/post-follow', el.data(), function (rs) {
                            if (rs.data) {
                                el.addClass('active');
                                $('.fn-ufollowed[data-id=' + el.data('id') + ']').html(rs.data.total);
                                var rm = $('.fn-rmitem', el.parent());
                                if (rm.length > 0) {
                                    el.addClass('none');
                                    rm.removeClass('none');
                                } else {
                                    el.addClass('active');
                                }
                            }
                        });
                    }
                });
                return false;
            });
        }

    },
    showHide: function (box) {
        if (box.hasClass('none')) {
            box.removeClass('none');
        } else {
            box.addClass('none');
        }
    },
    profile: function (byLogin) {
        $.get('/json/user/get-profile', {
            'is_login': byLogin ? 1 : 0
        },
                function (data) {
                    zmp3UI.buildInfo(data, byLogin);
                }, 'json');
    },
    profileLoginByZalo: function (byLogin) {
        $.get('/json/user/get-profile', {
            'is_login': byLogin ? 1 : 0
        },
                function (data) {
                    zmp3UI.buildZaloInfo(data, byLogin);
                    if (typeof zmp3LogLoginZalo === 'object') {
                        zmp3LogLoginZalo.trackLoginZaloSuccess(data);
                    }
                }, 'json');
    },
    triggerGetCuccessUserInfo: function () {
        var event; // The custom event that will be created

        if (document.createEvent) {
            event = document.createEvent("HTMLEvents");
            event.initEvent("buildUserInfo", true, true);
        } else {
            event = document.createEventObject();
            event.eventType = "buildUserInfo";
        }

        event.eventName = "buildUserInfo";
        /*window.addEventListener('buildUserInfo', function (e) {
         console.log(JSON.stringify(MP3));
         }, false);*/
        if (document.createEvent) {
            document.dispatchEvent(event);
        } else {
            document.fireEvent("on" + event.eventType, event);
        }
    },
    buildInfo: function (data, bylogin) {
        MP3.ACCOUNT_ID = 0;
        if (typeof data.user_zlike_key !== 'undefined') {
            MP3.ZLIKE_KEY = data.user_zlike_key;
        }
        if (typeof data.user_zlike_token !== 'undefined') {
            MP3.ZLIKE_TOKEN = data.user_zlike_token;
        }
        if (data.userid || data.zaloid) {
            MP3.ACCOUNT_NAME = data.username;
            MP3.ACCOUNT_ID = data.userid;
            MP3.ZALO_ID = data.zaloid;
            MP3.DISPLAY_NAME = data.name;
            MP3.ACCOUNT_ID_ENCODED = data.useridencoded;
            if (typeof MP3 === 'object' && typeof MP3.ACCOUNT_ID_ENCODED !== 'undefined') {
                $('a.fn-my-channel').attr('href', '/u/' + data.zalousername + '.' + MP3.ACCOUNT_ID_ENCODED);
            }
            $('#userBox a.fn-profile').attr('href', 'http://me.zing.vn/u/' + data.username);
            $('#userBox a.fn-logout').attr('href', data.logout);
            $('.fn-userbox').removeClass('none');
            $('.fn-guestbox').remove();
            $('#loginBox').remove();
            zmp3UI.bodyMask(0);
            $('#userBox').append('<i class="fn_zme_info" style="display: none;" data_uid="' + data.userid + '" data-thumb="#userBox .fn-thumb" data-thumbsize="120"></i>');
            if (data.is_vip) {
                if ($.cookie('BANNER_OFF') == null || $.cookie('BANNER_OFF') == '' || bylogin) {
                    zmp3UI.setBannerOff(true);
                }
                MP3.VIP = 1;
                $('.fn-vip').removeClass('none');
                $('.fn-notvip').addClass('none');
                if (data.noti_flag) {
                    zmp3UI.bodyMask(1);
                    $('#loginNotiBox .fn-dname').html(data.name);
                    $('#loginNotiBox').removeClass('none');
                }
            } else {
                //zmp3UI.setBannerOff(false, false);
                $('.fn-vip').addClass('none');
                $('.fn-notvip').removeClass('none');
                MP3.VIP = 0;
            }
            if (data.is_mod) {
                MP3.MOD = 1;
                $('.fn-mod').removeClass('none');
            }
            if (data.avatar == '' || data.avatar == null) {
                data.avatar = 'https://s120.avatar.talk.zdn.vn/3/4/e/f/0/120/0ce161a05272bf535d853504dd343258.jpg';
            }
            $('#userBox .fn-thumb').attr('src', data.avatar);
            if (bylogin && $.isFunction(zmp3Login.succCallback)) {
                zmp3Login.succCallback();
            }
            this.triggerGetCuccessUserInfo();
        } else {
            this.triggerGetCuccessUserInfo();
            $('.fn-guestbox').removeClass('none');
            $('.fn-userbox').addClass('none');
            $('.fn-vip').addClass('none');
            $('.fn-notvip').removeClass('none');
            if (bylogin) {
                /*$.getJSON('http://me.zing.vn/cp?url=' + MP3.MP3_URL + '&callback=?', function () {
                 location.href = location.href;
                 });*/
                setTimeout(function () {
                    location.href = location.href;
                }, 1000);
            } else if (typeof $.cookie('__vngauth') != 'undefined') {
                var num = parseInt($.cookie('__vngauth'));
                if (!isNaN(num) && num < 2) {
                    $.cookie('__vngauth', num + 1);
                    location.href = 'http://id.mp3.zing.vn/zingsession?type=ss&f=3U9FGM10004&cbUrl=' + encodeURIComponent(location.href);
                }
            }
        }
    },
    buildZaloInfo: function (data, bylogin) {
        MP3.ACCOUNT_ID = 0;
        if (typeof data.user_zlike_key !== 'undefined') {
            MP3.ZLIKE_KEY = data.user_zlike_key;
        }
        if (typeof data.user_zlike_token !== 'undefined') {
            MP3.ZLIKE_TOKEN = data.user_zlike_token;
        }
        if (data.userid || data.zaloid) {
            MP3.ACCOUNT_NAME = data.username;
            MP3.ACCOUNT_ID = data.userid;
            MP3.ZALO_ID = data.zaloid;
            MP3.DISPLAY_NAME = data.name;
            MP3.ACCOUNT_ID_ENCODED = data.useridencoded;

            $('a.fn-my-channel').attr('href', $('a.fn-my-channel').attr('href') + data.zalousername);
            $('#userBox a.fn-profile').attr('href', 'http://me.zing.vn/u/' + data.username);
            $('#userBox a.fn-logout').attr('href', data.logout);
            $('.fn-userbox').removeClass('none');
            $('.fn-guestbox').remove();
            $('#loginBox').remove();
            zmp3UI.bodyMask(0);
            $('#userBox').append('<i class="fn_zme_info" style="display: none;" data_uid="' + data.userid + '" data-thumb="#userBox .fn-thumb" data-thumbsize="120"></i>');
            if (data.is_vip) {
                if ($.cookie('BANNER_OFF') == null || bylogin) {
                    zmp3UI.setBannerOff(true);
                }
                MP3.VIP = 1;
                $('.fn-vip').removeClass('none');
                $('.fn-notvip').addClass('none');
                if (data.noti_flag) {
                    zmp3UI.bodyMask(1);
                    $('#loginNotiBox .fn-dname').html(data.name);
                    $('#loginNotiBox').removeClass('none');
                }
            } else {
                zmp3UI.setBannerOff(false, false);
                $('.fn-vip').addClass('none');
                $('.fn-notvip').removeClass('none');
                MP3.VIP = 0;
            }
            if (data.is_mod) {
                MP3.MOD = 1;
                $('.fn-mod').removeClass('none');
            }
            ZMEInfo.renderZMEAvatar();
            if (bylogin && $.isFunction(zmp3Login.succCallback)) {
                zmp3Login.succCallback();
            }
        }
    }
};
var zmp3Storage = {
    getParam: function (k, d) {
        if (typeof localStorage !== 'undefined' && localStorage.getItem(k) != null) {
            return localStorage.getItem(k);
        }
        return d;
    },
    setParam: function (k, v) {
        if (typeof localStorage !== 'undefined') {
            return localStorage.setItem(k, v);
        }
        return null;
    }
};
var zmp3Comment = {
    timer: null,
    delay: 0,
    type: '',
    id: '',
    tpl: null,
    dynamic: function (el) {
        var args = $(el).data();
        $(el).remove();
        if (args.id && args.type)
            this.init(args.id, args.type);
    },
    remove: function (item) {
        $.post(MP3.INTER_URL + '/comment/remove?callback=?', {
            oid: this.id,
            cid: item.data('id'),
            type: this.type
        }, function (rsp) {
            item.remove();
            zmp3UI.showMsg(rsp.note, rsp.is_error ? 1 : 0);
        }, 'json');
    },
    pagination: function (el) {
        el.removeClass('none');
        var total = parseInt(0.999 + (el.data('total')));
        var cur = parseInt(el.data('page'));
        var page, max = 5;
        $('.fn-page', el).addClass('none');
        if (cur < total) {
            $('.fn-last', el).removeClass('none').data('page', total);
            $('.fn-next', el).removeClass('none').data('page', cur + 1);
        } else {
            cur = total;
        }
        if (cur > 1) {
            max = cur > 2 ? cur + 2 : cur + 3;
            $('.fn-first', el).removeClass('none').data('page', 1);
            $('.fn-prev', el).removeClass('none').data('page', cur - 1);
        }
        page = cur - 2;
        if (total < max) {
            page -= (max - total);
            max = total;
        }
        if (page < 1) {
            page = 1;
        }
        for (var i = 1; i <= 5 & page <= max; i++, page++) {
            $('.fn-page' + i, el).removeClass('none');
            if (page == cur) {
                $('.fn-page' + i, el).addClass('active').data('page', page).html(page);
                ;
            } else {
                $('.fn-page' + i, el).removeClass('active').data('page', page).html(page);
            }
        }
    },
    init: function (id, t) {
        this.id = id;
        this.type = t;
        tpl = document.getElementById('tplComment').cloneNode(true);
        $(tpl).removeClass('none');
        $('#tplComment').remove();
        $('#pagination .fn-page').click(function () {
            if (!$(this).hasClass('active')) {
                zmp3Comment.load($(this).data('page'));
            }
            return false;
        });
        $('form.fn-comment').submit(function () {
            zmp3Comment.add(this);
            return false;
        });
        this.load(1);
    },
    load: function (page, force) {
        var sel = '#commentList .fn-page';
        if (force) {
            if ($(sel + page).length > 0) {
                $(sel + page).remove();
            }
        }
        if ($(sel + page).length > 0) {
            $(sel).addClass('none');
            $(sel + page).removeClass('none');
            $('#pagination').data('page', page);
            this.pagination($('#pagination'));
        } else {
            $.getJSON(MP3.INTER_URL + '/comment/get-list?callback=?', {
                op: 'get',
                type: this.type,
                id: this.id.toUpperCase(),
                page: page,
                length: 10
            }, function (rsp) {
                $('#commentCounter').html(rsp.total);
                if (rsp.data) {
                    setTimeout(function () {
                        zmp3Comment.build(page, rsp);
                    }, 500);
                }
            });
        }
    },
    build: function (page, rs) {
        $('#commentList .fn-page').addClass('none');
        for (var i in rs.data) {
            var tpl1 = tpl.cloneNode(true);
            var item = rs.data[i];
            var elId = 'zmp3' + item.commentId;
            $(tpl1).attr('id', elId).data('id', item.commentId);
            $(tpl1).addClass('fn-page fn-page' + page);
            $('.fn-content', tpl1).html(item.content);
            $('.fn-time', tpl1).html(zmp3DateTime.format(item.time));
            $('.fn-delete', tpl1).data('item', '#' + elId).click(function () {
                zmp3Comment.remove($($(this).data('item')));
                return false;
            });
            $(tpl1).append('<i class="fn_zme_info fn' + item.ownerId + '" style="display: none;" data-ref=".fn' + item.ownerId + '" data_uid="' + item.ownerId + '" data-thumb="#' + elId + ' .fn-thumb" data-dname="#' + elId + ' .fn-dname" data-link="#' + elId + ' .fn-link"></i>');
            var srcAvatar = '';
            if (Math.random() < 0.3) {
                srcAvatar = 'http://d.1.s50.avatar.zdn.vn/avatar_files/d/4/1/d/_50_0.jpg';
            } else {
                if (Math.random() < 0.6) {
                    srcAvatar = 'http://4.1.s50.avatar.zdn.vn/avatar_files/4/4/7/5/4_50_0.jpg';
                } else {
                    srcAvatar = 'http://8.1.s50.avatar.zdn.vn/avatar_files/8/5/f/e/001_50_0.jpg';
                }
            }


            $(tpl1).find('.fn-thumb').attr('src', srcAvatar);
            $('#commentList').append(tpl1);
        }
        if (rs.total > 10) {
            if (rs.total > 200)
                rs.total = 200;
            $('#pagination').data('total', rs.total / 10).data('page', page);
            this.pagination($('#pagination'));
        }
        ZMEInfo.renderZMEAvatar();
    },
    add: function (frm) {
        if (this.delay > 0)
            return false;
        if (zmp3Login.show()) {
            var content = frm.content.value;
            content = content.trim();
            frm.content.value = content;
            if (content === frm.content.defaultValue) {
                zmp3UI.showMsg('Bạn cần nhập nội dung bình luận.', 1);
            } else if (content.length < 50) {
                zmp3UI.showMsg('Nội dung bình luận cần ít nhất 50 ký tự.', 1);
            } else if (content.length > 900) {
                zmp3UI.showMsg('Nội dung bình luận chỉ cho phép tối đa 900 ký tự.', 1);
            } else if (!zmp3Comment.loading) {
                zmp3Comment.loading = true;
                $.post(MP3.INTER_URL + '/comment/add-v4?callback=?', $(frm).serialize(), function (rsp) {
                    zmp3Comment.loading = false;
                    if (!rsp.is_error) {
                        if (rsp.data && rsp.data.length > 0) {
                            zmp3Comment.build(1, rsp);
                        }
                        frm.content.value = '';
                        zmp3Comment.countdown(frm);
                    }
                    zmp3UI.showMsg(rsp.msg, rsp.is_error ? 1 : 0);
                    zmp3Comment.charsCounter(frm);
                }, 'json');
            }
        }
    },
    harsCounter: function (frm) {
        var len = frm.content.value.length;
        if (len > 0 && frm.content.value.charCodeAt(len - 1) === 32)
            len--;
        //      $('#commentChars').html(len +' ký tự');
    },
    countdown: function (frm) {
        this.delay = 15;
        $(frm).addClass('disabled');
        $(frm.btnSubmit).html('Vui lòng chờ 15 giây');
        this.timer = setInterval(function () {
            if (zmp3Comment.delay > 0) {
                $(frm.btnSubmit).html('Vui lòng chờ ' + zmp3Comment.delay + ' giây');
                zmp3Comment.delay--;
            } else {
                $(frm).removeClass('disabled');
                $(frm.btnSubmit).html('Bình luận');
                clearInterval(zmp3Comment.timer);
            }

        }, 1000);
    }
};
var zmp3Toolbar = {
    init: function () {
        if ($(window).width() > 1300) {
            var bar = $('#toolbar');
            $('.fn-toolbar', bar).click(function () {
                var _this = this;
                zmp3Login.show(function () {
                    if ($(_this).hasClass('active')) {
                        $('#toolbar .fn-box').addClass('none');
                        $('.fn-toolbar', bar).removeClass('active');
                        zmp3UI.bodyMask(0);
                    } else {
                        zmp3UI.bodyMask(1);
                        $('.fn-toolbar', bar).removeClass('active');
                        $(_this).addClass('active');
                        switch ($(_this).data('box')) {
                            case 'playlist':
                                zmp3Toolbar.playlistbox();
                                break;
                            case 'fav':
                                zmp3Toolbar.favbox();
                                break;
                            case 'his':
                                zmp3Toolbar.hisbox();
                                break;
                            case 'follow':
                                zmp3Toolbar.followbox();
                                break;
                        }
                    }
                });
                return false;
            });
            $('.fn-box[data-box=fav] .fn-group', bar).click(function () {
                zmp3Toolbar.favbox($(this).data('group'));
                $('.fn-group', bar).removeClass('active');
                $(this).addClass('active');
                return false;
            });
            $('.fn-box[data-box=follow] .fn-group', bar).click(function () {
                zmp3Toolbar.followbox($(this).data('group'));
                $('.fn-group', bar).removeClass('active');
                $(this).addClass('active');
                return false;
            });
            $('#toolbar .fn-box').each(function () {
                var _this = this;
                onBlurBind(this, function () {
                    var box = $('#toolbar .fn-toolbar[data-box=' + $(_this).data('box') + ']');
                    if (box.hasClass('active')) {
                        box.removeClass('active');
                        zmp3UI.bodyMask(0);
                    }
                    $(_this).addClass('none');
                });
            });
            var box = $('.box-scroll', bar);
            if (box.length > 0) {
                box.css('max-height', $(window).height() - 80 + 'px');
                box.mCustomScrollbar({
                    scrollInertia: 0,
                    scrollbarPosition: 'outside',
                    autoHideScrollbar: true,
                    autoExpandScrollbar: true,
                    mouseWheel: {
                        preventDefault: true
                    }
                });
            }
        }
    },
    playlistbox: function () {
        var bar = $('#toolbar');
        var box = $('.fn-box[data-box=playlist]');
        zmp3Login.show(function () {
            var list = $('.fn-list', box);
            if (!list.data('time')) {
                list.data('time', new Date().getTime());
                $.get("/json/user/get-playlist", function (rs) {
                    if (rs.data) {
                        var tpl = $('.fn-item', list)[0].cloneNode(true);
                        for (x in rs.data) {
                            var idata = rs.data[x];
                            if (idata.id.length > 2) {
                                var tpl1 = tpl.cloneNode(true);
                                $('.fn-name', tpl1).html(idata.name);
                                if (idata.artist)
                                    $('.fn-artist', tpl1).html(idata.artist.length > 60 ? 'Nhiều nghệ sĩ' : idata.artist);
                                $('.fn-link', tpl1).attr('href', MP3.MP3_URL + idata.link);
                                $('.fn-edit-link', tpl1).attr('href', idata.edit_link);
                                $('.fn-thumb', tpl1).attr('src', MP3.IMG_URL + idata.thumb).attr('alt', idata.name);
                                if ($('.fn-play', tpl1).length > 0) {
                                    $('.fn-play', tpl1).html(idata.play);
                                }
                                $(tpl1).removeClass('none');
                                list.append(tpl1);
                            }
                        }
                        $('.fn-total', box).html(rs.total);
                    }
                });
            }
        });
        $('.fn-box', bar).addClass('none');
        box.removeClass('none');
    },
    favbox: function (group) {
        if (!group)
            group = 'song';
        var bar = $('#toolbar');
        var box = $('.fn-box[data-box=fav]', bar);
        var list = $('.fn-list[data-group=' + group + ']', box);
        zmp3Login.show(function () {
            if (!list.data('time')) {
                list.data('time', new Date().getTime());
                $.get(MP3.MP3_URL + "/json/mydata/get-fav" + group, function (rs) {
                    if (rs.data) {
                        var tpl = $('.fn-item', list)[0].cloneNode(true);
                        for (x in rs.data) {
                            var idata = rs.data[x];
                            if (idata.id.length > 2) {
                                var tpl1 = tpl.cloneNode(true);
                                $('.fn-name', tpl1).html(idata.name);
                                if (idata.artist)
                                    $('.fn-artist', tpl1).html(idata.artist.length > 60 ? 'Nhiều nghệ sĩ' : idata.artist);
                                $('.fn-link', tpl1).attr('href', MP3.MP3_URL + idata.link);
                                $('.fn-thumb', tpl1).attr('src', MP3.IMG_URL + idata.thumb).attr('alt', idata.name);
                                $(tpl1).removeClass('none');
                                list.append(tpl1);
                            }
                        }
                    }
                });
            }
        });
        $('.fn-list', box).addClass('none');
        $('.fn-box', bar).addClass('none');
        box.removeClass('none');
        list.removeClass('none');
    },
    followbox: function (group) {
        if (!group)
            group = 'artist';
        var bar = $('#toolbar');
        var box = $('.fn-box[data-box=follow]', bar);
        var list = $('.fn-list[data-group=' + group + ']', box);
        zmp3Login.show(function () {
            if (!list.data('time')) {
                list.data('time', new Date().getTime());
                $.get(MP3.MP3_URL + "/json/mydata/get-follow-list?type=" + group, function (rs) {
                    if (rs.data) {
                        var tpl = $('.fn-item', list)[0].cloneNode(true);
                        for (x in rs.data) {
                            var idata = rs.data[x];
                            if (idata.id.length > 2) {
                                var tpl1 = tpl.cloneNode(true);
                                var id = group + 'follow' + idata.id;
                                $(tpl1).attr('id', id);
                                $('.fn-name', tpl1).html(idata.name);
                                $('.fn-link', tpl1).attr('href', MP3.MP3_URL + idata.link);
                                $('.fn-thumb', tpl1).attr('src', MP3.IMG_URL + idata.thumb).attr('alt', idata.name);
                                $('.fn-total', tpl1).html(zmp3Number.format(idata.total));
                                $(tpl1).data('type', group).data('id', idata.id).data('name', idata.name);
                                $('.fn-remove', tpl1).data('item', '#' + id).click(function () {
                                    zmp3SongTool.removeItem($($(this).data('item')));
                                    return false;
                                });
                                $(tpl1).removeClass('none');
                                list.append(tpl1);
                            }
                        }
                    }
                });
            }
        });
        $('.fn-list', box).addClass('none');
        $('.fn-box', bar).addClass('none');
        box.removeClass('none');
        list.removeClass('none');
    },
    hisbox: function (group) {
        if (!group)
            group = 'play';
        var bar = $('#toolbar');
        var box = $('.fn-box[data-box=his]', bar);
        var list = $('.fn-list[data-group=' + group + ']', box);
        zmp3Login.show(function () {
            if (!list.data('time')) {
                list.data('time', new Date().getTime());
                $.get(MP3.MP3_URL + "/json/mydata/get-history", {
                    start: 0,
                    length: 20
                }, function (rs) {
                    if (rs.data) {
                        var tpl = $('.fn-item', list)[0].cloneNode(true);
                        for (x in rs.data) {
                            var idata = rs.data[x];
                            if (idata.id.length > 2) {
                                var tpl1 = tpl.cloneNode(true);
                                var t = idata.type;
                                var tplId = 'history' + idata.id + idata.time;
                                $(tpl1).attr('id', tplId).data(idata).data('from', 'history');
                                $('.fn-name', tpl1).html(idata.name);
                                $('.fn-artist', tpl1).html(idata.artist.length > 60 ? 'Nhiá»u nghá»‡ sÄ©' : idata.artist);
                                var postfix = idata.artist;
                                $('.fn-' + idata.type, tpl1).removeClass('none');
                                switch (idata.type) {
                                    case 'video':
                                        t = 'video-clip';
                                        break;
                                    case 'playlist':
                                        postfix = idata.username;
                                        break;
                                    case 'song':
                                        t = 'bai-hat';
                                        break;
                                }
                                $('.fn-link', tpl1).attr('title', idata.name + ' - ' + idata.artist).attr('href', MP3.MP3_URL + '/' + t + '/' + idata.name.stripViet('-') + '-' + postfix.stripViet('-') + '/' + idata.id + '.html');
                                $('.fn-thumb', tpl1).attr('src', MP3.IMG_URL + idata.thumb).attr('alt', idata.name);
                                $('.fn-remove', tpl1).data('item', '#' + tplId).click(function () {
                                    var item = $($(this).data('item'));
                                    var delOrd = item.data('order');
                                    zmp3SongTool.removeItem(item, function (rs) {
                                        if (rs.code < 1) {
                                            var els = list.children('.fn-item');
                                            for (var ci = 0; ci < els.length; ci++) {
                                                var ord = $(els[ci]).data('order');
                                                if (delOrd < ord) {
                                                    $(els[ci]).data('order', ord - 1);
                                                }
                                            }
                                        }
                                    });
                                    return false;
                                });
                                $(tpl1).removeClass('none');
                                list.append(tpl1);
                            }
                        }
                    }
                });
            }
        });
        $('.fn-list', box).addClass('none');
        $('.fn-box', bar).addClass('none');
        box.removeClass('none');
        list.removeClass('none');
    }
};
var zmp3Common = {
    trackPageview: function (lnk) {
        if (typeof ga != 'undefined') {
            ga('send', 'pageview', lnk);
        }
        if (typeof ZA != 'undefined') {
            ZA.trackPageview(lnk);
        }
    },
    tracking: function (lnk) {
        if (typeof ga != 'undefined') {
            ga('mp3.send', 'pageview', lnk);
        }
    },
    trackingOn: function (el, pre, ev) {
        if (!pre)
            pre = '';
        var log = el.attr('suglog');
        var href = el.attr('href');
        if (href) {
            var from = el.attr('tracking');
            if (href.search(MP3.MP3_URL) != -1)
                href = '/' + href.replace(MP3.MP3_URL, '');
            if (from)
                href += '?' + from;
            zmp3Common.tracking(pre + href);
        }
        if (log) {
            $.get(MP3.LOG_URL + log);
            if (!(ev && (ev.ctrlKey || ev.button > 0)))
                setTimeout(function () {
                    location.href = el.attr('href');
                }, 400);
            return false;
        }
        return true;
    },
    /*
     * Description: tracking when done trackNum and goto (trackNum+1) in playlist.
     * Input: 
     *          Int trackNum: number of track for calculate tracking in action
     *          Int repeatMode: repeat mode (0: not loop, 1: loop one, 2: loop all, 3: shuffle)      
     *          Array info: info use for calculate when tracking.
     *          Boolean debug: on (debug = true) or off (debug = false)
     * Return: void;
     * Auth: haon <haon@vg.com.vn>
     * Create date: 2016/06/10
     * Update date: 2016/06/10   
     */
    trackingDoneTrack: function (trackNum, repeatMode, info, debug) {
        try {
            var activeTracking = false;
            if ((typeof ga != 'undefined') && (info['totalTrack'] >= trackNum)) {
                switch (repeatMode) {
                    case 0: //Not loop
                    case 2: //Loop all                      
                        if ((info['currentTrack'] == (trackNum - 1)) && (info['nextTrack'] == trackNum)) {
                            activeTracking = true;
                        }
                        break;
                    case 1: //Loop one                          
                    case 3: //shuffle
                        if (info['totalPlayed'] == (trackNum + 1)) {
                            activeTracking = true;
                        }
                        break;
                    default:
                        if (debug) {
                            console.log("Not mapping any repeat mode.");
                        }
                        break;
                }
                if (activeTracking) {
                    ga('send', 'event', {
                        eventCategory: 'SaleReport',
                        eventAction: 'DoneTrack' + trackNum,
                        eventLabel: repeatMode
                    });
                }
            } else {
                if (debug) {
                    console.log('ga <google analytics> is undefined.');
                }
            }
        } catch (e) {
            if (debug) {
                console.log(e);
            }
        }
    }
};
var zmp3FeedBack = {
    url: MP3.MP3_URL + '/json/feed-back',
    flVer: '',
    frm: '',
    init: function () {
        $('._feedBackBtn').click(function (e) {
            zmp3FeedBack.displayForm();
            return false;
        });
    },
    displayForm: function () {
        if (zmp3Login.show(zmp3FeedBack.displayForm)) {
        }
    },
    hOk: function (data) {},
    post: function (su, co, li, cbFn) {
        if (zmp3FeedBack.flVer.length < 1) {
            zmp3FeedBack.flVer = Browser.getFlashVersion();
            zmp3FeedBack.post(su, co, li, cbFn);
        } else {
            $.post(zmp3FeedBack.url, {
                'subject': su,
                'content': co,
                'link': li,
                'flVer': zmp3FeedBack.flVer,
                'browser': navigator.userAgent
            },
                    function (data) {
                        return cbFn(data);
                    }, 'json');
        }
    }
};
var zmp3BlockChart = {
    dynamic: function (el) {
        var args = $(el).data();
        $(el).remove();
        this.load(args);
        this.init();
    },
    init: function () {
        $('.fn-chart').click(function () {
            if (!$(this).hasClass('active')) {
                var args = $(this).data();
                zmp3BlockChart.load(args);
            }
            return false;
        });
    },
    load: function (args) {
        var group = args.group ? args.group : '_chart_' + args.type;
        var el = $('#' + group + args.id);
        $('.fn-chart[data-group="' + args.group + '"]').removeClass('active');
        var btn = $('.fn-chart[data-id="' + args.id + '"]').addClass('active');
        $('a.fn-detail_link.' + group + args.id).attr('href', btn.attr('href')).attr('title', btn.attr('title'));
        if ($('.fn-item', el).length > 0 && $('.fn-item', el).length < 4) {
            var tpl = $('.fn-item', el)[0].cloneNode(true);
            var tplFirst = $('.fn-first', el)[0].cloneNode(true);
            $('.fn-item', el).remove();
            $('.fn-first', el).remove();
            $.getJSON('/json/charts', {
                op: 'get',
                type: args.type,
                id: args.id
            }, function (rsp) {
                if (rsp.code == 0 && rsp.data.items) {
                    for (var i in rsp.data.items) {
                        i = parseInt(i);
                        var tpl1 = i === 0 ? tplFirst.cloneNode(true) : tpl.cloneNode(true);
                        var item = rsp.data.items[i];
                        var itemId = 'chartitem' + args.type + item.id;
                        $(tpl1).attr('id', itemId).data('id', item.id).data('code', item.code).data('type', args.type).removeClass('none');
                        var tplA = $('.fn-artist', tpl1);
                        $('.fn-artist_list', tpl1).empty();
                        for (var x in item.artists) {
                            var tplA1 = tplA[0].cloneNode(true);
                            $(tplA1).empty().append('<a href="' + item.artists[x].link + '" title="' + (item.artists.length < 2 ? item.artists : item.artists[x].name) + '">' + item.artists[x].name + '</a>');
                            $('.fn-artist_list', tpl1).append(tplA1);
                            if (parseInt(x) < item.artists.length - 1) {
                                $('.fn-artist_list', tpl1).append('<span>, </span>');
                            }
                        }
                        $('.fn-order', tpl1).addClass('rank-' + item.order).html(item.order);
                        $('.fn-link', tpl1).attr('href', item.link).attr('title', item.name + ' - ' + item.artist);
                        $('.fn-name', tpl1).html(item.name);
                        if ($('.fn-score', tpl1).length) {
                            $('.fn-score', tpl1).html(zmp3Number.format(item.score));
                        }
                        if ($('.fn-addto', tpl1).length) {
                            $('.fn-dlsong', tpl1).data('item', '#' + itemId);
                            $('.fn-addto', tpl1).data('item', '#' + itemId);
                            $('.fn-share', tpl1).data('item', '#' + itemId).attr('href', MP3.MP3_URL + item.link);
                        }
                        if ($('.fn-thumb', tpl1).length) {
                            if (i === 0)
                                item.thumbnail = rsp.data.cover;//item.thumbnail.replace(/thumb\/\d+_\d+/, '');
                            //$('.fn-thumb', tpl1).attr('src', rsp.data.cover);
                            $('.fn-thumb', tpl1).attr('src', item.thumbnail);

                        }
                        $('.fn-list', el).append(tpl1);
                    }
                    $('.' + group).addClass('none');
                    $('.' + group + args.id).removeClass('none');
                    zmp3SongTool.init();
                    if (rsp.data.play_link) {
                        $('a.fn-play_link.' + group + args.id).attr('href', rsp.data.play_link);
                    }
                }
            });
        } else {
            $('.' + group).addClass('none');
            $('.' + group + args.id).removeClass('none');
        }
    }
};
var loginNoti = {
    closeCb: function () {
        $.post(MP3.MP3_URL + "/json/mydata/update-noti-flag");
    }
};

/*
 * Description: Thuc hien cac xu li lien quan den log duoc dung chung
 * Author: Haon
 * Date create: 2016-Sep-05 
 * Date update: 2016-Sep-05 
 * Note: 
 */
var zmp3LogCommon = {
    mediaId: '',
    pageId: '', //Co the la Id cua Song, Video, ALbum, Playlist.
    pageName: '',
    userName: '',
    userId: '',
    zaloId: '',
    visitorId: '',
    isVip: "0",
    constants: {
        HOME_PAGE_NAME: 'home',
        TOPIC_PAGE_NAME: 'chu-de',
        SONG_PAGE_NAME: 'bai-hat',
        VIDEO_PAGE_NAME: 'video-clip',
        ALBUM_PAGE_NAME: 'album',
        PLAYLIST_PAGE_NAME: 'playlist',
        SEARCH_PAGE_NAME: 'tim-kiem'
    },
    getMediaId: function () {
        this.setMediaId();
        return this.mediaId;
    },
    setMediaId: function () {
        if (this.isValidParam(zmp3HTML5)
                && this.isValidParam(zmp3HTML5.currentItem)
                && this.isValidParam(zmp3HTML5.currentItem.id)) {
            this.mediaId = zmp3HTML5.currentItem.id;
        } else {
            this.mediaId = '';
        }
    },
    getPageId: function () {
        if (!zmp3LogCommon.isValidParam(this.pageId)) {
            this.setPageId();
        }
        return this.pageId;
    },
    setPageId: function () {
        var url = window.location.href;
        var arrUrl = url.split('/');
        if (arrUrl.length >= 6) {
            var paramsId = arrUrl[5];
            var pageId = paramsId.substring(0, 8);
            if (zmp3LogCommon.isValidParam(pageId)) {
                this.pageId = pageId;
            }
        }
    },
    getPageName: function () {
        if (!this.isValidParam(this.pageName)) {
            this.setPageName();
        }
        return this.pageName;
    },
    setPageName: function () {
        try {
            var url = window.location.href;
            var baseUrl = window.location.origin + '/';
            if (url === baseUrl) {
                this.pageName = zmp3LogCommon.constants.HOME_PAGE_NAME;
            } else {
                var arrUrl = url.split('/');
                if (zmp3LogCommon.isValidParam(arrUrl)) {
                    if (arrUrl.length >= 4) {
                        this.pageName = arrUrl[3];
                    }
                    if (arrUrl.length === 4) {
                        this.pageName = this.pageName.substring(0, this.pageName.length - 5);
                    }
                }
            }
        } catch (ex) {
            console.log('Exception at zmp3LogCommon.setPageName: ', ex);
        }
    },
    getUsername: function () {
        if (!this.isValidParam(this.username)) {
            this.setUsername();
        }
        return this.username;
    },
    setUsername: function () {
        if (this.isValidParam(MP3) && this.isValidParam(MP3.ACCOUNT_NAME)) {
            this.username = MP3.ACCOUNT_NAME;
        } else {
            this.username = '';
        }
    },
    getUserId: function () {
        if (!this.isValidParam(this.userId)) {
            this.setUserId();
        }
        return this.userId;
    },
    setUserId: function () {
        if (this.isValidParam(MP3) && this.isValidParam(MP3.ACCOUNT_ID)) {
            this.userId = MP3.ACCOUNT_ID;
        } else {
            this.userId = '';
        }
    },
    getZaloId: function () {
        if (!this.isValidParam(this.zaloId)) {
            this.setZaloId();
        }
        return this.zaloId;
    },
    setZaloId: function () {
        if (this.isValidParam(MP3) && this.isValidParam(MP3.ZALO_ID)) {
            this.zaloId = MP3.ZALO_ID;
        } else {
            this.zaloId = '';
        }
    },
    getVisitorId: function () {
        if (!this.isValidParam(this.visitorId)) {
            this.setVisitorId();
        } else {
            return this.visitorId;
        }
    },
    setVisitorId: function () {
        if (typeof ZA === 'object') {
            ZA.getVisitorID(function (vid) {
                zmp3LogCommon.visitorId = vid;
                return zmp3LogCommon.getVisitorId();
            });
        }
    },
    setIsVip: function () {
        if (typeof MP3 !== 'undefined') {
            this.isVip = MP3.VIP == false ? "0" : "1";
        } else {
            this.isVip = "0";
        }
    },
    getIsVip: function () {
        return this.isVip;
    },
    isValidParam: function (param) {
        if (param === null || typeof param === 'undefined') {
            return false;
        }
        var type = typeof param;
        if (type === 'string' || type === 'array') {
            return param.length > 0;
        }
        if (type === 'number') {
            return param > 0;
        }

        if (type === 'function' || type === 'object' && !!param) {
            return Object.keys(param).length > 0;
        }
        return false;
    },
    getParameterByName: function (name) {
        var url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
        if (!results)
            return null;
        if (!results[2])
            return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    },
    encode: function (data) {
        if (this.isValidParam(data)) {
            try {
                data = JSON.stringify(data);
                data = data.replace(/\+/g, '-');
                data = data.replace(/\//g, '_');
                data = data.replace(/\=/g, ' ');
                var encodedData = '';
                if (typeof encodeURIComponent !== 'undefined' && typeof encodeURIComponent === 'function') {
                    encodedData = window.btoa(unescape(encodeURIComponent(data)));
                } else {
                    encodedData = window.btoa(data);
                }
                return encodedData;

            } catch (ex) {
                console.log('Exception at zmp3LogCommon.encode: ', ex);
                return '';
            }
        }
        return '';
    },
    push: function (encodedData, logCategory) {
        if (this.isValidParam(encodedData) && this.isValidParam(logCategory)) {
            try {
                if (!this.isValidParam(MP3) || !this.isValidParam(MP3.LOG_URL)) {
                    return null;
                }
                var linkLog = MP3.LOG_URL + 'logv2/'
                        + logCategory
                        + '?data=' + encodedData
                        + '&ts=' + new Date().getTime();
                var img = new Image();
                img.src = linkLog;
            } catch (ex) {
                console.log('Exception at zmp3LogCommon.push: ', ex);
            }
        }
    }
};

/*
 * Description: Thuc hien cac nhiem vu ghi log thoi gian nghe (trang bai-hat, album/playlist, video)
 * Author: Haon
 * Date create: 2016-Sep-01 
 * Date update: 2016-Sep-05 
 * Note: 
 */

var zmp3LogLoginZalo = {
    constants: {
        LOG_CATEGORY_LOGIN_ZALO: "log-login-zalo",
        LOGIN_CLICK: "1", //When click button-zalo-login
        LOGIN_SUCCESS: "2",
        LOGIN_FAUFT: "3"
    },
    trackLoginZaloSuccess: function (data) {
        if (typeof zmp3LogCommon !== 'object') {
            return;
        }
        if (!zmp3LogCommon.isValidParam(data)) {
            return;
        }

        var sParams = {};

        sParams.username = zmp3LogCommon.getUsername();
        sParams.userId = zmp3LogCommon.getUserId();
        sParams.zaloId = zmp3LogCommon.getZaloId();
        zmp3LogCommon.setIsVip();
        sParams.isVip = zmp3LogCommon.getIsVip();
        if (zmp3LogCommon.isValidParam(sParams.zaloId)) {
            sParams.loginStatus = this.constants.LOGIN_SUCCESS;
        } else {
            sParams.loginStatus = this.constants.LOGIN_FAUFT;
        }

        if (typeof ZA === 'object') {
            ZA.getVisitorID(function (vid) {
                sParams.visitorId = vid;
                if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                    return;
                }
                var sParamsEn = zmp3LogCommon.encode(sParams);
                zmp3LogCommon.push(sParamsEn, zmp3LogLoginZalo.constants.LOG_CATEGORY_LOGIN_ZALO);
            });
        }
    },
    //Tracking when click button-zalo-login in login-form
    trackLoginZaloClick: function () {
        if (typeof zmp3LogCommon !== 'object') {
            return;
        }

        var sParams = {};

        sParams.loginStatus = this.constants.LOGIN_CLICK;

        if (typeof ZA === 'object') {
            ZA.getVisitorID(function (vid) {
                sParams.visitorId = vid;
                if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                    return;
                }
                var sParamsEn = zmp3LogCommon.encode(sParams);
                zmp3LogCommon.push(sParamsEn, zmp3LogLoginZalo.constants.LOG_CATEGORY_LOGIN_ZALO);
            });
        }
    },
    listenLoginZaloClick: function () {
        $('#loginBox').on('click', '#fn-login-zalo', function () {
            zmp3LogLoginZalo.trackLoginZaloClick();
        });
    }
}


if (typeof zmp3LogLoginZalo !== 'undefined'
        && zmp3LogLoginZalo !== null) {
    try {
        zmp3LogLoginZalo.listenLoginZaloClick();
    } catch (ex) {
        console.log('Exception at zmp3LogLoginZalo.listenLoginZaloClick: ', ex);
    }

}

/*
 * Description: Thuc hien cac nhiem vu ghi log thoi gian nghe (trang bai-hat, album/playlist, video)
 * Author: Haon
 * Date create: 2016-Sep-01 
 * Date update: 2016-Sep-05 
 * Note: 
 */
var zmp3LogListenTime = {
    isAlbum: '',
    isOffical: '',
    listenTime: 5, //because delay 5s when call from player
    counterListenTime: '',
    genres: '',
    artists: '',
    getIsAlbum: function () {
        if (!zmp3LogCommon.isValidParam(this.isAlbum)) {
            this.setIsAlbum();
        }
        return this.isAlbum;
    },
    setIsAlbum: function () {
        var isAlbum = false;
        try {
            isAlbum = $('#html5player').data()['isalbum'];
            if (isAlbum === true) {
                this.isAlbum = 1;
            } else {
                this.isAlbum = 0;
            }
        } catch (ex) {
            console.log("Exception at zmp3LogListenTime.setIsAlbum: ", ex);
        }
    },
    getIsOffical: function () {
        if (!zmp3LogCommon.isValidParam(this.isOffical)) {
            this.setIsOffical();
        }
        return this.isOffical;
    },
    setIsOffical: function () {
        var isOffical = false;
        try {
            isOffical = $('#html5player').data()['isoffical'];
            if (isOffical === true) {
                this.isOffical = 1;
            } else {
                this.isOffical = 0;
            }
        } catch (ex) {
            console.log("Exception at zmp3LogListenTime.setIsOffical: ", ex);
        }
    },
    getGenres: function () {
        if (!zmp3LogCommon.isValidParam(this.genres)) {
            this.setGenres();
        }
        return this.genres;
    },
    setGenres: function () {
        var genres = '';
        genres = $('.genre-track-log');
        var strGenres = '';
        try {
            if (zmp3LogCommon.isValidParam(genres) && genres.length > 0) {
                for (var i = 0; i < genres.length; i++) {
                    strGenres += $(genres[i]).attr('data-id');
                    if (i < genres.length - 1) {
                        strGenres += ',';
                    }
                }
            }
            this.genres = strGenres;
        } catch (ex) {
            console.log("Exception at zmp3LogListenTime.setGenres: ", ex);
        }
    },
    getArtists: function () {
        if (!zmp3LogCommon.isValidParam(this.artists)) {
            this.setArtists();
        }
        return this.artists;
    },
    setArtists: function () {
        var artists = '';
        artists = $('.artist-track-log');
        var strArtists = '';
        try {
            if (zmp3LogCommon.isValidParam(artists) && artists.length > 0) {
                for (var i = 0; i < artists.length; i++) {
                    strArtists += $(artists[i]).attr('data-id');
                    if (i < artists.length - 1) {
                        strArtists += ',';
                    }
                }
            }
            this.artists = strArtists;
        } catch (ex) {
            console.log("Exception at zmp3LogListenTime.setArtists: ", ex);
        }
    },
    constants: {
        LOG_CATEGORY_LISTEN_TIME: "log-listen-time",
        CYCLE_UPDATE_LISTEN_TIME: 30000, //30s
    },
    getListenTime: function () {
        this.setListenTime();
        return this.listenTime;
    },
    setListenTime: function () {
        if (zmp3LogCommon.isValidParam(zmp3HTML5) && zmp3LogCommon.isValidParam(zmp3HTML5.currentTime)) {
            this.listenTime = parseInt(zmp3HTML5.currentTime);
        }
    },
    funcTrackLog: function () {
        if (zmp3LogCommon.isValidParam(zmp3HTML5)) {
            var sParams = {};

            sParams.pageName = zmp3LogCommon.getPageName();
            if ((sParams.pageName === zmp3LogCommon.constants.ALBUM_PAGE_NAME)
                    || (sParams.pageName === zmp3LogCommon.constants.PLAYLIST_PAGE_NAME)) {
                sParams.playlistId = zmp3LogCommon.getPageId();
                sParams.isAlbum = zmp3LogListenTime.getIsAlbum();
                sParams.isOffical = zmp3LogListenTime.getIsOffical();
            }
            sParams.mediaId = zmp3LogCommon.getMediaId();
            sParams.username = zmp3LogCommon.getUsername();
            sParams.userId = zmp3LogCommon.getUserId();
            sParams.zaloId = zmp3LogCommon.getZaloId();
            sParams.genres = this.getGenres();
            sParams.artists = this.getArtists();

            sParams.listenTime = zmp3LogListenTime.getListenTime();
            if (typeof ZA === 'object') {
                ZA.getVisitorID(function (vid) {
                    sParams.visitorId = vid;
                    if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                        return;
                    }
                    var sParamsEn = zmp3LogCommon.encode(sParams);
                    if (zmp3LogCommon.isValidParam(sParamsEn)) {
                        zmp3LogCommon.push(sParamsEn, zmp3LogListenTime.constants.LOG_CATEGORY_LISTEN_TIME);
                    }
                });
            }
        }
    },
    handlingListenTimeLog: function () {
        try {
            /*if (this.counterListenTime !== null) {
             window.clearInterval(this.counterListenTime);
             }
             this.funcTrackLog();
             this.counterListenTime = setInterval(function () {
             if (!zmp3HTML5.isPaused) {
             zmp3LogListenTime.funcTrackLog();
             }
             }, this.constants.CYCLE_UPDATE_LISTEN_TIME);
             */
            /*setTimeout(function () {
             zmp3LogListenTime.funcTrackLog();
             }, 30000);*/
        } catch (ex) {
            console.log("Exception at zmp3LogListenTime.handlingListenTimeLog: ", ex);
        }
    }
};

/*
 * Description: Ghi lai flow nghe nhac cua User (media A -> media B)
 * Author: Haon
 * Date create: 2016-Oct-12
 * Date update: 2016-Oct-12
 * Note: typeMedia value: song => 1, video => 2, album/playlist => 50
 */
var zmp3LogListenFlow = {
    typeMedia: '',
    isAlbum: '',
    isOffical: '',
    genres: '',
    artists: '',
    orderInAlbumPlaylist: '',
    idMediaListenBefore: '',
    lastTimeListen: '',
    timeBetweenTwoItem: '',
    tuser: '',
    listenTime: 5000, //because delay 5s from callback of player
    listenTimeSongInAlbum: 5000, //because delay 5s from callback of player
    ver: 'v42.8.5.7.5',
    loopMode: [],
    loopModeSongInAlbum: [],
    isAutoMedia: 0,
    counterListenTimeMedia: null,
    counterListenTimeSongInAlbum: null,
    sParamsMedia: '',
    constants: {
        LOG_CATEGORY_LISTEN_FLOW: 'log-listen-flow',
        LOCAL_STORAGE_LISTEN_SONG_BEFORE: '__zmp3lnsongbf', //typeMedia.idMedia(Encoded).timeStartListen.listenTime
        LOCAL_STORAGE_LISTEN_VIDEO_BEFORE: '__zmp3lnvideobf', //typeMedia.idMedia(Encoded).timeStartListen.listenTime
        LOCAL_STORAGE_LISTEN_ALBUM_PLAYLIST_BEFORE: '__zmp3lnalbumplaylistbf', //typeMedia.idMedia(Encoded).timeStartListen.listenTime        
        TYPE_SONG: 1,
        TYPE_VIDEO: 2,
        TYPE_ALBUM_PLAYLIST: 50,
        CYCLE_TIME_UPDATE_LSTEN_TIME: 5000 //5s
    },
    getTypeMedia: function () {
        return this.typeMedia;
    },
    setTypeMedia: function (typeMedia) {
        if (zmp3LogCommon.isValidParam(typeMedia)) {
            this.typeMedia = typeMedia;
        }
    },
    getIsAlbum: function () {
        if (!zmp3LogCommon.isValidParam(this.isAlbum)) {
            this.setIsAlbum();
        }
        return this.isAlbum;
    },
    setIsAlbum: function () {
        var isAlbum = false;
        try {
            isAlbum = $('#html5player').data()['isalbum'];
            if (isAlbum === true) {
                this.isAlbum = 1;
            } else {
                this.isAlbum = 0;
            }
        } catch (ex) {
            console.log("Exception at zmp3LogListenFlow.setIsAlbum: ", ex);
        }
    },
    getIsOffical: function () {
        if (!zmp3LogCommon.isValidParam(this.isOffical)) {
            this.setIsOffical();
        }
        return this.isOffical;
    },
    setIsOffical: function () {
        var isOffical = false;
        try {
            isOffical = $('#html5player').data()['isoffical'];
            if (isOffical === true) {
                this.isOffical = 1;
            } else {
                this.isOffical = 0;
            }
        } catch (ex) {
            console.log("Exception at zmp3LogListenFlow.setIsOffical: ", ex);
        }
    },
    getGenres: function (isItemInAlbumPlaylist) {
        this.setGenres(isItemInAlbumPlaylist);
        return this.genres;
    },
    setGenres: function (isItemInAlbumPlaylist) {
        try {
            var strGenres = '';
            var genres = '';
            if (isItemInAlbumPlaylist === false) {
                genres = $('.genre-track-log');
                if (zmp3LogCommon.isValidParam(genres) && genres.length > 0) {
                    for (var i = 0; i < genres.length; i++) {
                        strGenres += $(genres[i]).attr('data-id');
                        if (i < genres.length - 1) {
                            strGenres += ',';
                        }
                    }
                }
            } else {
                var st = this.getOrderInAlbumPlaylist();
                if (zmp3LogCommon.isValidParam(st)) {
                    var objItem = $('.genre-track-log-item-' + st);
                    if (objItem !== null && objItem !== '') {
                        var strGenres = $(objItem).attr('data-id');
                        if (typeof strGenres !== 'undefined') {
                            strGenres = strGenres.replace('[', '').replace(']', '').replace(' ', '');
                        }
                    }
                }
            }
            this.genres = strGenres;
        } catch (ex) {
            console.log("Exception at zmp3LogListenFlow.setGenres: ", ex);
        }

    },
    getArtists: function (isItemInAlbumPlaylist) {
        this.setArtists(isItemInAlbumPlaylist);
        return this.artists;
    },
    setArtists: function (isItemInAlbumPlaylist) {
        try {
            var strArtists = '';
            var artists = '';
            if (isItemInAlbumPlaylist === false) {
                artists = $('.artist-track-log');
                if (zmp3LogCommon.isValidParam(artists) && artists.length > 0) {
                    for (var i = 0; i < artists.length; i++) {
                        strArtists += $(artists[i]).attr('data-id');
                        if (i < artists.length - 1) {
                            strArtists += ',';
                        }
                    }
                }
            } else {
                var st = this.getOrderInAlbumPlaylist();
                if (zmp3LogCommon.isValidParam(st)) {
                    var objItem = $('.artist-track-log-item-' + st);
                    for (var i = 0; i < objItem.length; i++) {
                        strArtists += $(objItem[i]).attr('data-id');
                        if (i < objItem.length - 1) {
                            strArtists += ',';
                        }
                    }
                }
            }
            this.artists = strArtists;
        } catch (ex) {
            console.log('Exception at zmp3LogListenFlow.setArtists', ex);
        }
    },
    getOrderInAlbumPlaylist: function () {
        this.setOrderInAlbumPlaylist();
        return this.orderInAlbumPlaylist;
    },
    setOrderInAlbumPlaylist: function () {
        var st = zmp3LogCommon.getParameterByName('st');
        if (st === null) {
            st = '01';
        } else {
            if (st.length == 1) {
                st = '0' + st;
            }
        }
        this.orderInAlbumPlaylist = st;
    },
    getLastTimeListen: function () {
        return this.lastTimeListen;
    },
    setLastTimeListen: function (time) {
        if (zmp3LogCommon.isValidParam(time)) {
            this.lastTimeListen = time;
        }
    },
    getSparamsMedia: function () {
        return this.sParamsMedia;
    },
    setSparamsMedia: function (sParams) {
        this.sParamsMedia = sParams;
    },
    getListenTime: function () {
        return this.listenTime;
    },
    setListenTime: function (time) {
        this.listenTime = time;
    },
    getListenTimeSongInAlbum: function () {
        return this.listenTimeSongInAlbum;
    },
    setListenTimeSongInAlbum: function (time) {
        if (zmp3LogCommon.isValidParam(time)) {
            this.listenTimeSongInAlbum = time;
        }
    },
    getLoopMode: function () {
        return this.loopMode.toString();
    },
    setLoopMode: function (mode) {
        if ((this.loopMode.length == 0)
                || (this.loopMode.length > 0 && mode != this.loopMode[this.loopMode.length - 1])
                ) {
            this.loopMode.push(parseInt(mode));
        }
    },
    resetLoopMode: function () {
        if (this.loopMode.length >= 1) {
            this.loopMode = [this.loopMode[this.loopMode.length - 1]];
        }
    },
    getVer: function () {
        return this.ver;
    },
    getLoopModeSongInAlbum: function () {
        return this.loopModeSongInAlbum.toString();
    },
    setLoopModeSongInAlbum: function (mode) {
        if ((this.loopModeSongInAlbum.length == 0)
                || (this.loopModeSongInAlbum.length > 0
                        && mode != this.loopModeSongInAlbum[this.loopModeSongInAlbum.length - 1])
                ) {
            this.loopModeSongInAlbum.push(parseInt(mode));
        }
    },
    resetLoopModeSongInAlbum: function () {
        if (this.loopModeSongInAlbum.length >= 1) {
            this.loopModeSongInAlbum = [this.loopModeSongInAlbum[this.loopModeSongInAlbum.length - 1]];
        } else {
            this.loopModeSongInAlbum = [];
        }
    },
    getIsAutoMedia: function () {
        return this.isAutoMedia;
    },
    setIsAutoMedia: function (isAuto) {
        this.isAutoMedia = isAuto;
    },
    resetIsAutoMedia: function () {
        this.isAutoMedia = 0;
    },
    getTimeBetweenTwoItem: function () {
        this.setTimeBetweenTwoItem();
        return this.timeBetweenTwoItem;
    },
    setTimeBetweenTwoItem: function () {
        var timeBetweenTwoItem = '';
        var now = new Date().getTime();
        var lastTimeListen = this.getLastTimeListen()
        if (zmp3LogCommon.isValidParam(lastTimeListen)) {
            var timeBetweenTwoItem = now - this.getLastTimeListen();
            if (zmp3LogCommon.isValidParam(timeBetweenTwoItem)) {
                this.timeBetweenTwoItem = timeBetweenTwoItem;
            }
        }
    },
    getTuser: function () {
        if (!zmp3LogCommon.isValidParam(this.tuser)) {
            this.setTuser();
        }
        return this.tuser;
    },
    setTuser: function () {
        function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }
        this.tuser = getCookie('tuser');
    },
    getIdMediaListenBefore: function () {
        return this.idMediaListenBefore;
    },
    setIdMediaListenBefore: function (idMediaListenBefore) {
        if (zmp3LogCommon.isValidParam(idMediaListenBefore)) {
            this.idMediaListenBefore = idMediaListenBefore;
        }
    },
    parseLocalData: function (localStorageBf) {
        if (zmp3LogCommon.isValidParam(localStorageBf)) {
            listenMediaBfarr = localStorageBf.split('\.');
            return listenMediaBfarr;
        }
    },
    checkLoopSuggestion: function () {
        try {
            var idBefore = this.getIdMediaListenBefore();
            var objectRec = $('.widget-content > ul > li');
            if (zmp3LogCommon.isValidParam(objectRec)) {
                var objectFirstRec = objectRec[0];
                idFirstRec = $(objectFirstRec).attr('data-id');
                if (idFirstRec !== null && idFirstRec !== '') {
                    if (idFirstRec === idBefore) {
                        if ((this.getTypeMedia() == 1 && zmp3LogCommon.getPageName() === zmp3LogCommon.constants.SONG_PAGE_NAME)
                                || (this.getTypeMedia() == 2 && zmp3LogCommon.getPageName() === zmp3LogCommon.constants.VIDEO_PAGE_NAME)
                                || (this.getTypeMedia() == 50 && (zmp3LogCommon.getPageName() === zmp3LogCommon.constants.ALBUM_PAGE_NAME || zmp3LogCommon.getPageName() === zmp3LogCommon.constants.PLAYLIST_PAGE_NAME))
                                ) {
                            return true;
                        }
                    }
                }
            }
        } catch (ex) {
            console.log('Exception at zmp3LogListenFlow.checkLoopSuggestion', ex);
        }

        return false;
    },
    removeFirstMediaSuggest: function () {
        var objectRec = $('.widget-content > ul > li');
        if (zmp3LogCommon.isValidParam(objectRec)) {
            var objectFirstRec = objectRec[0];
            $(objectFirstRec).addClass('none');
        }
    },
    updateStorageMedia: function (type, id, pageName, isItemInAlbumPlaylist, delayTime) {

        if (!isItemInAlbumPlaylist) {
            clearInterval(zmp3LogListenFlow.counterListenTimeMedia);
        }
        var sParams = {};
        var key = '';
        sParams.ver = zmp3LogListenFlow.getVer();
        sParams.username = zmp3LogCommon.getUsername();
        sParams.userId = zmp3LogCommon.getUserId();
        sParams.zaloId = zmp3LogCommon.getZaloId();
        zmp3LogCommon.setIsVip();
        sParams.isVip = zmp3LogCommon.getIsVip();
        sParams.pageName = pageName;
        sParams.genres = this.getGenres(isItemInAlbumPlaylist);
        sParams.artists = this.getArtists(isItemInAlbumPlaylist);

        sParams.mediaId = id;
        sParams.tuser = this.getTuser();
        sParams.timeBetweenTwoItem = this.getTimeBetweenTwoItem();
        sParams.idMediaListenBefore = this.getIdMediaListenBefore();
        //sParams.isOffical = zmp3LogListenFlow.getIsOffical();

        if (isItemInAlbumPlaylist == true) {
            sParams.playlistId = zmp3LogCommon.getPageId();
            sParams.order = zmp3LogListenFlow.getOrderInAlbumPlaylist();
            sParams.isAlbum = zmp3LogListenFlow.getIsAlbum();
        }
        sParams.isAuto = this.getIsAutoMedia();

        if (typeof ZA === 'object') {
            ZA.getVisitorID(function (vid) {
                sParams.visitorId = vid;
                if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                    return;
                }
                var now = new Date().getTime();
                sParams.listenTime = zmp3LogListenFlow.getListenTime();
                var sParamsEn = zmp3LogCommon.encode(sParams);
                var storageMedia = '';
                storageMedia = type + '.' + sParams.mediaId;
                storageMedia += '.' + now;
                storageMedia += '.' + sParamsEn;
                storageMedia += '.' + 0;

                switch (pageName) {
                    case zmp3LogCommon.constants.SONG_PAGE_NAME:
                        key = zmp3LogListenFlow.constants.LOCAL_STORAGE_LISTEN_SONG_BEFORE;
                        break;
                    case zmp3LogCommon.constants.VIDEO_PAGE_NAME:
                        key = zmp3LogListenFlow.constants.LOCAL_STORAGE_LISTEN_VIDEO_BEFORE;
                        break;
                    case zmp3LogCommon.constants.ALBUM_PAGE_NAME:
                    case zmp3LogCommon.constants.PLAYLIST_PAGE_NAME:
                        key = zmp3LogListenFlow.constants.LOCAL_STORAGE_LISTEN_ALBUM_PLAYLIST_BEFORE;
                        break;
                }

                if (isItemInAlbumPlaylist) {
                    zmp3LogListenFlow.setLocalStorageListenBefore(key, storageMedia);
                    clearInterval(zmp3LogListenFlow.counterListenTimeSongInAlbum);
                    zmp3LogListenFlow.setListenTimeSongInAlbum(delayTime);//reset listenTime                    

                    function updateLocalStorageListenBefore() {
                        if (typeof player2 === 'object' && player2.isPlaying()) {
                            zmp3LogListenFlow.setListenTimeSongInAlbum(
                                    parseInt(zmp3LogListenFlow.getListenTimeSongInAlbum()) + parseInt(zmp3LogListenFlow.constants.CYCLE_TIME_UPDATE_LSTEN_TIME)
                                    );
                            sParams.listenTime = zmp3LogListenFlow.getListenTimeSongInAlbum();
                            sParams.loopMode = zmp3LogListenFlow.getLoopModeSongInAlbum();
                            sParamsEn = zmp3LogCommon.encode(sParams);
                            storageMedia = '';
                            storageMedia = type + '.' + sParams.mediaId;
                            storageMedia += '.' + now;
                            storageMedia += '.' + sParamsEn;
                            storageMedia += '.' + 0;
                            zmp3LogListenFlow.setLocalStorageListenBefore(key, storageMedia);
                        }
                    }
                    updateLocalStorageListenBefore();
                    zmp3LogListenFlow.counterListenTimeSongInAlbum = setInterval(function () {
                        updateLocalStorageListenBefore();
                    }, zmp3LogListenFlow.constants.CYCLE_TIME_UPDATE_LSTEN_TIME);
                } else {
                    zmp3LogListenFlow.setLocalStorageListenBefore(key, storageMedia);
                    zmp3LogListenFlow.setListenTime(delayTime);//reset listenTime                                        
                    function updateLocalStorageListenBefore() {
                        if ((typeof player2 === 'object' && player2.isPlaying())
                                || (key === zmp3LogListenFlow.constants.LOCAL_STORAGE_LISTEN_VIDEO_BEFORE)
                                ) {
                            zmp3LogListenFlow.setListenTime(
                                    parseInt(zmp3LogListenFlow.getListenTime()) + parseInt(zmp3LogListenFlow.constants.CYCLE_TIME_UPDATE_LSTEN_TIME)
                                    );
                            sParams.listenTime = zmp3LogListenFlow.getListenTime();
                            sParams.loopMode = zmp3LogListenFlow.getLoopMode();
                            sParamsEn = zmp3LogCommon.encode(sParams);
                            storageMedia = '';
                            storageMedia = type + '.' + sParams.mediaId;
                            storageMedia += '.' + now;
                            storageMedia += '.' + sParamsEn;
                            storageMedia += '.' + 0;

                            zmp3LogListenFlow.setLocalStorageListenBefore(key, storageMedia);
                        }
                    }
                    updateLocalStorageListenBefore();
                    zmp3LogListenFlow.counterListenTimeMedia = setInterval(function () {
                        updateLocalStorageListenBefore();
                    }, zmp3LogListenFlow.constants.CYCLE_TIME_UPDATE_LSTEN_TIME);
                }

            });
        }
    },
    updateIsAutoMedia: function (key, val) {
        var listenMediaBf = '';
        listenMediaBf = this.getLocalStorageListenBefore(key);
        var listenMediaBfarr = this.parseLocalData(listenMediaBf);
        var newListenMediaBf = '';
        newListenMediaBf = listenMediaBfarr[0];
        newListenMediaBf += '.' + listenMediaBfarr[1];
        newListenMediaBf += '.' + listenMediaBfarr[2];
        newListenMediaBf += '.' + listenMediaBfarr[3];
        newListenMediaBf += '.' + val;
        zmp3LogListenFlow.setLocalStorageListenBefore(key, newListenMediaBf);
    },
    setLocalStorageListenBefore: function (key, value) {
        if (zmp3LogCommon.isValidParam(key) && zmp3LogCommon.isValidParam(value)) {
            if (typeof localStorage !== 'undefined') {
                localStorage.setItem(key, value)
            }
        }
    },
    getLocalStorageListenBefore: function (mediaType) {
        var localStorageListenBefore = '';
        if (typeof localStorage !== 'undefined') {
            switch (mediaType) {
                case this.constants.LOCAL_STORAGE_LISTEN_SONG_BEFORE:
                    localStorageListenBefore = localStorage.getItem(this.constants.LOCAL_STORAGE_LISTEN_SONG_BEFORE);
                    break;
                case this.constants.LOCAL_STORAGE_LISTEN_VIDEO_BEFORE:
                    localStorageListenBefore = localStorage.getItem(this.constants.LOCAL_STORAGE_LISTEN_VIDEO_BEFORE);
                    break;
                case this.constants.LOCAL_STORAGE_LISTEN_ALBUM_PLAYLIST_BEFORE:
                    localStorageListenBefore = localStorage.getItem(this.constants.LOCAL_STORAGE_LISTEN_ALBUM_PLAYLIST_BEFORE);
                    break;
            }

            return localStorageListenBefore;
        }
    },
    funcTrackLogMedia: function (delayTime) {
        try {
            var type = '';
            var typeName = '';
            if (zmp3LogCommon.getPageName() === zmp3LogCommon.constants.SONG_PAGE_NAME) {
                type = this.constants.TYPE_SONG;
                typeName = this.constants.LOCAL_STORAGE_LISTEN_SONG_BEFORE;
            }
            if (zmp3LogCommon.getPageName() === zmp3LogCommon.constants.VIDEO_PAGE_NAME) {
                type = this.constants.TYPE_VIDEO;
                typeName = this.constants.LOCAL_STORAGE_LISTEN_VIDEO_BEFORE;
            }
            if (zmp3LogCommon.getPageName() === zmp3LogCommon.constants.ALBUM_PAGE_NAME
                    || zmp3LogCommon.getPageName() === zmp3LogCommon.constants.PLAYLIST_PAGE_NAME) {
                type = this.constants.TYPE_ALBUM_PLAYLIST;
                typeName = this.constants.LOCAL_STORAGE_LISTEN_ALBUM_PLAYLIST_BEFORE;
            }


            var listenMediaBf = '';
            listenMediaBf = this.getLocalStorageListenBefore(typeName);

            var listenMediaBfarr = this.parseLocalData(listenMediaBf);
            if (typeof listenMediaBfarr !== 'undefined' && listenMediaBfarr.length === 5) {
                this.setTypeMedia(listenMediaBfarr[0]);
                this.setIdMediaListenBefore(listenMediaBfarr[1]);
                this.setLastTimeListen(listenMediaBfarr[2]);
                this.setSparamsMedia(listenMediaBfarr[3]);
                this.setIsAutoMedia(listenMediaBfarr[4]);
                zmp3LogCommon.push(zmp3LogListenFlow.getSparamsMedia(), zmp3LogListenFlow.constants.LOG_CATEGORY_LISTEN_FLOW);

                if (this.checkLoopSuggestion()) {
                    this.removeFirstMediaSuggest();
                }
            }

            var isItemInAlbumPlaylist = false;
            var id = zmp3LogCommon.getPageId();

            this.updateStorageMedia(type, id, zmp3LogCommon.getPageName(), isItemInAlbumPlaylist, delayTime);
        } catch (ex) {
            console.log('Exception at zmp3LogListenFlow.onProgress', ex);
        }
    },
    funcTrackLogSongInAlbumPlaylist: function (id) {

        var listenSongBf = '';
        listenSongBf = this.getLocalStorageListenBefore(this.constants.LOCAL_STORAGE_LISTEN_SONG_BEFORE);

        var listenMediaBfarr = this.parseLocalData(listenSongBf);
        if (typeof listenMediaBfarr !== 'undefined' && listenMediaBfarr.length === 5) {
            this.setTypeMedia(listenMediaBfarr[0]);
            this.setIdMediaListenBefore(listenMediaBfarr[1]);
            this.setLastTimeListen(listenMediaBfarr[2]);
            this.setSparamsMedia(listenMediaBfarr[3]);
            this.setIsAutoMedia(listenMediaBfarr[4]);
            zmp3LogCommon.push(zmp3LogListenFlow.getSparamsMedia(), zmp3LogListenFlow.constants.LOG_CATEGORY_LISTEN_FLOW);
            if (this.checkLoopSuggestion()) {
                this.removeFirstMediaSuggest();
            }
        }
        var isItemInAlbumPlaylist = true;
        this.updateStorageMedia(this.constants.TYPE_SONG, id, zmp3LogCommon.constants.SONG_PAGE_NAME, isItemInAlbumPlaylist, 5000);
    },
};

/*
 * Description: Ghi log danh sach nhung media goi y trong phan recommend ("Ban co muon nghe").
 * Author: Haon
 * Date create: 2016-Sep-07 
 * Date update: 2016-Sep-07 
 * Note: 
 */
var zmp3LogRecommend = {
    order: 1,
    recIds: [],
    posOfLastItem: 0,
    tuser: '',
    constants: {
        LOG_CATEGORY_RECOMMEND: 'log-recommend',
    },
    getOrder: function () {
        return this.order;
    },
    increaseOrder: function () {
        this.order++;
    },
    getRecIds: function () {
        return this.recIds;
    },
    setRecIds: function (id) {
        if (id != '') {
            this.recIds.push(id);
        }
    },
    getPosOfLastItem: function () {
        return this.posOfLastItem;
    },
    setPosOfLastItem: function (pos) {
        if (pos > 0) {
            this.posOfLastItem = pos;
        }
    },
    getTuser: function () {
        if (!zmp3LogCommon.isValidParam(this.tuser)) {
            this.setTuser();
        }
        return this.tuser;
    },
    setTuser: function () {
        function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }
        this.tuser = getCookie('tuser');
    },
    genRecIds: function () {
        var objectRec = $('.widget-content > ul > li');
        if (typeof objectRec === 'object') {
            var start = this.getPosOfLastItem();
            for (var i = start; i < objectRec.length; i++) {
                this.setRecIds($(objectRec[i]).attr('data-id'));
            }
            this.setPosOfLastItem(objectRec.length);
        }
    },
    reset: function () {
        this.recIds = [];
    },
    handlingRecomendLog: function () {
        try {
            var sParams = {};
            sParams.order = this.getOrder();
            sParams.pageName = zmp3LogCommon.getPageName();
            sParams.mediaId = zmp3LogCommon.getPageId();
            sParams.username = zmp3LogCommon.getUsername();
            sParams.userId = zmp3LogCommon.getUserId();
            sParams.zaloId = zmp3LogCommon.getZaloId();
            zmp3LogCommon.setIsVip();
            sParams.isVip = zmp3LogCommon.getIsVip();
            if (typeof ZA === 'object') {
                ZA.getVisitorID(function (vid) {
                    sParams.visitorId = vid;
                    if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                        return;
                    }
                    zmp3LogRecommend.genRecIds();
                    arrRecIds = zmp3LogRecommend.getRecIds();
                    sParams.recIds = arrRecIds.join();
                    sParams.tuser = zmp3LogRecommend.getTuser();

                    var sParamsEn = zmp3LogCommon.encode(sParams);
                    if (zmp3LogCommon.isValidParam(sParamsEn)) {
                        zmp3LogCommon.push(sParamsEn, zmp3LogRecommend.constants.LOG_CATEGORY_RECOMMEND);
                    }
                    zmp3LogRecommend.increaseOrder();
                    zmp3LogRecommend.reset();
                });
            }
        } catch (ex) {
            console.log('Exception at zmp3LogRecommend.handlingRecomendLog: ', ex);
        }
    }
};

if (typeof zmp3LogRecommend !== 'undefined'
        && zmp3LogRecommend !== null
        && typeof zmp3LogRecommend.handlingRecomendLog === 'function') {
    try {
        if (typeof zmp3LogCommon !== 'undefined' && zmp3LogCommon !== null) {
            if (zmp3LogCommon.getPageName() === zmp3LogCommon.constants.SONG_PAGE_NAME
                    || zmp3LogCommon.getPageName() === zmp3LogCommon.constants.VIDEO_PAGE_NAME
                    || zmp3LogCommon.getPageName() === zmp3LogCommon.constants.ALBUM_PAGE_NAME
                    || zmp3LogCommon.getPageName() === zmp3LogCommon.constants.PLAYLIST_PAGE_NAME) {
                $(function () {
                    zmp3LogRecommend.handlingRecomendLog();
                });
            }
        }
    } catch (ex) {
        console.log('Exception at zmp3LogRecommend.handlingRecomendLog: ', ex);
    }
}

/*
 * Description: Ghi log ref de biet trang hien hanh duoc referrer den tu trang nao
 * Author: Haon
 * Date create: 2016-Sep-12 
 * Date update: 2016-Sep-14 
 * Note: 
 */
var zmp3LogRef = {
    redirectPageName: '',
    redirectMediaId: '',
    order: '',
    tuser: '',
    constants: {
        LOG_CATEGORY_SEACH_SUGGEST_NOT_FOUNND: 'log-search-sg-nf',
        LOG_CATEGORY_REF: 'log-ref',
        //SEARCH-SUGGEST
        SELECT_SESSION_SEARCH_SUGGEST: '#sugSong, #sugAlbum, #sugVideo, #sugArtist',
        SESSION_NAME_SEARCH_SUGGEST: 'search-suggest',
        //PLAY-PAGE
        SELECT_SESSION_PLAY_RECOMMEND: '#songRec, #videoRec, #playlistRec',
        SESSION_NAME_SONG_RECOMMEND: 'song-recommend',
        SESSION_NAME_VIDEO_RECOMMEND: 'video-recommend',
        SESSION_NAME_ALBUM_RECOMMEND: 'album-recommend',
        SELECT_SESSION_ALBUM_RELATIVE: '#albumOfArtist',
        SESSION_NAME_ALBUM_RELATIVE: 'album-relative',
        SELECT_SESSION_VIDEO_RELATIVE: '#videoOfArtist',
        SESSION_NAME_VIDEO_RELATIVE: 'video-relative',
        SELECT_SESSION_PLAYLIST_COLLECTION: '#albumCollection',
        SESSION_NAME_PLAYLIST_COLLECTION: 'playlist-collect',
        SELECT_SESSION_PLAYLIST_ITEMS_ICON_REDIRECT: '#playlistItems .direct',
        SESSION_NAME_PLAYLIST_ITEMS_ICON_REDIRECT: 'playlist-items-icon-redirect',
        SELECT_SESSION_PLAY_ICON_JUMP_MV: '#html5player .zm-jump-mv',
        SESSION_NAME_PLAY_ICON_JUMP_MV: 'icon-jump-mv',
        SELECT_SESSION_PLAYLIST_ITEMS_ICON_JUMP_MV: '#playlistItems .video',
        SESSION_NAME_PLAYLIST_ITEMS_ICON_JUMP_MV: 'pl-icon-jump-mv',
        //HOME-PAGE
        SELECT_SESSION_HOME_SLIDES_BANNER: '#feature',
        SESSION_NAME_HOME_SLIDES_BANNER: 'home-banner',
        SELECT_SESSION_HOME_ALBUM_HOT: '#albumHot',
        SESSION_NAME_HOME_ALBUM_HOT: 'home-album-hot',
        SELECT_SESSION_HOME_PLAYLIST_COLLECTION: '#albumCollection',
        SESSION_NAME_HOME_PLAYLIST_COLLECTION: 'home-playlist-collection',
        SELECT_SESSION_HOME_VIDEO_HOT: '#videohot',
        SESSION_NAME_HOME_VIDEO_HOT: 'home-video-hot',
        SELECT_SESSION_HOME_VIET_HOT_SONG: '#viet-hot-song',
        SESSION_NAME_HOME_VIET_HOT_SONG: 'home-viet-hot',
        SELECT_SESSION_HOME_VIET_NEW_SONG: '#viet-new-song',
        SESSION_NAME_HOME_VIET_NEW_SONG: 'home-viet-new',
        SELECT_SESSION_HOME_CHART_VIET_SONG: '#_chart_songIWZ9Z08I',
        SESSION_NAME_HOME_CHART_VIET_SONG: 'home-chart-viet-song',
        SELECT_SESSION_HOME_CHART_AUMY_SONG: '#_chart_songIWZ9Z0BW',
        SESSION_NAME_HOME_CHART_AUMY_SONG: 'home-chart-aumy-song',
        SELECT_SESSION_HOME_CHART_HAN_SONG: '#_chart_songIWZ9Z0BO',
        SESSION_NAME_HOME_CHART_HAN_SONG: 'home-chart-han-song',
        SELECT_SESSION_HOME_CHART_VIET_SONG_ICON_PLAY_ALL: '._chart_songIWZ9Z08I.icon-play-all',
        SESSION_NAME_HOME_CHART_VIET_SONG_ICON_PLAY_ALL: 'home-chart-viet-song-icon-play-all',
        SELECT_SESSION_HOME_CHART_AUMY_SONG_ICON_PLAY_ALL: '._chart_songIWZ9Z0BW.icon-play-all',
        SESSION_NAME_HOME_CHART_AUMY_SONG_ICON_PLAY_ALL: 'home-chart-aumy-song-icon-play-all',
        SELECT_SESSION_HOME_CHART_HAN_SONG_ICON_PLAY_ALL: '._chart_songIWZ9Z0BO.icon-play-all',
        SESSION_NAME_HOME_CHART_HAN_SONG_ICON_PLAY_ALL: 'home-chart-han-song-icon-play-all',
        SELECT_SESSION_HOME_CHART_VIET_VIDEO: '#_chart_videoIWZ9Z08W',
        SESSION_NAME_HOME_CHART_VIET_VIDEO: 'home-chart-viet-video',
        SELECT_SESSION_HOME_CHART_AUMY_VIDEO: '#_chart_videoIWZ9Z0BU',
        SESSION_NAME_HOME_CHART_AUMY_VIDEO: 'home-chart-aumy-video',
        SELECT_SESSION_HOME_CHART_HAN_VIDEO: '#_chart_videoIWZ9Z0BZ',
        SESSION_NAME_HOME_CHART_HAN_VIDEO: 'home-chart-han-video',
        SELECT_SESSION_HOME_CHART_VIET_VIDEO_ICON_PLAY_ALL: '._chart_videoIWZ9Z08W.icon-play-all',
        SESSION_NAME_HOME_CHART_VIET_VIDEO_ICON_PLAY_ALL: 'home-chart-viet-video-icon-play-all',
        SELECT_SESSION_HOME_CHART_AUMY_VIDEO_ICON_PLAY_ALL: '._chart_videoIWZ9Z0BU.icon-play-all',
        SESSION_NAME_HOME_CHART_AUMY_VIDEO_ICON_PLAY_ALL: 'home-chart-aumy-video-icon-play-all',
        SELECT_SESSION_HOME_CHART_HAN_VIDEO_ICON_PLAY_ALL: '._chart_videoIWZ9Z0BZ.icon-play-all',
        SESSION_NAME_HOME_CHART_HAN_VIDEO_ICON_PLAY_ALL: 'home-chart-han-video-icon-play-all',
        SELECT_SESSION_HOME_CHART_VIET_ALBUM: '#_chart_albumIWZ9Z08O',
        SESSION_NAME_HOME_CHART_VIET_ALBUM: 'home-chart-viet-album',
        SELECT_SESSION_HOME_CHART_AUMY_ALBUM: '#_chart_albumIWZ9Z0B6',
        SESSION_NAME_HOME_CHART_AUMY_ALBUM: 'home-chart-aumy-album',
        SELECT_SESSION_HOME_CHART_HAN_ALBUM: '#_chart_albumIWZ9Z0B7',
        SESSION_NAME_HOME_CHART_HAN_ALBUM: 'home-chart-han-album',
        //TOPIC-PAGE
        SELECT_SESSION_TOPIC_COLLECTION: '.page-hottopic',
        SESSION_NAME_TOPIC_DETAILT_COLLECTION: 'topic-detail-collection',
        SESSION_NAME_TOPIC_PLAYLIST_COLLECTION: 'topic-playlist-collection',
        SESSION_NAME_TOPIC_VIDEO_COLLECTION: 'topic-video-collection',
        //SEARCH-PAGE
        SELECT_SESSION_SEARCH_SONG: '#song-search-rs',
        SESSION_NAME_SEARCH_SONG_SONG: 'search-song',
        SELECT_SESSION_SEARCH_VIDEO: '#video-search-rs',
        SESSION_NAME_SEARCH_VIDEO: 'search-video',
        SELECT_SESSION_SEARCH_ALBUM: '#playlist-search-rs',
        SESSION_NAME_SEARCH_ALBUM: 'topic-album',
    },
    getRedirectPageName: function () {
        return this.redirectPageName;
    },
    setRedirectPageName: function (value) {
        this.redirectPageName = value;
    },
    getRedirectMediaId: function () {
        return this.redirectMediaId;
    },
    setRedirectMediaId: function (value) {
        this.redirectMediaId = value;
    },
    getOrder: function () {
        return this.order;
    },
    setOrder: function (tracking, orderAttr) {
        if (zmp3LogCommon.isValidParam(tracking)) {
            var arrTrackingParams = tracking.split('_');
            if (arrTrackingParams.length > 0) {
                var order = arrTrackingParams[arrTrackingParams.length - 1];
                try {
                    if ($.isNumeric(order)) {
                        this.order = order;
                    }
                } catch (ex) {
                    console.log('Exception at zmp3LogRef.setOrder');
                }
            }
        } else {
            if (zmp3LogCommon.isValidParam(orderAttr)) {
                try {
                    if ($.isNumeric(orderAttr)) {
                        this.order = orderAttr;
                    }
                } catch (ex) {
                    console.log('Exception at zmp3LogRef.setOrder');
                }
            }
        }
    },
    getTuser: function () {
        if (!zmp3LogCommon.isValidParam(this.tuser)) {
            this.setTuser();
        }
        return this.tuser;
    },
    setTuser: function () {
        function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }
        this.tuser = getCookie('tuser');
    },
    setRedirectParams: function (url) {
        var arrUrl = url.split('/');
        if (arrUrl.length === 6) {
            var pageName = arrUrl[3];
            if (zmp3LogCommon.isValidParam(pageName)) {
                this.setRedirectPageName(pageName);
            }
            var paramsId = arrUrl[5];
            var pageId = paramsId.substring(0, 8);
            if (zmp3LogCommon.isValidParam(pageId)) {
                this.setRedirectMediaId(pageId);
            }
        } else {
            if (arrUrl.length === 4) {
                var pageName = arrUrl[1];
                if (zmp3LogCommon.isValidParam(pageName)) {
                    this.setRedirectPageName(pageName);
                }
                var paramsId = arrUrl[3];
                var pageId = paramsId.substring(0, 8);
                if (zmp3LogCommon.isValidParam(pageId)) {
                    this.setRedirectMediaId(pageId);
                }
            } else {
                if (arrUrl.length === 5) {
                    var pageName = arrUrl[3];
                    if (zmp3LogCommon.isValidParam(pageName)) {
                        this.setRedirectPageName(pageName);
                    }
                }
            }
        }
    },
    checkTypeRedirect: function (e) {
        var typeClick = 0; //Left mouse button pressed
        if (zmp3LogCommon.isValidParam(e)) {
            switch (e.which) {
                case 1: //Left mouse button pressed                        
                    if (e.ctrlKey) {
                        typeClick = 2;
                    } else {
                        typeClick = 1;
                    }
                    break;
                case 2: //Middle mouse button pressed 
                    typeClick = 2;
                    break;
                case 3: //Right mouse button pressed
                    typeClick = 0;
                    break;
                default:
                    typeClick = 1;
            }
        }
        return typeClick;
    },
    handlingRedirect: function (href, typeClick) {
        try {
            if (typeClick === 1) {
                window.location = href;
            }
            if (typeClick === 2) {
                window.open(href, '_blank');
            }
        } catch (ex) {
            console.log('Exception at zmp3LogRef.handlingRedirect', ex);
        }
    },
    getJsonFromUrl: function () {
        var query = location.search.substr(1);
        var result = {};
        query.split('&').forEach(function (part) {
            var item = part.split('=');
            result[item[0]] = decodeURIComponent(item[1]);
        });
        return result;
    },
    commonEventListener: function (selectSession, element, sessionName, sParams) {
        if (zmp3LogCommon.isValidParam(selectSession)
                && zmp3LogCommon.isValidParam(sessionName)) {
            $(selectSession).on('click', element, function (e) {
                try {
                    var typeClick = 0; //Left mouse button pressed                    
                    if (zmp3LogCommon.isValidParam(this.target) && this.target === '_blank') {
                        typeClick = 2;
                    } else {
                        typeClick = zmp3LogRef.checkTypeRedirect(e);
                    }

                    if (typeClick !== 0) {
                        if (zmp3LogCommon.isValidParam(this.href)) {
                            var href = this.href;
                            if (zmp3LogCommon.isValidParam(href)) {
                                e.preventDefault();
                                sParams = sParams || {};
                                if (zmp3LogCommon.isValidParam(href)) {
                                    zmp3LogRef.setRedirectParams(href);
                                    sParams.mediaId = zmp3LogRef.getRedirectMediaId();
                                    if (!zmp3LogCommon.isValidParam(sParams.mediaId)) {
                                        return null;
                                    }

                                    sParams.pageName = zmp3LogRef.getRedirectPageName();
                                    sParams.username = zmp3LogCommon.getUsername();
                                    sParams.userId = zmp3LogCommon.getUserId();
                                    sParams.zaloId = zmp3LogCommon.getZaloId();
                                    zmp3LogCommon.setIsVip();
                                    sParams.isVip = zmp3LogCommon.getIsVip();
                                    if (typeof ZA === 'object') {
                                        ZA.getVisitorID(function (vid) {
                                            sParams.visitorId = vid;
                                        });

                                        if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                                            return;
                                        }
                                        sParams.fromPage = zmp3LogCommon.getPageName();
                                        sParams.fromSession = sessionName;
                                        sParams.fromMediaId = zmp3LogCommon.getPageId();

                                        var trackingAttr = $(this).attr('tracking');
                                        var orderAttr = $(this).attr('order');
                                        if (zmp3LogCommon.isValidParam(trackingAttr) || zmp3LogCommon.isValidParam(orderAttr)) {
                                            zmp3LogRef.setOrder(trackingAttr, orderAttr);
                                            if (zmp3LogCommon.isValidParam(zmp3LogRef.getOrder())) {
                                                sParams.order = zmp3LogRef.getOrder();
                                            }
                                        }
                                        if (!zmp3LogCommon.isValidParam(sParams.order)) {
                                            var orderSongRec = $('li#songrec' + sParams.mediaId).index();
                                            if (orderSongRec > 0) {
                                                sParams.order = orderSongRec;
                                            }
                                        }
                                        if (!zmp3LogCommon.isValidParam(sParams.order)) {
                                            var orderVideoRec = $('li#videorec' + sParams.mediaId).index();
                                            if (orderVideoRec > 0) {
                                                sParams.order = orderVideoRec;
                                            }
                                        }
                                        if (!zmp3LogCommon.isValidParam(sParams.order)) {
                                            var orderPlaylistRec = $('li#playlistrec' + sParams.mediaId).index();
                                            if (orderPlaylistRec > 0) {
                                                sParams.order = orderPlaylistRec;
                                            }
                                        }

                                        if (zmp3LogCommon.isValidParam($('#sug form input').val())) {
                                            sParams.fromKeySearch = $('#sug form input').val();
                                        }

                                        sParams.tuser = zmp3LogRef.getTuser();

                                        var sParamsEn = zmp3LogCommon.encode(sParams);
                                        if (zmp3LogCommon.isValidParam(sParamsEn)) {
                                            zmp3LogCommon.push(sParamsEn, zmp3LogRef.constants.LOG_CATEGORY_REF);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (ex) {
                    console.log('Exception at zmp3LogRef.commonHandlingEvent', ex);
                } finally {
                    if (zmp3LogCommon.isValidParam(this.href) && zmp3LogCommon.isValidParam(typeClick)) {
                        zmp3LogRef.handlingRedirect(this.href, typeClick);
                    }
                }
            });
        }
    },
    checkLocalStorageSearchSuggest: function () {
        try {
            if (typeof localStorage !== 'undefined') {
                var checkSeachSuggestNotFound = localStorage.getItem('__zmp3seachsugnf');
                if (checkSeachSuggestNotFound !== null && checkSeachSuggestNotFound !== '') {
                    if (MP3.MEDIAID === null || MP3.MEDIAID === 'undefined' || MP3.MEDIAID === '') {
                        var sParams = {};
                        var arr = checkSeachSuggestNotFound.split('\.');
                        if (arr !== null && arr.length === 3) {
                            sParams.fromKeySearch = arr[0];
                            sParams.mediaId = arr[1];
                            sParams.pageName = arr[2];
                            var sParamsEn = zmp3LogCommon.encode(sParams);
                            if (zmp3LogCommon.isValidParam(sParamsEn)) {
                                zmp3LogCommon.push(sParamsEn, zmp3LogRef.constants.LOG_CATEGORY_SEACH_SUGGEST_NOT_FOUNND);
                            }
                        }
                    }
                }

                window.localStorage.removeItem("__zmp3seachsugnf");
            }
        } catch (ex) {
            console.log('Exception at zmp3LogRef.checkLocalStorageSearchSuggest', ex);
        }
    },
    setLocalStorageSearchSuggest: function (sParams) {
        try {
            if (zmp3LogCommon.isValidParam(sParams)
                    && zmp3LogCommon.isValidParam(sParams.fromKeySearch)
                    && zmp3LogCommon.isValidParam(sParams.mediaId)
                    && zmp3LogCommon.isValidParam(sParams.pageName)) {
                var checkSeachSuggestNotFound = '';
                checkSeachSuggestNotFound = sParams.fromKeySearch + '.' + sParams.mediaId + '.' + sParams.pageName;
                if (typeof localStorage !== 'undefined') {
                    localStorage.setItem('__zmp3seachsugnf', checkSeachSuggestNotFound);
                }
            }
        } catch (ex) {
            console.log('Exception at zmp3LogRef.setLocalStorageSearchSuggest', ex);
        }
    },
    eventListenerSearchSuggest: function (selectSession, element, sessionName, sParams) {
        if (zmp3LogCommon.isValidParam(selectSession)
                //&& zmp3LogCommon.isValidParam(element)
                && zmp3LogCommon.isValidParam(sessionName)) {
            $(selectSession).on('click', element, function (e) {
                try {
                    var typeClick = 0; //Left mouse button pressed                    
                    if (zmp3LogCommon.isValidParam(this.target) && this.target === '_blank') {
                        typeClick = 2;
                    } else {
                        typeClick = zmp3LogRef.checkTypeRedirect(e);
                    }

                    if (typeClick !== 0) {
                        if (zmp3LogCommon.isValidParam(this.href)) {
                            var href = this.href;
                            if (zmp3LogCommon.isValidParam(href)) {
                                e.preventDefault();
                                sParams = sParams || {};
                                if (zmp3LogCommon.isValidParam(href)) {
                                    zmp3LogRef.setRedirectParams(href);

                                    if (zmp3LogRef.getRedirectMediaId() === '') {
                                        if (typeof $(this).data() !== 'undefined' && $(this).data().id !== 'undefined') {
                                            zmp3LogRef.setRedirectMediaId($(this).data().id);
                                        }
                                    }

                                    sParams.mediaId = zmp3LogRef.getRedirectMediaId();
                                    if (!zmp3LogCommon.isValidParam(sParams.mediaId)) {
                                        return null;
                                    }

                                    sParams.pageName = zmp3LogRef.getRedirectPageName();
                                    sParams.username = zmp3LogCommon.getUsername();
                                    sParams.userId = zmp3LogCommon.getUserId();
                                    sParams.zaloId = zmp3LogCommon.getZaloId();
                                    zmp3LogCommon.setIsVip();
                                    sParams.isVip = zmp3LogCommon.getIsVip();
                                    sParams.fromPage = zmp3LogCommon.getPageName();
                                    sParams.fromSession = sessionName;
                                    sParams.fromMediaId = zmp3LogCommon.getPageId();

                                    var trackingAttr = $(this).attr('tracking');
                                    var orderAttr = $(this).attr('order');
                                    if (zmp3LogCommon.isValidParam(trackingAttr) || zmp3LogCommon.isValidParam(orderAttr)) {
                                        zmp3LogRef.setOrder(trackingAttr, orderAttr);
                                        if (zmp3LogCommon.isValidParam(zmp3LogRef.getOrder())) {
                                            sParams.order = zmp3LogRef.getOrder();
                                        }
                                    }
                                    if (!zmp3LogCommon.isValidParam(sParams.order)) {
                                        var orderSongRec = $('li#songrec' + sParams.mediaId).index();
                                        if (orderSongRec > 0) {
                                            sParams.order = orderSongRec;
                                        }
                                    }
                                    if (!zmp3LogCommon.isValidParam(sParams.order)) {
                                        var orderVideoRec = $('li#videorec' + sParams.mediaId).index();
                                        if (orderVideoRec > 0) {
                                            sParams.order = orderVideoRec;
                                        }
                                    }
                                    if (!zmp3LogCommon.isValidParam(sParams.order)) {
                                        var orderPlaylistRec = $('li#playlistrec' + sParams.mediaId).index();
                                        if (orderPlaylistRec > 0) {
                                            sParams.order = orderPlaylistRec;
                                        }
                                    }

                                    if (zmp3LogCommon.isValidParam($('#sug form input').val())) {
                                        sParams.fromKeySearch = $('#sug form input').val();
                                    }

                                    if (typeof ZA === 'object') {
                                        ZA.getVisitorID(function (vid) {
                                            sParams.visitorId = vid;
                                            if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                                                return;
                                            }
                                            zmp3LogRef.setLocalStorageSearchSuggest(sParams);
                                            var sParamsEn = zmp3LogCommon.encode(sParams);
                                            if (zmp3LogCommon.isValidParam(sParamsEn)) {
                                                zmp3LogCommon.push(sParamsEn, zmp3LogRef.constants.LOG_CATEGORY_REF);
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                } catch (ex) {
                    console.log('Exception at zmp3LogRef.commonHandlingEvent', ex);
                } finally {
                    if (zmp3LogCommon.isValidParam(this.href) && zmp3LogCommon.isValidParam(typeClick)) {
                        zmp3LogRef.handlingRedirect(this.href, typeClick);
                    }
                }
            });
        }
    },
    eventSessionSearchSuggest: function () {
        var typeClick = 0; //Left mouse button pressed
        var href = '';
        try {
            var selectSession = this.constants.SELECT_SESSION_SEARCH_SUGGEST,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_SEARCH_SUGGEST;
            var sParams = {};
            sParams.fromKeySearch = $('#sug form input').val();
            this.eventListenerSearchSuggest(selectSession, element, sessionName, sParams);

            var sugBox = $('#sug');
            var resBox = $('.fn-result', sugBox);
            $('input[name="q"]', sugBox).keydown(function (e) {
                var el = $('.fn-list .fn-item.active', resBox);
                if (el.length > 0) {
                    if (e.keyCode === 13) {
                        typeClick = 1;
                        href = $('.fn-link', el).attr('href');
                        setPushLog(href);
                        if (zmp3LogCommon.isValidParam(href)) {
                            zmp3LogRef.handlingRedirect(href, typeClick);
                        }
                    }
                }
            });
        } catch (ex) {
            console.log('Exception at zmp3LogRef.listenSessionRecommend: ', ex);
        }

        function setPushLog(href) {
            if (!zmp3LogCommon.isValidParam(href)) {
                return null;
            }
            var sParams = {};
            zmp3LogRef.setRedirectParams(href);
            sParams.mediaId = zmp3LogRef.getRedirectMediaId();
            if (!zmp3LogCommon.isValidParam(sParams.mediaId)) {
                return null;
            }
            sParams.pageName = zmp3LogRef.getRedirectPageName();
            sParams.username = zmp3LogCommon.getUsername();
            sParams.userId = zmp3LogCommon.getUserId();
            sParams.zaloId = zmp3LogCommon.getZaloId();
            zmp3LogCommon.setIsVip();
            sParams.isVip = zmp3LogCommon.getIsVip();
            sParams.fromPage = zmp3LogCommon.getPageName();
            sParams.fromSession = zmp3LogRef.constants.SESSION_NAME_SEARCH_SUGGEST;
            sParams.fromMediaId = zmp3LogCommon.getPageId();
            sParams.fromKeySearch = $('#sug form input').val();
            if (typeof ZA === 'object') {
                ZA.getVisitorID(function (vid) {
                    sParams.visitorId = vid;
                    if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                        return;
                    }
                    zmp3LogRef.setLocalStorageSearchSuggest(sParams);
                    var sParamsEn = zmp3LogCommon.encode(sParams);
                    if (zmp3LogCommon.isValidParam(sParamsEn)) {
                        zmp3LogCommon.push(sParamsEn, zmp3LogRef.constants.LOG_CATEGORY_REF);
                    }
                });
            }
        }
    },
    eventSessionRecommend: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_PLAY_RECOMMEND,
                    element = 'a.track-log',
                    sessionName = '';
            var pageName = zmp3LogCommon.getPageName();
            if (zmp3LogCommon.isValidParam(pageName)) {
                if (pageName === zmp3LogCommon.constants.SONG_PAGE_NAME) {
                    sessionName = zmp3LogRef.constants.SESSION_NAME_SONG_RECOMMEND;
                }
                if (pageName === zmp3LogCommon.constants.VIDEO_PAGE_NAME) {
                    sessionName = zmp3LogRef.constants.SESSION_NAME_VIDEO_RECOMMEND;
                }
                if (pageName === zmp3LogCommon.constants.ALBUM_PAGE_NAME) {
                    sessionName = zmp3LogRef.constants.SESSION_NAME_ALBUM_RECOMMEND;
                }
            }

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionRecommend', ex);
        }
    },
    eventSessionPlaylistItems: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_PLAYLIST_ITEMS_ICON_REDIRECT,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_PLAYLIST_ITEMS_ICON_REDIRECT;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionRecommend', ex);
        }
    },
    eventSessionAlbumRelative: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_ALBUM_RELATIVE,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_ALBUM_RELATIVE;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionAlbumRelative', ex);
        }
    },
    eventSessionVideoRelative: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_VIDEO_RELATIVE,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_VIDEO_RELATIVE;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionVideoRelative', ex);
        }
    },
    eventSessionPlaylistCollection: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_PLAYLIST_COLLECTION,
                    element = 'a',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_PLAYLIST_COLLECTION;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionPlaylistCollection', ex);
        }
    },
    eventSessionJumpMV: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_PLAY_ICON_JUMP_MV,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_PLAY_ICON_JUMP_MV;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionJumpMV', ex);
        }
    },
    eventSessionJumpMVInPlaylistItems: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_PLAYLIST_ITEMS_ICON_JUMP_MV,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_PLAYLIST_ITEMS_ICON_JUMP_MV;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionJumpMVInPlaylistItems', ex);
        }
    },
    eventSessionHomeSlideBanner: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_SLIDES_BANNER,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_SLIDES_BANNER;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeSlideBanner', ex);
        }
    },
    eventSessionHomeAlbumHot: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_ALBUM_HOT,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_ALBUM_HOT;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeAlbumHot', ex);
        }
    },
    eventSessionHomePlaylistCollection: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_PLAYLIST_COLLECTION,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_PLAYLIST_COLLECTION;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomePlaylistCollection', ex);
        }
    },
    eventSessionHomeVideoHot: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_VIDEO_HOT,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_VIDEO_HOT;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeVideoHot', ex);
        }
    },
    eventSessionHomeVietHotSong: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_VIET_HOT_SONG,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_VIET_HOT_SONG;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeVietHotSong', ex);
        }
    },
    eventSessionHomeVietNewSong: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_VIET_NEW_SONG,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_VIET_NEW_SONG;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeVietNewSong', ex);
        }
    },
    eventSessionHomeChartSong: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_VIET_SONG,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_VIET_SONG;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_AUMY_SONG,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_AUMY_SONG;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_HAN_SONG,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_HAN_SONG;

            this.commonEventListener(selectSession, element, sessionName, '');

            //Press Icon play all
            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_VIET_SONG_ICON_PLAY_ALL,
                    element = '',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_VIET_SONG_ICON_PLAY_ALL;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_AUMY_SONG_ICON_PLAY_ALL,
                    element = '',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_AUMY_SONG_ICON_PLAY_ALL;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_HAN_SONG_ICON_PLAY_ALL,
                    element = '',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_HAN_SONG_ICON_PLAY_ALL;

            this.commonEventListener(selectSession, element, sessionName, '');

        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeChartSong', ex);
        }
    },
    eventSessionHomeChartVideo: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_VIET_VIDEO,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_VIET_VIDEO;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_AUMY_VIDEO,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_AUMY_VIDEO;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_HAN_VIDEO,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_HAN_VIDEO;

            this.commonEventListener(selectSession, element, sessionName, '');

            //Press Icon play all
            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_VIET_VIDEO_ICON_PLAY_ALL,
                    element = '',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_VIET_VIDEO_ICON_PLAY_ALL;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_AUMY_VIDEO_ICON_PLAY_ALL,
                    element = '',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_AUMY_VIDEO_ICON_PLAY_ALL;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_HAN_VIDEO_ICON_PLAY_ALL,
                    element = '',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_HAN_VIDEO_ICON_PLAY_ALL;

            this.commonEventListener(selectSession, element, sessionName, '');

        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeChartVideo', ex);
        }
    },
    eventSessionHomeChartAlbum: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_VIET_ALBUM,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_VIET_ALBUM;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_AUMY_ALBUM,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_AUMY_ALBUM;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_HOME_CHART_HAN_ALBUM,
                    element = 'a.track-log',
                    sessionName = zmp3LogRef.constants.SESSION_NAME_HOME_CHART_HAN_ALBUM;

            this.commonEventListener(selectSession, element, sessionName, '');

        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionHomeChartAlbum', ex);
        }
    },
    eventSessionTopic: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_TOPIC_COLLECTION,
                    element = 'a.track-log',
                    sessionName = '';
            var urlParams = this.getJsonFromUrl();
            if (zmp3LogCommon.isValidParam(urlParams) && zmp3LogCommon.isValidParam(urlParams['view'])) {
                if (urlParams['view'] === 'playlist') {
                    sessionName = this.constants.SESSION_NAME_TOPIC_PLAYLIST_COLLECTION;
                } else if (urlParams['view'] === 'video') {
                    sessionName = this.constants.SESSION_NAME_TOPIC_VIDEO_COLLECTION;
                }
            } else {
                sessionName = this.constants.SESSION_NAME_TOPIC_DETAILT_COLLECTION;
            }
            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionTopic', ex);
        }
    },
    eventSessionSearchPage: function () {
        try {
            var selectSession = this.constants.SELECT_SESSION_SEARCH_SONG,
                    element = 'a.track-log',
                    sessionName = this.constants.SESSION_NAME_SEARCH_SONG_SONG;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_SEARCH_VIDEO,
                    element = 'a.track-log',
                    sessionName = this.constants.SESSION_NAME_SEARCH_VIDEO;

            this.commonEventListener(selectSession, element, sessionName, '');

            var selectSession = this.constants.SELECT_SESSION_SEARCH_ALBUM,
                    element = 'a.track-log',
                    sessionName = this.constants.SESSION_NAME_SEARCH_ALBUM;

            this.commonEventListener(selectSession, element, sessionName, '');
        } catch (ex) {
            console.log('Exception at zmp3LogRef.eventSessionSearchPage', ex);
        }
    },
    handlingRefLog: function () {
        try {
            switch (zmp3LogCommon.getPageName()) {
                case zmp3LogCommon.constants.HOME_PAGE_NAME:
                    this.eventSessionHomeSlideBanner();
                    this.eventSessionHomeAlbumHot();
                    this.eventSessionHomePlaylistCollection();
                    this.eventSessionHomeVideoHot();
                    this.eventSessionHomeVietHotSong();
                    this.eventSessionHomeVietNewSong();
                    this.eventSessionHomeChartSong();
                    this.eventSessionHomeChartVideo();
                    this.eventSessionHomeChartAlbum();
                    break;
                case zmp3LogCommon.constants.SONG_PAGE_NAME:
                    this.eventSessionRecommend();
                    this.eventSessionAlbumRelative();
                    this.eventSessionVideoRelative();
                    this.eventSessionPlaylistCollection();
                    this.eventSessionJumpMV();
                    break;
                case zmp3LogCommon.constants.VIDEO_PAGE_NAME:
                    this.eventSessionRecommend();
                    this.eventSessionAlbumRelative();
                    this.eventSessionVideoRelative();
                    break;
                case zmp3LogCommon.constants.ALBUM_PAGE_NAME:
                case zmp3LogCommon.constants.PLAYLIST_PAGE_NAME:
                    this.eventSessionRecommend();
                    this.eventSessionAlbumRelative();
                    this.eventSessionVideoRelative();
                    this.eventSessionPlaylistCollection();
                    this.eventSessionPlaylistItems();
                    this.eventSessionJumpMV();
                    this.eventSessionJumpMVInPlaylistItems();
                    break;
                case zmp3LogCommon.constants.TOPIC_PAGE_NAME:
                    this.eventSessionTopic();
                    break;
                case zmp3LogCommon.constants.SEARCH_PAGE_NAME:
                    this.eventSessionSearchPage();
                    break;
                default:
                    break;
            }

            this.eventSessionSearchSuggest();
            this.checkLocalStorageSearchSuggest();

        } catch (ex) {
            console.log('Exception at zmp3LogRef.handlingRefLog: ', ex);
        }
    }
};

if (typeof zmp3LogRef !== 'undefined' && zmp3LogRef !== null && typeof zmp3LogRef.handlingRefLog === 'function') {
    try {
        $(function () {
            zmp3LogRef.handlingRefLog();
        });
    } catch (ex) {
        console.log('Exception at zmp3LogRef.handlingRefLog: ', ex);
    }
}

/*
 * Description: Ghi log Search
 * Author: Haon
 * Date create: 2016-Sep-09 
 * Date update: 2016-Sep-09 
 * Note: 
 */
var zmp3LogSearch = {
    constants: {
        LOG_CATEGORY_SEARCH: 'log-search',
        LOG_ACTION_ID_PARAMS: 'params'
    },
    parseSearchParamsObjectFromURL: function () {
        try {
            var searchParamsObject = {};
            var _S_KEY_KEY = 'q',
                    _S_KEY_TYPE = 't',
                    _S_KEY_SORT = 'sort',
                    _S_KEY_UPLOAD = 'upload',
                    _S_KEY_FILTER = 'filter',
                    _S_KEY_GENRE = 'genre';

            var strUrlParams = window.location.search;
            if (typeof decodeURIComponent !== 'undefined' && typeof decodeURIComponent === 'function') {
                strUrlParams = decodeURIComponent(strUrlParams);
            }
            if (zmp3LogCommon.isValidParam(strUrlParams)) {
                strUrlParams = strUrlParams.substring(1, strUrlParams.length);
                var arrParams = strUrlParams.split('&');

                var valKey = [],
                        valType = [],
                        valSort = [],
                        valUpload = [],
                        valFilter = [],
                        valGenre = [];

                for (var i = 0; i < arrParams.length; i++) {
                    var arrParamDetail = arrParams[i].split('=');
                    if (zmp3LogCommon.isValidParam(arrParamDetail) &&
                            zmp3LogCommon.isValidParam(arrParamDetail[0]) &&
                            zmp3LogCommon.isValidParam(arrParamDetail[1])) {

                        var key = arrParamDetail[0];
                        var value = arrParamDetail[1];
                        if (zmp3LogCommon.isValidParam(value)) {
                            switch (key) {
                                case _S_KEY_KEY:
                                    valKey.push(value);
                                    break;
                                case _S_KEY_TYPE:
                                    valType.push(value);
                                    break;
                                case _S_KEY_SORT:
                                    valSort.push(value);
                                    break;
                                case _S_KEY_UPLOAD:
                                    valUpload.push(value);
                                    break;
                                case _S_KEY_FILTER:
                                    valFilter.push(value);
                                    break;
                                case _S_KEY_GENRE:
                                    valGenre.push(value);
                                    break;
                            }
                        }
                    }
                }

                if (zmp3LogCommon.isValidParam(valKey)) {
                    searchParamsObject[_S_KEY_KEY] = valKey;
                }

                if (zmp3LogCommon.isValidParam(valType)) {
                    searchParamsObject[_S_KEY_TYPE] = valType;
                }
                if (zmp3LogCommon.isValidParam(valSort)) {
                    searchParamsObject[_S_KEY_SORT] = valSort;
                }
                if (zmp3LogCommon.isValidParam(valUpload)) {
                    searchParamsObject[_S_KEY_UPLOAD] = valUpload;
                }
                if (zmp3LogCommon.isValidParam(valFilter)) {
                    searchParamsObject[_S_KEY_FILTER] = valFilter;
                }
                if (zmp3LogCommon.isValidParam(valGenre)) {
                    searchParamsObject[_S_KEY_GENRE] = valGenre;
                }
                return searchParamsObject;
            }
        } catch (ex) {
            console.log('Exception at zmp3LogSearch.parseSearchParamsObjectFromURL: ', ex);
        }
    },
    handlingParamsSearchLog: function () {
        try {
            if (zmp3LogCommon.getPageName() !== 'tim-kiem') {
                return null;
            }
            urlParams = window.location.search.substring(1);
            if (!zmp3LogCommon.isValidParam(urlParams)) {
                return null;
            }

            var urlParamsParsed = this.parseSearchParamsObjectFromURL();
            if (zmp3LogCommon.isValidParam(urlParamsParsed)) {
                var sParams = {};
                sParams.pageName = zmp3LogCommon.getPageName();
                sParams.username = zmp3LogCommon.getUsername();
                sParams.userId = zmp3LogCommon.getUserId();
                sParams.zaloId = zmp3LogCommon.getZaloId();
                zmp3LogCommon.setIsVip();
                sParams.isVip = zmp3LogCommon.getIsVip();
                for (var key in urlParamsParsed) {
                    if (zmp3LogCommon.isValidParam(key)) {
                        if (urlParamsParsed.hasOwnProperty(key)) {
                            if (zmp3LogCommon.isValidParam(urlParamsParsed[key]) && urlParamsParsed[key] !== 'undefined') {
                                sParams[key] = urlParamsParsed[key];
                            }
                        }
                    }
                }
                if (typeof ZA === 'object') {
                    ZA.getVisitorID(function (vid) {
                        sParams.visitorId = vid;
                        if (!zmp3LogCommon.isValidParam(sParams.visitorId)) {
                            return;
                        }
                        var sParamsEn = zmp3LogCommon.encode(sParams);
                        if (zmp3LogCommon.isValidParam(sParamsEn)) {
                            var urlLogParams = zmp3LogSearch.constants.LOG_CATEGORY_SEARCH + '/' + zmp3LogSearch.constants.LOG_ACTION_ID_PARAMS;
                            zmp3LogCommon.push(sParamsEn, urlLogParams);
                        }
                    });
                }
            }
        } catch (ex) {
            console.log('Exception at zmp3LogSearch.handlingRefLog: ', ex);
        }
    }
};

if (typeof zmp3LogSearch !== 'undefined' && zmp3LogSearch !== null && typeof zmp3LogSearch.handlingParamsSearchLog === 'function') {
    try {
        $(function () {
            zmp3LogSearch.handlingParamsSearchLog();
        });
    } catch (ex) {
        console.log('Exception at initLog.zmp3LogSearch.handlingParamsSearchLog: ', ex);
    }
}


//
// z3Log
//

$.ajaxSetup({xhrFields: {withCredentials: true}});
var z3Log = {
    timer: null,
    timer2: null,
    urlLog1: MP3.LOG_URL + 'log/index',
    urlLog2: MP3.LOG_URL + 'log/mp3log',
    urlLogv21: MP3.LOG_URL + 'logv2/index',
    urlLogv2: MP3.LOG_URL + 'logv2/mp3log',
    start: function (id, type, msec) {

        if (this.timer !== null) {
            clearTimeout(this.timer);
        }
        if (this.timer2 !== null) {
            clearTimeout(this.timer2);
        }
        this.data = '';
        $.get('/json/log/info', {
            id: id,
            type: type
        }, function (rs) {

            if (rs.data) {
                if (typeof ZA === 'object') {
                    ZA.getVisitorID(function (vid) {
                        $.get(MP3.LOG_URL + 'log/index?sessid=' + $.cookie('__mp3sessid') + '&callback=?');
                        z3Log.timer = setTimeout(function () {
                            $.get(MP3.LOG_URL + 'log/mp3log?ckss=' + $.cookie('___sessid') + '&sessid=' + $.cookie('__mp3sessid') + '&data=' + rs.data + '&vid=' + vid + '&callback=?');
                        }, 35000);
                    });
                }
                if (typeof ZA === 'object') {
                    ZA.getVisitorID(function (vid) {
                        $.getJSON(MP3.LOG_URL + 'logv2/index?sessid=' + $.cookie('__mp3sessid') + '&callback=?');
                        z3Log.timer = setTimeout(function () {
                            var requestVisitorId = '&visitorid=' + vid;
                            var isVip = MP3.VIP == false ? "0" : "1";
                            var requestIsVip = '&isvip=' + isVip;
                            var reqReferrer = '&ref=' + document.referrer;
                            $.getJSON(MP3.LOG_URL + 'logv2/mp3log?sessid=' + $.cookie('__mp3sessid') + '&data=' + rs.data + requestVisitorId + requestIsVip + reqReferrer + '&callback=?');
                        }, 35000);
                    });
                }
            }
        });

    },
    writeLog: function (val, url) {
        if (val) {
            //          $.getJSON(this.urlLog1 + '?sessid=' + $.cookie('__mp3sessid') + '&callback=?', '', 'dataType:text');
            $.get(url + '?ckss=' + $.cookie('___sessid') + '&sessid=' + $.cookie('__mp3sessid') + '&callback=?', '', 'dataType:text');
        }
    },
    writeLogInfo: function (val, url) {
        if (!url)
            url = this.urlLog2;
        if (val) {
            try {
                $.get(url + '?ckss=' + $.cookie('___sessid') + '&sessid=' + $.cookie('__mp3sessid') + '&data=' + val + '&callback=?', '', 'dataType:text');
            } catch (e) {
            }
        }
    },
    getUid: function () {
        return 'xxxxxxxxxxxx'.replace(/[x]/g, function (c) {
            var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }).toUpperCase();
    },
    getPageId: function () {
        var url = window.location.href;
        var arrUrl = url.split('/');
        if (arrUrl.length >= 6) {
            var paramsId = arrUrl[5];
            var pageId = paramsId.substring(0, 8);
            return pageId;
        } else {
            return '';
        }
    },
    getPageName: function () {
        var url = window.location.href;
        var arrUrl = url.split('/');
        if (zmp3LogCommon.isValidParam(arrUrl)) {

            if (arrUrl.length >= 4) {
                return arrUrl[3];
            } else {
                return '';
            }
        }
    },
    initLogInfoVal: function () {
        var mediaId = this.getPageId;
        var mediaType = this.getPageName();
        if (mediaId != '' && mediaType != '') {
            $.get('/json/log/info', {
                id: mediaId,
                type: mediaType
            }, function (rs) {
                if (rs.data) {
                    if (typeof MP3 === 'object') {
                        MP3.LOG_INFO = rs.data;
                        if (MP3.LOG_INFO) {
                            var type = 0,
                                    fromId = '',
                                    fromBox = 0;
                            var delay = 0;
                            var referrer = document.referrer;
                            var pattern = /[a-z0-9-]+\//gi;
                            if (referrer && referrer.indexOf(MP3.MP3_URL) > -1) {
                                referrer = referrer.replace(MP3.MP3_URL, '');
                                if (referrer.indexOf('/') == 0) {
                                    referrer = referrer.substr(1);
                                }
                                referrer = referrer.substr(0, referrer.indexOf('.'));
                                arr = referrer.split('/');
                                fromId = referrer.replace(pattern, '');
                                switch (true) {
                                    case (referrer.indexOf('bai-hat') == 0):
                                        type = 1; // bài hát
                                        break;
                                    case (referrer.indexOf('video-clip') == 0):
                                        type = 3; // video
                                        break;
                                    case (referrer.indexOf('album') == 0):
                                    case (referrer.indexOf('playlist') == 0):
                                        type = 2; // playlist, album
                                        break;
                                    default:
                                        break;
                                }
                            }
                            var lastPos = location.pathname.lastIndexOf('/');
                            var arrPiece = location.pathname.substring(1, lastPos).toLowerCase().split('/').slice(0, 2);
                            path = arrPiece.join('/');
                            switch (arrPiece[0]) {
                                case 'bai-hat':
                                case 'album':
                                case 'playlist':
                                case 'video-clip':
                                    delay = 35000;
                                    break;
                                default:
                                    delay = 0;
                                    break;
                            }
                            MP3.LOG_INFO += '&fromId=' + fromId + '&type=' + type + '&fromBox=' + fromBox;
                            if (delay > 0) {
                                var requestVisitorId = '';
                                setTimeout(function () {
                                    if (typeof ZA === 'object') {

                                        ZA.getVisitorID(function (vid) {
                                            var requestVisitorId = '&visitorid=' + vid;
                                            var isVip = MP3.VIP == false ? "0" : "1";
                                            var requestIsVip = '&isvip=' + isVip;
                                            var reqReferrer = '&ref=' + document.referrer;
                                            var request = MP3.LOG_INFO + requestVisitorId + requestIsVip + reqReferrer;
                                            setTimeout(function () {
                                                z3Log.writeLogInfo(request, z3Log.urlLogv2);
                                            }
                                            , delay - 2000);
                                        });
                                    }
                                }, 2000);
                                z3Log.writeLog(MP3.LOG_INFO, z3Log.urlLog1);
                                z3Log.writeLog(MP3.LOG_INFO, z3Log.urlLogv21);

                                setTimeout('z3Log.writeLogInfo(MP3.LOG_INFO)', delay);

                            } else {
                                z3Log.writeLogInfo(MP3.LOG_INFO);
                            }
                        }
                    }
                }
            });
        }
    }
};

z3Log.initLogInfoVal();
if (typeof $.cookie('__mp3sessid') == 'undefined') {
    $.cookie('__mp3sessid', z3Log.getUid(), {
        domain: 'mp3.zing.vn',
        path: '/'
    });
}